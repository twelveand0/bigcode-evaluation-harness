[["#lang racket\n;;  Check if in given list of numbers, are any two numbers closer to each other than\n;; given threshold.\n;; >>> (has_close_elements (list 1.0 2.0 3.0) 0.5)\n;; #f\n;; >>> (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3)\n;; #t\n(define (has_close_elements numbers threshold)\n  (let loop ((nums numbers))\n    (cond\n      [(empty? nums) #f]\n      [(empty? (rest nums)) #f]\n      [(<= (abs (- (first nums) (second nums))) threshold) #t]\n      [else (loop (rest nums))])))\n"], ["#lang racket\n;; Given a positive integer n, you have to make a pile of n levels of stones.\n;; The first level has n stones.\n;; The number of stones in the next level is:\n;;     - the next odd number if n is odd.\n;;     - the next even number if n is even.\n;; Return the number of stones in each level in a list, where element at index\n;; i represents the number of stones in the level (i+1).\n;; Examples:\n;; >>> (make_a_pile 3)\n;; (list 3 5 7)\n(define (make_a_pile n)\n  (let loop ((level 1) (stones n) (result '()))\n    (if (> level n)\n        (reverse result)\n        (loop (+ level 1) (if (odd? stones) (+ stones 2) (+ stones 1)) (cons stones result)))))\n"], ["#lang racket\n;; You will be given a string of words separated by commas or spaces. Your task is\n;; to split the string into words and return a list of the words.\n;; For example:\n;; >>> (words_string \"Hi, my name is John\")\n;; (list \"Hi\" \"my\" \"name\" \"is\" \"John\")\n;; >>> (words_string \"One, two, three, four, five, six\")\n;; (list \"One\" \"two\" \"three\" \"four\" \"five\" \"six\")\n(define (words_string s)\n  (regexp-split #rx\"[, ]+\" s))\n"], ["#lang racket\n;; This function takes two positive numbers x and y and returns the\n;; biggest even integer number that is in the range [x, y] inclusive. If \n;; there's no such number, then the function should return -1.\n;; For example:\n;; >>> (choose_num 12 15)\n;; 14\n;; >>> (choose_num 13 12)\n;; -1\n(define (choose_num x y)\n  (let loop ((n y))\n    (cond\n      [(<= x n y) (if (even? n) n (loop (- n 1)))]\n      [else -1])))\n"], ["#lang racket\n;; You are given two positive integers n and m, and your task is to compute the\n;; average of the integers from n through m (including n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n  (if (> n m)\n      -1\n      (number->string (round (/ (+ n m) 2)) 2)))\n"], ["#lang racket\n;; Given a list of positive integers x. return a sorted list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323 1422 10))\n;; (list )\n(define (unique_digits x)\n  (filter (lambda (n)\n             (not (ormap (lambda (d) (even? d))\n                         (map (lambda (c) (- (char->integer c) (char->integer #\\0)))\n                              (string->list (number->string n))))))\n           (sort x <)))\n"], ["#lang racket\n;; Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;;   If the list is empty, return an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;;   If the list has any strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\")\n(define (by_length arr)\n  (let ((numbers (filter (lambda (x) (and (>= x 1) (<= x 9))) arr)))\n    (if (empty? numbers)\n        '()\n        (map (lambda (x)\n               (cond ((= x 1) \"One\")\n                     ((= x 2) \"Two\")\n                     ((= x 3) \"Three\")\n                     ((= x 4) \"Four\")\n                     ((= x 5) \"Five\")\n                     ((= x 6) \"Six\")\n                     ((= x 7) \"Seven\")\n                     ((= x 8) \"Eight\")\n                     ((= x 9) \"Nine\")))\n             (reverse (sort numbers <))))))\n"], ["#lang racket\n;;  Implement the function f that takes n as a parameter,\n;; and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n;; or the sum of numbers from 1 to i otherwise.\n;; i starts from 1.\n;; the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n;; Example:\n;; >>> (f 5)\n;; (list 1 2 6 24 15)\n(define (f n)\n  (define (factorial x)\n    (if (= x 0)\n        1\n        (* x (factorial (- x 1)))))\n  (define (sum-to-n x)\n    (/ (* x (+ x 1)) 2))\n  (define (get-value i)\n    (if (even? i)\n        (factorial i)\n        (sum-to-n i)))\n  (map get-value (range 1 (+ n 1))))\n"], ["#lang racket\n;; Given a positive integer n, return a list that has the number of even and odd\n;; integer palindromes that fall within the range(1, n), inclusive.\n;; Example 1:\n;; >>> (even_odd_palindrome 3)\n;; (list 1 2)\n;;     Explanation:\n;;     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n;; Example 2:\n;; >>> (even_odd_palindrome 12)\n;; (list 4 6)\n;;     Explanation:\n;;     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n;; Note:\n;;     1. 1 <= n <= 10^3\n;;     2. returned list has the number of even and odd integer palindromes respectively.\n(define (even_odd_palindrome n)\n  (define (palindrome? num)\n    (let ((str (number->string num)))\n      (equal? str (string-reverse str))))\n  (define (count-palindromes n)\n    (let loop ((i 1) (even 0) (odd 0))\n      (if (> i n)\n          (list even odd)\n          (if (palindrome? i)\n              (if (even? i)\n                  (loop (+ i 1) (+ even 1) odd)\n                  (loop (+ i 1) even (+ odd 1)))\n              (loop (+ i 1) even odd)))))\n  (count-palindromes n))\n"], ["#lang racket\n;; Write a function count_nums which takes a list of integers and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a number is negative, then its first signed digit will be negative:\n;; e.g. -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;; >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n;; 3\n(define (count_nums arr)\n  (define (sum_digits num)\n    (if (< num 0)\n        (sum_digits (- num))\n        (let loop ((n num) (sum 0))\n          (if (= n 0)\n              sum\n              (loop (quotient n 10) (+ sum (remainder n 10)))))))\n  (length (filter (lambda (x) (> (sum_digits x) 0)) arr)))\n"], ["#lang racket\n;; We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n;; numbers in the list will be randomly ordered. Your task is to determine if\n;; it is possible to get a list sorted in non-decreasing order by performing \n;; the following operation on the given list:\n;;     You are allowed to perform right shift operation any number of times.\n;; One right shift operation means shifting all elements of the list by one\n;; position in the right direction. The last element of the list will be moved to\n;; the starting position in the list i.e. 0th index. \n;; If it is possible to obtain the sorted list by performing the above operation\n;; then return #t else return #f.\n;; If the given list is empty then return #t.\n;; Note: The given list is guaranteed to have unique elements.\n;; For Example:\n;; >>> (move_one_ball (list 3 4 5 1 2))\n;; #t\n;; Explanation: By performin 2 right shift operations, non-decreasing order can\n;;              be achieved for the given list.\n;; >>> (move_one_ball (list 3 5 4 1 2))\n;; #f\n;; Explanation:It is not possible to get non-decreasing order for the given\n;;             list by performing any number of right shift operations.\n(define (move_one_ball arr)\n  (if (null? arr)\n      #t\n      (let ((sorted-arr (sort arr <)))\n        (or (equal? arr sorted-arr)\n            (equal? (cdr arr) (append (list (car arr)) (cdr sorted-arr)))))))\n"], ["#lang racket\n;;  Find the shortest palindrome that begins with a supplied string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied string that is a palindrome.\n;; - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome \"cata\")\n;; \"catac\"\n(define (make_palindrome string)\n  (let loop ((i 0))\n    (if (>= i (string-length string))\n        string\n        (let ((prefix (substring string 0 i))\n              (suffix (substring string i)))\n          (if (string=? prefix (string-reverse suffix))\n              (string-append string (string-reverse prefix))\n              (loop (+ i 1)))))))\n"], ["#lang racket\n;; In this problem, you will implement a function that takes two lists of numbers,\n;; and determines whether it is possible to perform an exchange of elements\n;; between them to make lst1 a list of only even numbers.\n;; There is no limit on the number of exchanged elements between lst1 and lst2.\n;; If it is possible to exchange elements between the lst1 and lst2 to make\n;; all the elements of lst1 to be even, return \"YES\".\n;; Otherwise, return \"NO\".\n;; For example:\n;; >>> (exchange (list 1 2 3 4) (list 1 2 3 4))\n;; \"YES\"\n;; >>> (exchange (list 1 2 3 4) (list 1 5 3 4))\n;; \"NO\"\n;; It is assumed that the input lists will be non-empty.\n(define (exchange lst1 lst2)\n  (let ((sum1 (apply + lst1))\n        (sum2 (apply + lst2)))\n    (if (even? sum1)\n        \"YES\"\n        (if (even? sum2)\n            \"YES\"\n            \"NO\"))))\n"], ["#lang racket\n;; Given a string representing a space separated lowercase letters, return a hash\n;; of the letter with the most repetition and containing the corresponding count.\n;; If several letters have the same occurrence, return all of them.\n;; Example:\n;; >>> (histogram \"a b c\")\n;; #hash((\"a\" .  1) (\"b\" .  1) (\"c\" .  1))\n;; >>> (histogram \"a b b a\")\n;; #hash((\"a\" .  2) (\"b\" .  2))\n;; >>> (histogram \"a b c a b\")\n;; #hash((\"a\" .  2) (\"b\" .  2))\n;; >>> (histogram \"b b b b a\")\n;; #hash((\"b\" .  4))\n;; >>> (histogram \"\")\n;; #hash()\n(define (histogram test)\n  (define letter-counts (make-hash))\n  (define words (string-split test))\n  (for ([word words])\n    (for ([letter (string->list word)])\n      (hash-update letter-counts letter add1 0)))\n  (define max-count (apply max (hash-values letter-counts)))\n  (define result (make-hash))\n  (for ([letter (hash-keys letter-counts)])\n    (when (= (hash-ref letter-counts letter) max-count)\n      (hash-set result letter max-count)))\n  result)\n"], ["#lang racket\n;; Task\n;; We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n;; then check if the result string is palindrome.\n;; A string is called palindrome if it reads the same backward as forward.\n;; You should return a list containing the result string and #t/#f for the check.\n;; Example\n;; >>> (reverse_delete \"abcde\" \"ae\")\n;; (list \"bcd\" #f)\n;; >>> (reverse_delete \"abcdef\" \"b\")\n;; (list \"acdef\" #f)\n;; >>> (reverse_delete \"abcdedcba\" \"ab\")\n;; (list \"cdedc\" #t)\n(define (reverse_delete s c)\n  (let* ((s-filtered (filter (lambda (ch) (not (member ch (string->list c)))) (string->list s)))\n         (s-reversed (list->string (reverse s-filtered)))\n         (is-palindrome? (equal? s-filtered s-reversed)))\n    (list s-reversed is-palindrome?)))\n"], ["#lang racket\n;; Given a list of strings, where each string consists of only digits, return a list.\n;; Each element i of the output should be \"the number of odd elements in the\n;; string i of the input.\" where all the i's should be replaced by the number\n;; of odd digits in the i'th string of the input.\n;; >>> (odd_count (list \"1234567\"))\n;; (list \"the number of odd elements 4n the str4ng 4 of the 4nput.\")\n;; >>> (odd_count (list \"3\" \"11111111\"))\n;; (list \"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\")\n(define (odd_count lst)\n  (map (lambda (str)\n         (let ((num-odds (length (filter odd? (map string->number (string->list str))))))\n           (string-append \"the number of odd elements \" (number->string num-odds) \"n the str\" (number->string (string-length str)) \"ng \" (number->string (string-length str)) \" of the \" (number->string (string-length str)) \"nput.\")))\n       lst))\n"], ["#lang racket\n;; Given a list of integers nums, find the minimum sum of any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6\n(define (minSubArraySum nums)\n  (let loop ((nums nums) (min-sum (car nums)) (curr-sum 0))\n    (if (null? nums)\n        min-sum\n        (let ((num (car nums)))\n          (loop (cdr nums)\n                (min min-sum (+ curr-sum num))\n                (min (+ curr-sum num) num))))))\n"], ["#lang racket\n;; You are given a rectangular grid of wells. Each row represents a single well,\n;; and each 1 in a row represents a single unit of water.\n;; Each well has a corresponding bucket that can be used to extract water from it, \n;; and all buckets have the same capacity.\n;; Your task is to use the buckets to empty the wells.\n;; Output the number of times you need to lower the buckets.\n;; Example 1:\n;; >>> (max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1)) 1)\n;; 6\n;; Example 2:\n;; >>> (max_fill (list (list 0 0 1 1) (list 0 0 0 0) (list 1 1 1 1) (list 0 1 1 1)) 2)\n;; 5\n;; Example 3:\n;; >>> (max_fill (list (list 0 0 0) (list 0 0 0)) 5)\n;; 0\n;; Constraints:\n;;     * all wells have the same length\n;;     * 1 <= grid.length <= 10^2\n;;     * 1 <= grid[:,1].length <= 10^2\n;;     * grid[i][j] -> 0 | 1\n;;     * 1 <= capacity <= 10\n(define (max_fill grid capacity)\n  (let* ((rows (length grid))\n         (cols (length (first grid)))\n         (total-water (apply + (map (lambda (row) (apply + row)) grid)))\n         (buckets-needed (ceiling (/ total-water capacity))))\n    (if (> buckets-needed rows)\n        (- buckets-needed rows)\n        0)))\n"], ["#lang racket\n;; In this Kata, you have to sort a list of non-negative integers according to\n;; number of ones in their binary representation in ascending order.\n;; For similar number of ones, sort based on decimal value.\n;; It must be implemented like this:\n;; >>> (sort_array (list 1 5 2 3 4))\n;; (list 1 2 3 4 5)\n;; >>> (sort_array (list -2 -3 -4 -5 -6))\n;; (list -6 -5 -4 -3 -2)\n;; >>> (sort_array (list 1 0 2 3 4))\n;; (list 0 1 2 3 4)\n(define (sort_array arr)\n  (sort arr\n        (lambda (x y)\n          (cond\n            [(< (count-ones x) (count-ones y)) #t]\n            [(> (count-ones x) (count-ones y)) #f]\n            [else (< x y)]))))\n"], ["#lang racket\n;; Given a string s and a natural number n, you have been tasked to implement \n;; a function that returns a list of all words from string s that contain exactly \n;; n consonants, in order these words appear in the string s.\n;; If the string s is empty then the function should return an empty list.\n;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"little\")\n;; >>> (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\" \"lamb\")\n;; >>> (select_words \"simple white space\" 2)\n;; (list )\n;; >>> (select_words \"Hello world\" 4)\n;; (list \"world\")\n;; >>> (select_words \"Uncle sam\" 3)\n;; (list \"Uncle\")\n(define (select_words s n)\n  (let ((words (regexp-split #rx\" \" s)))\n    (filter (lambda (word)\n              (= n (length (filter (lambda (c)\n                                     (not (member c '(#\\a #\\e #\\i #\\o #\\u)))\n                                   (string->list word))))))\n            words)))\n"], ["#lang racket\n;; You are given a word. Your task is to find the closest vowel that stands between \n;; two consonants from the right side of the word (case sensitive).\n;; Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n;; find any vowel met the above condition. \n;; You may assume that the given string contains English letter only.\n;; Example:\n;; >>> (get_closest_vowel \"yogurt\")\n;; \"u\"\n;; >>> (get_closest_vowel \"FULL\")\n;; \"U\"\n;; >>> (get_closest_vowel \"quick\")\n;; \"\"\n;; >>> (get_closest_vowel \"ab\")\n;; \"\"\n(define (get_closest_vowel word)\n  (let loop ((i (- (string-length word) 2)) (vowel #f))\n    (if (< i 1)\n        (if vowel (string vowel) \"\")\n        (if (and (not (member (string-ref word i) '(#\\a #\\e #\\i #\\o #\\u)))\n                 (member (string-ref word (+ i 1)) '(#\\a #\\e #\\i #\\o #\\u))\n                 (member (string-ref word (+ i 2)) '(#\\a #\\e #\\i #\\o #\\u)))\n            (loop (- i 1) (string-ref word (+ i 1)))\n            (loop (- i 1) vowel)))))\n"], ["#lang racket\n;; You are given a list of two strings, both strings consist of open\n;; parentheses '(' or close parentheses ')' only.\n;; Your job is to check if it is possible to concatenate the two strings in\n;; some order, that the resulting string will be good.\n;; A string S is considered to be good if and only if all parentheses in S\n;; are balanced. For example: the string '(())()' is good, while the string\n;; '())' is not.\n;; Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n;; Examples:\n;; >>> (match_parens (list \"()(\" \")\"))\n;; \"Yes\"\n;; >>> (match_parens (list \")\" \")\"))\n;; \"No\"\n(define (match_parens lst)\n  (let ((s1 (car lst))\n        (s2 (cadr lst)))\n    (if (= (string-count s1 #\\() (string-count s1 #\\)))\n        (if (= (string-count s2 #\\() (string-count s2 #\\)))\n            \"Yes\"\n            \"No\")\n        \"No\")))\n"], ["#lang racket\n;;  Input are two strings a and b consisting only of 1s and 0s.\n;; Perform binary XOR on these inputs and return result also as a string.\n;; >>> (string_xor \"010\" \"110\")\n;; \"100\"\n(define (string_xor a b)\n  (let ((result \"\"))\n    (for ((i (in-range (string-length a))))\n      (set! result (string-append result (if (equal? (string-ref a i) (string-ref b i)) \"0\" \"1\"))))\n    result))\n"], ["#lang racket\n;; Given a list arr of integers and a positive integer k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n;; Example 1:\n;; >>> (maximum (list -3 -4 5) 3)\n;; (list -4 -3 5)\n;; Example 2:\n;; >>> (maximum (list 4 -4 4) 2)\n;; (list 4 4)\n;; Example 3:\n;; >>> (maximum (list -3 2 1 2 -1 -2 1) 1)\n;; (list 2)\n;; Note:\n;;     1. The length of the list will be in the range of [1, 1000].\n;;     2. The elements in the list will be in the range of [-1000, 1000].\n;;     3. 0 <= k <= len(arr)\n(define (maximum arr k)\n  (sort arr >)\n  (take arr k))\n"], ["#lang racket\n;; Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n;; Examples\n;; >>> (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (let loop ((lst lst) (sum 0) (index 0))\n    (cond\n      ((null? lst) sum)\n      ((and (odd? (car lst)) (even? index))\n       (loop (cdr lst) (+ sum (car lst)) (+ index 1)))\n      (else\n       (loop (cdr lst) sum (+ index 1))))))\n"], ["#lang racket\n;; Given a non-empty list of integers arr and an integer k, return\n;; the sum of the elements with at most two digits from the first k elements of arr.\n;; Example:\n;; >>> (add_elements (list 111 21 3 4000 5 6 7 8 9) 4)\n;; 24\n;; Constraints:\n;;     1. 1 <= len(arr) <= 100\n;;     2. 1 <= k <= len(arr)\n(define (add_elements arr k)\n  (let loop ([i 0] [sum 0])\n    (if (= i k)\n        sum\n        (let ([num (list-ref arr i)])\n          (if (< num 100)\n              (loop (+ i 1) (+ sum num))\n              (loop (+ i 1) sum))))))\n"], ["#lang racket\n;; Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n;; The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n;; as follows: start with any positive integer n. Then each term is obtained from the \n;; previous term as follows: if the previous term is even, the next term is one half of \n;; the previous term. If the previous term is odd, the next term is 3 times the previous\n;; term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n;; Note: \n;;     1. Collatz(1) is [1].\n;;     2. returned list sorted in increasing order.\n;; For example:\n;; get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n;; >>> (get_odd_collatz 5)\n;; (list 1 5)\n(define (get_odd_collatz n)\n  (let loop ((num n) (lst '()))\n    (cond\n      ((= num 1) (sort lst <))\n      ((odd? num) (loop (+ 1 (* 3 num)) (cons num lst)))\n      (else (loop (/ num 2) lst)))))\n"], ["#lang racket\n;; You have to write a function which validates a given date string and\n;; returns #t if the date is valid otherwise #f.\n;; The date is valid if all of the following rules are satisfied:\n;; 1. The date string is not empty.\n;; 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n;; 3. The months should not be less than 1 or higher than 12.\n;; 4. The date should be in the format: mm-dd-yyyy\n;; >>> (valid_date \"03-11-2000\")\n;; #t\n;; >>> (valid_date \"15-01-2012\")\n;; #f\n;; >>> (valid_date \"04-0-2040\")\n;; #f\n;; >>> (valid_date \"06-04-2020\")\n;; #t\n;; >>> (valid_date \"06/04/2020\")\n;; #f\n(define (valid_date date)\n  (and (not (string-empty? date))\n       (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$\" date)\n       (let ([month (string->number (substring date 0 2))]\n             [day (string->number (substring date 3 5))]\n             [year (string->number (substring date 6 10))])\n         (and (<= 1 month 12)\n              (cond\n                [(member month '(1 3 5 7 8 10 12)) (<= 1 day 31)]\n                [(member month '(4 6 9 11)) (<= 1 day 30)]\n                [(= month 2) (if (leap-year? year)\n                                 (<= 1 day 29)\n                                 (<= 1 day 28))]\n                [else #f])))))\n"], ["#lang racket\n;; Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n;; should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n;; alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n;; Examples\n;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n(define (split_words txt)\n  (cond\n    [(regexp-match #rx\" \" txt) (string-split txt)]\n    [(regexp-match #rx\",\" txt) (string-split txt #\\,)]\n    [else\n     (let loop ([i 0] [count 0])\n       (if (= i (string-length txt))\n           count\n           (loop (+ i 1) (if (odd? (- (char->integer (string-ref txt i)) (char->integer #\\a)) 2))\n                 (+ count 1)\n                 count)))]))\n"], ["#lang racket\n;; Given a list of numbers, return whether or not they are sorted\n;; in ascending order. If list has more than 1 duplicate of the same\n;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n;; >>> (is_sorted (list 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted (list 1 2 2 2 3 4))\n;; #f\n(define (is_sorted lst)\n  (cond\n    [(null? lst) #t]\n    [(null? (cdr lst)) #t]\n    [(> (car lst) (cadr lst)) #f]\n    [else (is_sorted (cdr lst))]))\n"], ["#lang racket\n;; You are given two intervals,\n;; where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n;; The given intervals are closed which means that the interval (start, end)\n;; includes both start and end.\n;; For each given interval, it is assumed that its start is less or equal its end.\n;; Your task is to determine whether the length of intersection of these two \n;; intervals is a prime number.\n;; Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n;; which its length is 1, which not a prime number.\n;; If the length of the intersection is a prime number, return \"YES\",\n;; otherwise, return \"NO\".\n;; If the two intervals don't intersect, return \"NO\".\n;; [input/output] samples:\n;; >>> (intersection (list 1 2) (list 2 3))\n;; \"NO\"\n;; >>> (intersection (list -1 1) (list 0 4))\n;; \"NO\"\n;; >>> (intersection (list -3 -1) (list -5 5))\n;; \"YES\"\n(define (intersection interval1 interval2)\n  (let ((start1 (car interval1))\n        (end1 (cadr interval1))\n        (start2 (car interval2))\n        (end2 (cadr interval2)))\n    (if (or (< end1 start2) (< end2 start1))\n        \"NO\"\n        (let ((intersection-start (max start1 start2))\n              (intersection-end (min end1 end2)))\n          (if (<= intersection-start intersection-end)\n              (let ((intersection-length (- intersection-end intersection-start)))\n                (if (prime? intersection-length)\n                    \"YES\"\n                    \"NO\"))\n              \"NO\")))))\n"], ["#lang racket\n;; You are given a list arr of integers and you need to return\n;; sum of magnitudes of integers multiplied by product of all signs\n;; of each number in the list, represented by 1, -1 or 0.\n;; Note: return #f for empty arr.\n;; Example:\n;; >>> (prod_signs (list 1 2 2 -4))\n;; 9\n;; >>> (prod_signs (list 0 1))\n;; 0\n;; >>> (prod_signs (list ))\n;; #f\n(define (prod_signs arr)\n  (if (empty? arr)\n      #f\n      (let ((signs (map (lambda (x) (cond ((> x 0) 1)\n                                          ((< x 0) -1)\n                                          (else 0)))\n                        arr)))\n        (* (apply + (map abs arr))\n           (apply * signs)))))\n"], ["#lang racket\n;; Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n;; each cell of the grid contains a value. Every integer in the range [1, N * N]\n;; inclusive appears exactly once on the cells of the grid.\n;; You have to find the minimum path of length k in the grid. You can start\n;; from any cell, and in each step you can move to any of the neighbor cells,\n;; in other words, you can go to cells which share an edge with you current\n;; cell.\n;; Please note that a path of length k means visiting exactly k cells (not\n;; necessarily distinct).\n;; You CANNOT go off the grid.\n;; A path A (of length k) is considered less than a path B (of length k) if\n;; after making the ordered lists of the values on the cells that A and B go\n;; through (let's call them lst_A and lst_B), lst_A is lexicographically less\n;; than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n;; such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n;; lst_A[j] = lst_B[j].\n;; It is guaranteed that the answer is unique.\n;; Return an ordered list of the values on the cells that the minimum path go through.\n;; Examples:    \n;; >>> (minPath (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3)\n;; (list 1 2 1)\n;; >>> (minPath (list (list 5 9 3) (list 4 1 6) (list 7 8 2)) 1)\n;; (list 1)\n(define (minPath grid k)\n  (let* ((n (length grid))\n         (visited (make-vector (* n n) #f))\n         (path (make-vector k #f))\n         (min-path (make-vector k #f)))\n    (define (dfs i j k)\n      (when (and (>= i 0) (< i n) (>= j 0) (< j n) (not (vector-ref visited (+ (* i n) j))))\n        (vector-set visited (+ (* i n) j) #t)\n        (vector-set path k (vector-ref (list-ref grid i) j))\n        (when (= k (- k 1))\n          (if (or (not (vector-ref min-path 0)) (< (vector-ref path 0) (vector-ref min-path 0)))\n              (begin\n                (vector-copy path 0 min-path 0 k)\n                (vector-copy path 0 min-path 0 k))))\n        (for ([dx (in-list '(-1 0 1))] [dy (in-list '(-1 0 1))])\n          (when (and (not (= dx 0)) (not (= dy 0)))\n            (dfs (+ i dx) (+ j dy) (- k 1))))\n        (vector-set visited (+ (* i n) j) #f)))\n    (for ([i (in-range n)] [j (in-range n)])\n      (dfs i j (- k 1)))\n    (vector->list min-path)))\n"], ["#lang racket\n;;  Out of list of strings, return the longest one. Return the first one in case of multiple\n;; strings of the same length. Return #f in case the input list is empty.\n;; >>> (longest (list ))\n;; #f\n;; >>> (longest (list \"a\" \"b\" \"c\"))\n;; \"a\"\n;; >>> (longest (list \"a\" \"bb\" \"ccc\"))\n;; \"ccc\"\n(define (longest strings)\n  (cond\n    [(empty? strings) #f]\n    [else (foldr (lambda (x y) (if (> (string-length x) (string-length y)) x y)) (car strings) (cdr strings))]))\n"], ["#lang racket\n;; Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n;; the last couple centuries. However, what people don't know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n;; tri(1) = 3\n;; tri(n) = 1 + n / 2, if n is even.\n;; tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n;; For example:\n;; tri(2) = 1 + (2 / 2) = 2\n;; tri(4) = 3\n;; tri(3) = tri(2) + tri(1) + tri(4)\n;;        = 2 + 3 + 3 = 8 \n;; You are given a non-negative integer number n, you have to a return a list of the \n;; first n + 1 numbers of the Tribonacci sequence.\n;; Examples:\n;; >>> (tri 3)\n;; (list 1 3 2 8)\n(define (tri n)\n  (define (tri-helper n)\n    (cond\n      ((= n 1) 3)\n      ((even? n) (+ 1 (/ n 2)))\n      (else (+ (tri-helper (- n 1)) (tri-helper (- n 2)) (tri-helper (+ n 1))))))\n  (map tri-helper (range (+ n 1))))\n"], ["#lang racket\n;; Given a positive integer n, return the product of the odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits n)\n  (let loop ((n n) (product 1))\n    (if (= n 0)\n        (if (= product 1) 0 product)\n        (let ((digit (remainder n 10)))\n          (loop (quotient n 10)\n                (if (odd? digit) (* product digit) product))))))\n"], ["#lang racket\n;; Create a function that takes a string as input which contains only square brackets.\n;; The function should return #t if and only if there is a valid subsequence of brackets \n;; where at least one bracket in the subsequence is nested.\n;; >>> (is_nested \"[[]]\")\n;; #t\n;; >>> (is_nested \"[]]]]]]][[[[[]\")\n;; #f\n;; >>> (is_nested \"[][]\")\n;; #f\n;; >>> (is_nested \"[]\")\n;; #f\n;; >>> (is_nested \"[[][]]\")\n;; #t\n;; >>> (is_nested \"[[]][[\")\n;; #t\n(define (is_nested string)\n  (let loop ((stack '()) (chars (string->list string)))\n    (cond\n      ((null? chars) #f)\n      ((char=? (car chars) #\\[) (loop (cons #\\[ stack) (cdr chars)))\n      ((char=? (car chars) #\\])\n       (if (null? stack)\n           #f\n           (loop (cdr stack) (cdr chars))))\n      (else (loop stack (cdr chars))))))\n"], ["#lang racket\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n"], ["#lang racket\n;; Create a function that returns #t if the last character\n;; of a given string is an alphabetical character and is not\n;; a part of a word, and #f otherwise.\n;; Note: \"word\" is a group of characters separated by space.\n;; Examples:\n;; >>> (check_if_last_char_is_a_letter \"apple pie\")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"apple pi e\")\n;; #t\n;; >>> (check_if_last_char_is_a_letter \"apple pi e \")\n;; #f\n;; >>> (check_if_last_char_is_a_letter \"\")\n;; #f\n(define (check_if_last_char_is_a_letter txt)\n  (let ((last-char (string-ref txt (- (string-length txt) 1))))\n    (and (char-alphabetic? last-char)\n         (or (= (string-length txt) 0)\n             (char-whitespace? (string-ref txt (- (string-length txt) 2)))))))\n"], ["#lang racket\n;; Create a function which returns the largest index of an element which\n;; is not greater than or equal to the element immediately preceding it. If\n;; no such element exists then return -1. The given list will not contain\n;; duplicate values.\n;; Examples:\n;; >>> (can_arrange (list 1 2 4 3 5))\n;; 3\n;; >>> (can_arrange (list 1 2 3))\n;; -1\n(define (can_arrange arr)\n  (let loop ((i 1) (max_index -1))\n    (if (= i (length arr))\n        max_index\n        (if (< (list-ref arr i) (list-ref arr (- i 1)))\n            (loop (+ i 1) i)\n            (loop (+ i 1) max_index)))))\n"], ["#lang racket\n;; Create a function that returns a list (a, b), where 'a' is\n;; the largest of negative integers, and 'b' is the smallest\n;; of positive integers in a list.\n;; If there is no negative or positive integers, return them as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;; >>> (largest_smallest_integers (list 0))\n;; (list #f #f)\n(define (largest_smallest_integers lst)\n  (let ((negatives (filter negative? lst))\n        (positives (filter positive? lst)))\n    (if (and (empty? negatives) (empty? positives))\n        (list #f #f)\n        (list (if (empty? negatives) #f (apply max negatives))\n              (if (empty? positives) #f (apply min positives))))))\n"], ["#lang racket\n;; Create a function that takes integers, floats, or strings representing\n;; real numbers, and returns the larger variable in its given variable type.\n;; Return #f if the values are equal.\n;; Note: If a real number is represented as a string, the floating point might be . or ,\n;; >>> (compare_one 1 2.5)\n;; 2.5\n;; >>> (compare_one 1 \"2,3\")\n;; \"2,3\"\n;; >>> (compare_one \"5,1\" \"6\")\n;; \"6\"\n;; >>> (compare_one \"1\" 1)\n;; #f\n(define (compare_one a b)\n  (cond\n    [(and (number? a) (number? b)) (if (> a b) a (if (< a b) b #f))]\n    [(and (string? a) (string? b)) (if (> (string->number a) (string->number b)) a (if (< (string->number a) (string->number b)) b #f))]\n    [else #f]))\n"], ["#lang racket\n;; Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n;; Example\n;; >>> (is_equal_to_sum_even 4)\n;; #f\n;; >>> (is_equal_to_sum_even 6)\n;; #f\n;; >>> (is_equal_to_sum_even 8)\n;; #t\n(define (is_equal_to_sum_even n)\n  (if (and (even? n) (>= n 8))\n      #t\n      #f))\n"], ["#lang racket\n;; The Brazilian factorial is defined as:\n;; brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n;; where n > 0\n;; For example:\n;; >>> (special_factorial 4)\n;; 288\n;; The function will receive an integer as input and should return the special\n;; factorial of this integer.\n(define (special_factorial n)\n  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n"], ["#lang racket\n;;  Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= b 0) a]\n    [else (greatest_common_divisor b (modulo a b))]))\n"], ["#lang racket\n;; Given a string text, replace all spaces in it with underscores, \n;; and if a string has more than 2 consecutive spaces, \n;; then replace all consecutive spaces with - \n;; >>> (fix_spaces \" Example\")\n;; \"Example\"\n;; >>> (fix_spaces \" Example 1\")\n;; \"Example_1\"\n;; >>> (fix_spaces \" Example 2\")\n;; \"_Example_2\"\n;; >>> (fix_spaces \" Example 3\")\n;; \"_Example-3\"\n(define (fix_spaces text)\n  (let ((new-text (regexp-replace* #rx\"  +\" text \"-\")))\n    (regexp-replace* #rx\" \" new-text \"_\")))\n"], ["#lang racket\n;; Create a function which takes a string representing a file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n;; A file's name is considered to be valid if and only if all the following conditions \n;; are met:\n;; - There should not be more than three digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly one dot '.'\n;; - The substring before the dot should not be empty, and it starts with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n;; >>> (file_name_check \"example.txt\")\n;; \"Yes\"\n;; >>> (file_name_check \"1example.dll\")\n;; \"No\"\n(define (file_name_check file_name)\n  (let* ((dot_index (string-index file_name #\\.))\n         (before_dot (substring file_name 0 dot_index))\n         (after_dot (substring file_name (+ dot_index 1)))\n         (digit_count (string-count file_name char-numeric?))\n         (valid_extensions '(\"txt\" \"exe\" \"dll\")))\n    (if (and (<= digit_count 3)\n             (string-index before_dot char-alphabetic?)\n             (string-index after_dot char-alphabetic?)\n             (member after_dot valid_extensions))\n        \"Yes\"\n        \"No\")))\n"], ["#lang racket\n;; \"\n;; This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n;; multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n;; change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n;; Examples:\n;; >>> lst\n;; (list 1 2 3)\n;; >>> lst\n;; (list )\n;; >>> lst\n;; (list -1 -5 2 -1 -5)\n(define (sum_squares lst)\n  (define (helper lst index sum)\n    (cond\n      [(empty? lst) sum]\n      [(and (= (modulo index 3) 0) (not (= (modulo index 4) 0))) (helper (rest lst) (+ index 1) (+ sum (* (first lst) (first lst))))]\n      [(= (modulo index 4) 0) (helper (rest lst) (+ index 1) (+ sum (* (first lst) (first lst) (first lst))))]\n      [else (helper (rest lst) (+ index 1) (+ sum (first lst)))]))\n  (helper lst 0 0))\n"], ["#lang racket\n;; You are given a string representing a sentence,\n;; the sentence contains some words separated by a space,\n;; and you have to return a string that contains the words from the original sentence,\n;; whose lengths are prime numbers,\n;; the order of the words in the new string should be the same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n;;     * 1 <= len(sentence) <= 100\n;;     * sentence contains only letters\n(define (words_in_sentence sentence)\n  (let ((words (string-split sentence)))\n    (string-join (filter prime-length? words) \" \")))\n"], ["#lang racket\n;; Your task is to implement a function that will simplify the expression\n;; x * n. The function returns #t if x * n evaluates to a whole number and #f\n;; otherwise. Both x and n, are string representation of a fraction, and have the following format,\n;; <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n;; You can assume that x, and n are valid fractions, and do not have zero as denominator.\n;; >>> (simplify \"1/5\" \"5/1\")\n;; #t\n;; >>> (simplify \"1/6\" \"2/1\")\n;; #f\n;; >>> (simplify \"7/10\" \"10/2\")\n;; #f\n(define (simplify x n)\n  (let ((x-num (string->number (car (string-split x \"/\"))))\n        (x-den (string->number (cadr (string-split x \"/\"))))\n        (n-num (string->number (car (string-split n \"/\"))))\n        (n-den (string->number (cadr (string-split n \"/\")))))\n    (let ((product (* x-num n-num)))\n      (if (integer? (/ product (* x-den n-den)))\n          #t\n          #f))))\n"], ["#lang racket\n;; Write a function which sorts the given list of integers\n;; in ascending order according to the sum of their digits.\n;; Note: if there are several items with similar sum of their digits,\n;; order them based on their index in original list.\n;; For example:\n;; >>> (order_by_points (list 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n          (let ((x-sum (apply + (map (lambda (c) (- (char->integer c) 48))\n                                     (string->list (number->string x)))))\n                (y-sum (apply + (map (lambda (c) (- (char->integer c) 48))\n                                     (string->list (number->string y))))))\n            (if (= x-sum y-sum)\n                (< (index-of nums x) (index-of nums y))\n                (< x-sum y-sum))))))\n"], ["#lang racket\n;; Write a function that takes a list of numbers as input and returns \n;; the number of elements in the list that are greater than 10 and both \n;; first and last digits of a number are odd (1, 3, 5, 7, 9).\n;; For example:\n;; >>> (specialFilter (list 15 -73 14 -15))\n;; 1\n;; >>> (specialFilter (list 33 -2 -3 45 21 109))\n;; 2\n(define (specialFilter nums)\n  (count (filter (lambda (x)\n                   (and (> x 10)\n                        (odd? (string->number (string (string-ref (number->string x) 0))))\n                        (odd? (string->number (string (string-ref (number->string x) (- (string-length (number->string x)) 1)))))))\n                 nums)))\n"], ["#lang racket\n;;     You are given a positive integer n. You have to create an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n;;     and a[i] + a[j] + a[k] is a multiple of 3.\n;;     Example :\n;;     >>> (get_max_triples 5)\n;;     1\n;; Explanation: \n;; a = [1, 3, 7, 13, 21]\n;; The only valid triple is (1, 7, 13).\n(define (get_max_triples n)\n  (let ((a (map (lambda (i) (+ (* i i) (- i) 1)) (range 1 (+ n 1)))))\n    (count (lambda (triple) (= (modulo (apply + triple) 3) 0))\n           (combinations a 3))))\n"], ["#lang racket\n;; There are eight planets in our solar system: the closerst to the Sun \n;; is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n;; Uranus, Neptune.\n;; Write a function that takes two planet names as strings planet1 and planet2. \n;; The function should return a list containing all planets whose orbits are \n;; located between the orbit of planet1 and the orbit of planet2, sorted by \n;; the proximity to the sun. \n;; The function should return an empty list if planet1 or planet2\n;; are not correct planet names. \n;; Examples\n;; >>> (bf \"Jupiter\" \"Neptune\")\n;; (list \"Saturn\" \"Uranus\")\n;; >>> (bf \"Earth\" \"Mercury\")\n;; \"Venus\"\n;; >>> (bf \"Mercury\" \"Uranus\")\n;; (list \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\")\n(define (bf planet1 planet2)\n  (let ((planets '(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")))\n    (cond\n      ((not (member planet1 planets)) '())\n      ((not (member planet2 planets)) '())\n      (else\n       (let ((start-index (add1 (list-index planets planet1)))\n             (end-index (list-index planets planet2)))\n         (if (< end-index start-index)\n             (reverse (sublist planets end-index start-index))\n             (sublist planets start-index end-index)))))))\n"], ["#lang racket\n;; Write a function that accepts a list of strings as a parameter,\n;; deletes the strings that have odd lengths from it,\n;; and returns the resulted list with a sorted order,\n;; The list is always a list of strings and never a list of numbers,\n;; and it may contain duplicates.\n;; The order of the list should be ascending by length of each word, and you\n;; should return the list sorted by that rule.\n;; If two words have the same length, sort the list alphabetically.\n;; The function should return a list of strings in sorted order.\n;; You may assume that all words will have the same length.\n;; For example:\n;; >>> (list_sort (list \"aa\" \"a\" \"aaa\"))\n;; (list \"aa\")\n;; >>> (list_sort (list \"ab\" \"a\" \"aaa\" \"cd\"))\n;; (list \"ab\" \"cd\")\n(define (sorted_list_sum lst)\n  (sort lst string<?))\n  "], ["#lang racket\n;;  Return list of all prefixes from shortest to longest of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"abc\")\n(define (all_prefixes string)\n  (let loop ((i 1) (prefixes (list (substring string 0 1))))\n    (if (= i (string-length string))\n        prefixes\n        (loop (+ i 1) (cons (substring string 0 (+ i 1)) prefixes)))))\n"], ["#lang racket\n;; A simple program which should return the value of x if n is \n;; a prime number and should return the value of y otherwise.\n;; Examples:\n;; >>> (x_or_y 7 34 12)\n;; 34\n;; >>> (x_or_y 15 8 5)\n;; 5\n(define (x_or_y n x y)\n  (if (prime? n)\n      x\n      y))\n"], ["#lang racket\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n      0\n      (let ((first (first lst)))\n        (if (and (integer? first) (odd? first))\n            (+ (expt first 2) (double_the_difference (rest lst)))\n            (double_the_difference (rest lst))))))\n"], ["#lang racket\n;; I think we all remember that feeling when the result of some long-awaited\n;; event is finally known. The feelings and thoughts you have at that moment are\n;; definitely worth noting down and comparing.\n;; Your task is to determine if a person correctly guessed the results of a number of matches.\n;; You are given two lists of scores and guesses of equal length, where each index shows a match. \n;; Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n;; the value is 0, and if not, the value is the absolute difference between the guess and the score.\n;; example:\n;; >>> (compare (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2))\n;; (list 0 0 0 0 3 3)\n;; >>> (compare (list 0 5 0 0 0 4) (list 4 1 1 0 0 -2))\n;; (list 4 4 1 0 0 6)\n(define (compare game guess)\n  (map (lambda (g s) (abs (- g s))) guess game))\n"], ["#lang racket\n;; You will be given the name of a class (a string) and a list of extensions.\n;; The extensions are to be used to load additional classes to the class. The\n;; strength of the extension is as follows: Let CAP be the number of the uppercase\n;; letters in the extension's name, and let SM be the number of lowercase letters \n;; in the extension's name, the strength is given by the fraction CAP - SM. \n;; You should find the strongest extension and return a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there are two or more extensions with the same strength, you should\n;; choose the one that comes first in the list.\n;; For example, if you are given \"Slices\" as the class and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n;; (its strength is -1).\n;; Example:\n;; >>> (Strongest_Extension \"my_class\" (list \"AA\" \"Be\" \"CC\"))\n;; \"my_class.AA\"\n(define (Strongest_Extension class_name extensions)\n  (define (extension_strength extension)\n    (let ((uppercase_count (string-count extension char-upper-case?))\n          (lowercase_count (string-count extension char-lower-case?)))\n      (- uppercase_count lowercase_count)))\n  (define (strongest_extension extensions)\n    (let ((sorted_extensions (sort extensions > extension_strength)))\n      (car sorted_extensions)))\n  (string-append class_name \".\" (strongest_extension extensions)))\n"], ["#lang racket\n;; You are given 2 words. You need to return #t if the second word or any of its rotations is a substring in the first word\n;; >>> (cycpattern_check \"abcd\" \"abd\")\n;; #f\n;; >>> (cycpattern_check \"hello\" \"ell\")\n;; #t\n;; >>> (cycpattern_check \"whassup\" \"psus\")\n;; #f\n;; >>> (cycpattern_check \"abab\" \"baa\")\n;; #t\n;; >>> (cycpattern_check \"efef\" \"eeff\")\n;; #f\n;; >>> (cycpattern_check \"himenss\" \"simen\")\n;; #t\n(define (cycpattern_check a b)\n  (let ((len (string-length b)))\n    (let loop ((i 0))\n      (if (= i len)\n          #f\n          (let ((rotated (substring b i len)))\n            (if (string-contains? a rotated)\n                #t\n                (loop (+ i 1))))))))\n"], ["#lang racket\n;; Given an integer. return a list that has the number of even and odd digits respectively.\n;; Example:\n;;     >>> (even_odd_count -12)\n;;     (list 1 1)\n;;     >>> (even_odd_count 123)\n;;     (list 1 2)\n(define (even_odd_count num)\n  (let loop ((n num) (even 0) (odd 0))\n    (if (= n 0)\n        (list even odd)\n        (let ((digit (remainder n 10)))\n          (if (even? digit)\n              (loop (quotient n 10) (+ even 1) odd)\n              (loop (quotient n 10) even (+ odd 1)))))))\n"], ["#lang racket\n;; Given a positive integer, obtain its roman numeral equivalent as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n;; Examples:\n;; >>> (int_to_mini_roman 19)\n;; \"xix\"\n;; >>> (int_to_mini_roman 152)\n;; \"clii\"\n;; >>> (int_to_mini_roman 426)\n;; \"cdxxvi\"\n(define (int_to_mini_roman number)\n  (define (roman-digit digit place)\n    (cond\n      [(= digit 0) \"\"]\n      [(<= digit 3) (string-repeat (roman-digit-symbol place) digit)]\n      [(= digit 4) (string-append (roman-digit-symbol place) (roman-digit-symbol (+ place 1)))]\n      [(= digit 5) (roman-digit-symbol (+ place 1))]\n      [(<= digit 8) (string-append (roman-digit-symbol (+ place 1)) (roman-digit-symbol place) (roman-digit-symbol place))]\n      [else (string-append (roman-digit-symbol place) (roman-digit-symbol (+ place 2)))]))\n  (define (roman-digit-symbol place)\n    (case place\n      [(0) \"i\"]\n      [(1) \"x\"]\n      [(2) \"c\"]\n      [(3) \"m\"]))\n  (string-downcase\n   (string-append\n    (roman-digit (quotient number 1000) 3)\n    (roman-digit (remainder (quotient number 100) 10) 2)\n    (roman-digit (remainder (quotient number 10) 10) 1)\n    (roman-digit (remainder number 10) 0))))\n"], ["#lang racket\n;; Given the lengths of the three sides of a triangle. Return #t if the three\n;; sides form a right-angled triangle, #f otherwise.\n;; A right-angled triangle is a triangle in which one angle is right angle or \n;; 90 degree.\n;; Example:\n;; >>> (right_angle_triangle 3 4 5)\n;; #t\n;; >>> (right_angle_triangle 1 2 3)\n;; #f\n(define (right_angle_triangle a b c)\n  (or (and (= (+ (* a a) (* b b)) (* c c)) (or (= a b) (= a c) (= b c)))\n       (and (= (+ (* a a) (* c c)) (* b b)) (or (= a b) (= a c) (= b c)))\n       (and (= (+ (* b b) (* c c)) (* a a)) (or (= a b) (= a c) (= b c)))))\n)\n"], ["#lang racket\n;; Write a function that accepts a list of strings.\n;; The list contains different words. Return the word with maximum number\n;; of unique characters. If multiple strings have maximum number of unique\n;; characters, return the one which comes first in lexicographical order.\n;; >>> (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (count-unique-chars word)\n    (length (set->list (string->char-set word))))\n  (define (compare-words word1 word2)\n    (if (> (count-unique-chars word1) (count-unique-chars word2))\n        word1\n        (if (< (count-unique-chars word1) (count-unique-chars word2))\n            word2\n            (if (string<? word1 word2)\n                word1\n                word2))))\n  (foldr compare-words (car words) words))\n"], ["#lang racket\n;; You're a hungry rabbit, and you already have eaten a certain number of carrots,\n;; but now you need to eat more carrots to complete the day's meals.\n;; you should return a list of [ total number of eaten carrots after your meals,\n;;                                 the number of carrots left after your meals ]\n;; if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n;; Example:\n;; >>> (eat 5 6 10)\n;; (list 11 4)\n;; >>> (eat 4 8 9)\n;; (list 12 1)\n;; >>> (eat 1 10 10)\n;; (list 11 0)\n;; >>> (eat 2 11 5)\n;; (list 7 0)\n;; Variables:\n;; @number : integer\n;;     the number of carrots that you have eaten.\n;; @need : integer\n;;     the number of carrots that you need to eat.\n;; @remaining : integer\n;;     the number of remaining carrots thet exist in stock\n;; Constrain:\n;; * 0 <= number <= 1000\n;; * 0 <= need <= 1000\n;; * 0 <= remaining <= 1000\n;; Have fun :)\n(define (eat number need remaining)\n  (let ((eaten (min need remaining)))\n    (list (+ number eaten) (- remaining eaten))))\n"], ["#lang racket\n;;  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;; >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n  (let ((nums (build-list (+ n 1) values)))\n    (string-join (map number->string nums) \" \")))\n"], ["#lang racket\n;; Given two lists operator, and operand. The first list has basic algebra operations, and \n;; the second list is a list of integers. Use the two given lists to build the algebric \n;; expression and return the evaluation of this expression.\n;; The basic algebra operations:\n;; Addition ( + ) \n;; Subtraction ( - ) \n;; Multiplication ( * ) \n;; Floor division ( // ) \n;; Exponentiation ( ** ) \n;; Example:\n;; operator['+', '*', '-']\n;; list = [2, 3, 4, 5]\n;; result = 2 + 3 * 4 - 5\n;; => result = 9\n;; Note:\n;;     The length of operator list is equal to the length of operand list minus one.\n;;     Operand is a list of of non-negative integers.\n;;     Operator list has at least one operator, and operand list has at least two operands.\n(define (do_algebra operator operand)\n  (let* ((op1 (car operand))\n         (op2 (cadr operand))\n         (rest (cddr operand))\n         (result (case operator\n                   ((+) (+ op1 op2))\n                   ((-) (- op1 op2))\n                   ((*) (* op1 op2))\n                   ((//) (quotient op1 op2))\n                   ((**) (expt op1 op2)))))\n    (if (null? rest)\n        result\n        (do_algebra (car rest) (cons result rest)))))\n"], ["#lang racket\n;; You are given a string s.\n;; if s[i] is a letter, reverse its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n;; If the string contains no letters, reverse the string.\n;; The function should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;; \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\n(define (solve s)\n  (if (string-contains? s #px\"[a-zA-Z]\")\n      (string-map (lambda (c)\n                     (if (char-alphabetic? c)\n                         (if (char-upper-case? c)\n                             (char-downcase c)\n                             (char-upcase c))\n                         c))\n                   s)\n      (string-reverse s)))\n"], ["#lang racket\n;; Given a string 'text', return its md5 hash equivalent string.\n;; If 'text' is an empty string, return #f.\n;; >>> (string_to_md5 \"Hello world\")\n;; \"3e25960a79dbc69b674cd4ec67a72c62\"\n(define (string_to_md5 text)\n  (if (string=? text \"\")\n      #f\n      (let ((md5 (md5 text)))\n        (string-downcase (bytes->hex-string md5)))))\n"], ["#lang racket\n;; Given two positive integers a and b, return the even digits between a\n;; and b, in ascending order.\n;; For example:\n;; >>> (generate_integers 2 8)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 8 2)\n;; (list 2 4 6 8)\n;; >>> (generate_integers 10 14)\n;; (list )\n(define (generate_integers a b)\n  (let ((start (if (even? a) a (+ a 1)))\n        (end (if (even? b) b (- b 1))))\n    (if (> start end)\n        '()\n        (cons start (generate_integers (+ start 2) end)))))\n"], ["#lang racket\n;;  Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4\n(define (count_distinct_characters string)\n  (length (set->list (string->char-set (string-downcase string)))))\n"], ["#lang racket\n;;  Input to this function is a string representing musical notes in a special ASCII format.\n;; Your task is to parse this string and return list of integers corresponding to how many beats does each\n;; not last.\n;; Here is a legend:\n;; 'o' - whole note, lasts four beats\n;; 'o|' - half note, lasts two beats\n;; '.|' - quater note, lasts one beat\n;; >>> (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n;; (list 4 2 1 2 2 1 1 1 1 4 4)\n(define (parse_music music_string)\n  (define (parse-note note)\n    (cond\n      [(string=? note \"o\") 4]\n      [(string=? note \"o|\") 2]\n      [(string=? note \".|\") 1]\n      [else (error \"Invalid note: \" note)]))\n  (map parse-note (string-split music_string \" \")))\n"], ["#lang racket\n;;  Find how many times a given substring can be found in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\" \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (let ((len-str (string-length string))\n        (len-sub (string-length substring)))\n    (let loop ((i 0)\n               (count 0))\n      (if (> (+ i len-sub) len-str)\n          count\n          (if (string=? (substring string i (+ i len-sub)) substring)\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n"], ["#lang racket\n;;  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n;; \"one three five\"\n(define (sort_numbers numbers)\n  (let ((numbers-list (string-split numbers)))\n    (string-join (sort numbers-list string<?) \" \")))\n"], ["#lang racket\n;;  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n;; separate those group into separate strings and return the list of those.\n;; Separate groups are balanced (each open brace is properly closed) and not nested within each other\n;; Ignore any spaces in the input string.\n;; >>> (separate_paren_groups \"( ) (( )) (( )( ))\")\n;; (list \"()\" \"(())\" \"(()())\")\n(define (separate_paren_groups paren_string)\n  (let loop ((paren_string paren_string)\n             (result '()))\n    (cond\n      ((string-empty? paren_string) (reverse result))\n      (else\n       (let ((next-paren-group (find-next-paren-group paren_string)))\n         (loop (string-trim (substring paren_string (+ (string-length next-paren-group) 1)))\n               (cons next-paren-group result)))))))\n"], ["#lang racket\n;;  From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)\n(define (find_closest_elements numbers)\n  (let* ((sorted-numbers (sort numbers <))\n         (pairs (map list sorted-numbers (cdr sorted-numbers)))\n         (differences (map (lambda (pair) (- (cadr pair) (car pair))) pairs))\n         (min-difference (apply min differences))\n         (closest-pair (findf (lambda (pair) (= (abs (- (cadr pair) (car pair))) min-difference)) pairs)))\n    (sort closest-pair <)))\n"], ["#lang racket\n;;  Given list of numbers (of at least two elements), apply a linear transform to that list,\n;; such that the smallest number will become 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n  (let* ((min_num (apply min numbers))\n         (max_num (apply max numbers))\n         (range (- max_num min_num)))\n    (map (lambda (num) (/ (- num min_num) range)) numbers)))\n"], ["#lang racket\n;;  Filter given list of any rktthon values only for integers\n;; >>> (filter_integers (list \"a\" 3.14 5))\n;; (list 5)\n;; >>> (filter_integers (list 1 2 3 \"abc\" #hash() (list )))\n;; (list 1 2 3)\n(define (filter_integers values)\n  (filter number? values))\n"], ["#lang racket\n;;  Return length of given string\n;; >>> (strlen \"\")\n;; 0\n;; >>> (strlen \"abc\")\n;; 3\n(define (strlen string)\n  (string-length string))\n"], ["#lang racket\n;;  For a given number n, find the largest number that divides n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5\n(define (largest_divisor n)\n  (let loop ((i (- n 1)))\n    (if (and (> i 1) (not (zero? (modulo n i))))\n        (loop (- i 1))\n        i)))\n"], ["#lang racket\n;;  Return list of prime factors of given integer in the order from smallest to largest.\n;; Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n;; Input number should be equal to the product of all factors\n;; >>> (factorize 8)\n;; (list 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list 2 5 7)\n(define (factorize n)\n  (define (helper n factors)\n    (cond\n      [(= n 1) factors]\n      [(zero? (modulo n 2)) (helper (/ n 2) (cons 2 factors))]\n      [(zero? (modulo n 3)) (helper (/ n 3) (cons 3 factors))]\n      [(zero? (modulo n 5)) (helper (/ n 5) (cons 5 factors))]\n      [(zero? (modulo n 7)) (helper (/ n 7) (cons 7 factors))]\n      [else (helper (/ n (smallest-factor n)) (cons (smallest-factor n) factors))]))\n  (define (smallest-factor n)\n    (cond\n      [(= n 1) 1]\n      [(zero? (modulo n 2)) 2]\n      [(zero? (modulo n 3)) 3]\n      [(zero? (modulo n 5)) 5]\n      [(zero? (modulo n 7)) 7]\n      [else (smallest-factor (+ n 1))]))\n  (helper n '()))\n"], ["#lang racket\n;;  From a list of integers, remove all elements that occur more than once.\n;; Keep order of elements left the same as in the input.\n;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates numbers)\n  (let loop ((numbers numbers) (seen '()) (result '()))\n    (if (null? numbers)\n        (reverse result)\n        (let ((number (car numbers)))\n          (if (member number seen)\n              (loop (cdr numbers) seen result)\n              (loop (cdr numbers) (cons number seen) (cons number result)))))))\n"], ["#lang racket\n;;  For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n;; >>> (flip_case \"Hello\")\n;; \"hELLO\"\n(define (flip_case string)\n  (list->string\n   (map (lambda (char)\n          (if (char-lower-case? char)\n              (char-upcase char)\n              (char-downcase char)))\n        (string->list string))))\n"], ["#lang racket\n;;  Concatenate list of strings into a single string\n;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n"], ["#lang racket\n;;  Filter an input list of strings only for ones that start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix? prefix s)) strings))\n"], ["#lang racket\n;;  Given a positive floating point number, it can be decomposed into\n;; and integer part (largest integer smaller than given number) and decimals\n;; (leftover part always smaller than 1).\n;; Return the decimal part of the number.\n;; >>> (truncate_number 3.5)\n;; 0.5\n(define (truncate_number number)\n  (- number (floor number)))\n"], ["#lang racket\n;; Return only positive numbers in the list.\n;; >>> (get_positive (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter positive? l))\n"], ["#lang racket\n;; Return true if a given number is prime, and false otherwise.\n;; >>> (is_prime 6)\n;; #f\n;; >>> (is_prime 101)\n;; #t\n;; >>> (is_prime 11)\n;; #t\n;; >>> (is_prime 13441)\n;; #t\n;; >>> (is_prime 61)\n;; #t\n;; >>> (is_prime 4)\n;; #f\n;; >>> (is_prime 1)\n;; #f\n(define (is_prime n)\n  (define (helper i)\n    (cond\n      [(> (* i i) n) #t]\n      [(zero? (modulo n i)) #f]\n      [else (helper (+ i 1))]))\n  (cond\n    [(< n 2) #f]\n    [else (helper 2)]))\n"], ["#lang racket\n;; This function takes a list l and returns a list l' such that\n;; l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n;; to the values of the corresponding indicies of l, but sorted.\n;; >>> (sort_third (list 1 2 3))\n;; (list 1 2 3)\n;; >>> (sort_third (list 5 6 3 4 8 9 2))\n;; (list 2 6 3 4 8 9 5)\n(define (sort_third l)\n  (let* ((divisible-by-three (filter (lambda (x) (zero? (modulo x 3))) l))\n         (sorted-divisible-by-three (sort divisible-by-three <))\n         (result (map (lambda (x) (if (zero? (modulo x 3)) (car sorted-divisible-by-three) x)) l)))\n    result))\n"], ["#lang racket\n;; Return sorted unique elements in a list\n;; >>> (unique (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n  (sort (remove-duplicates l) <))\n"], ["#lang racket\n;; Return maximum element in the list.\n;; >>> (max_element (list 1 2 3))\n;; 3\n;; >>> (max_element (list 5 3 -5 2 -3 3 9 0 123 1 -10))\n;; 123\n(define (max_element l)\n  (apply max l))\n"], ["#lang racket\n;; Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n;; >>> (fizz_buzz 50)\n;; 0\n;; >>> (fizz_buzz 78)\n;; 2\n;; >>> (fizz_buzz 79)\n;; 3\n(define (fizz_buzz n)\n  (let loop ((i 1) (count 0))\n    (if (>= i n)\n        count\n        (if (or (and (< i 11) (= (remainder i 11) 0))\n                (and (>= i 11) (= (remainder i 11) 0) (= (remainder i 13) 0)))\n            (loop (+ i 1) (+ count (count-digit 7 i)))\n            (loop (+ i 1) count)))))\n"], ["#lang racket\n;; This function takes a list l and returns a list l' such that\n;; l' is identical to l in the odd indicies, while its values at the even indicies are equal\n;; to the values of the even indicies of l, but sorted.\n;; >>> (sort_even (list 1 2 3))\n;; (list 1 2 3)\n;; >>> (sort_even (list 5 6 3 4))\n;; (list 3 6 5 4)\n(define (sort_even l)\n  (let* ((even-values (filter even? l))\n         (sorted-values (sort even-values <))\n         (result (make-list (length l) #f)))\n    (for ([i (in-range 0 (length l) 2)])\n      (set! (list-ref result i) (list-ref l i)))\n    (for ([i (in-range 1 (length l) 2)])\n      (set! (list-ref result i) (list-ref sorted-values (quotient i 2))))\n    result))\n"], ["#lang racket\n;; prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n;; >>> (prime_fib 1)\n;; 2\n;; >>> (prime_fib 2)\n;; 3\n;; >>> (prime_fib 3)\n;; 5\n;; >>> (prime_fib 4)\n;; 13\n;; >>> (prime_fib 5)\n;; 89\n(define (prime_fib n)\n  (define (fib n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          (else (+ (fib (- n 1)) (fib (- n 2))))))\n  (define (prime? n)\n    (define (helper i)\n      (cond ((> (* i i) n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (helper (+ i 1)))))\n    (helper 2))\n  (define (prime_fib_helper count n)\n    (if (= count n)\n        (fib count)\n        (if (and (prime? (fib count)) (= (fib count) (fib (+ count 1))))\n            (prime_fib_helper (+ count 1) n)\n            (prime_fib_helper (+ count 1) n))))\n  (prime_fib_helper 0 n))\n"], ["#lang racket\n;;  You're given a list of deposit and withdrawal operations on a bank account that starts with\n;; zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n;; at that point function should return #t. Otherwise it should return #f.\n;; >>> (below_zero (list 1 2 3))\n;; #f\n;; >>> (below_zero (list 1 2 -4 5))\n;; #t\n(define (below_zero operations)\n  (let loop ((balance 0) (ops operations))\n    (cond\n      ((null? ops) #f)\n      ((< (+ balance (car ops)) 0) #t)\n      (else (loop (+ balance (car ops)) (cdr ops))))))\n"], ["#lang racket\n;; triples_sum_to_zero takes a list of integers as an input.\n;; it returns #t if there are three distinct elements in the list that\n;; sum to zero, and #f otherwise.\n;; >>> (triples_sum_to_zero (list 1 3 5 0))\n;; #f\n;; >>> (triples_sum_to_zero (list 1 3 -2 1))\n;; #t\n;; >>> (triples_sum_to_zero (list 1 2 3 7))\n;; #f\n;; >>> (triples_sum_to_zero (list 2 4 -5 3 9 7))\n;; #t\n;; >>> (triples_sum_to_zero (list 1))\n;; #f\n(define (triples_sum_to_zero l)\n  (let loop ((i 0) (j 1) (k 2))\n    (cond\n      ((= i (- (length l) 2)) #f)\n      ((= j (- (length l) 1)) (loop (+ i 1) (+ i 2) (+ i 3)))\n      ((= k (length l)) (loop i (+ j 1) (+ j 2)))\n      ((= (+ (list-ref l i) (list-ref l j) (list-ref l k)) 0) #t)\n      (else (loop i j (+ k 1))))))\n"], ["#lang racket\n;; Imagine a road that's a perfectly straight infinitely long line.\n;; n cars are driving left to right;  simultaneously, a different set of n cars\n;; are driving right to left.   The two sets of cars start out being very far from\n;; each other.  All cars move in the same speed.  Two cars are said to collide\n;; when a car that's moving left to right hits a car that's moving right to left.\n;; However, the cars are infinitely sturdy and strong; as a result, they continue moving\n;; in their trajectory as if they did not collide.\n;; This function outputs the number of such collisions.\n(define (car_race_collision n)\n  (* n 2))\n"], ["#lang racket\n;; Return list with elements incremented by 1.\n;; >>> (incr_list (list 1 2 3))\n;; (list 2 3 4)\n;; >>> (incr_list (list 5 3 5 2 3 3 9 0 123))\n;; (list 6 4 6 3 4 4 10 1 124)\n(define (incr_list l)\n  (map add1 l))\n"], ["#lang racket\n;; pairs_sum_to_zero takes a list of integers as an input.\n;; it returns #t if there are two distinct elements in the list that\n;; sum to zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;; >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (let loop ((lst l))\n    (cond\n      ((null? lst) #f)\n      ((member? (- (car lst)) (cdr lst)) #t)\n      (else (loop (cdr lst))))))\n"], ["#lang racket\n;; Change numerical base of input number x to base.\n;; return string representation after the conversion.\n;; base numbers are less than 10.\n;; >>> (change_base 8 3)\n;; \"22\"\n;; >>> (change_base 8 2)\n;; \"1000\"\n;; >>> (change_base 7 2)\n;; \"111\"\n(define (change_base x base)\n  (number->string x base))\n"], ["#lang racket\n;; Given length of a side and high return area for a triangle.\n;; >>> (triangle_area 5 3)\n;; 7.5\n(define (triangle_area a h)\n  (* 0.5 a h))\n"], ["#lang racket\n;; The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n  (let loop ((a 0) (b 0) (c 2) (d 0) (count n))\n    (if (= count 0)\n        a\n        (loop b c d (+ a b c d) (- count 1)))))\n"], ["#lang racket\n;; Return median of elements in the list l.\n;; >>> (median (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n(define (median l)\n  (let* ((sorted-l (sort l <))\n         (n (length sorted-l))\n         (mid-index (/ n 2)))\n    (if (odd? n)\n        (list-ref sorted-l (floor mid-index))\n        (/ (+ (list-ref sorted-l (floor mid-index))\n              (list-ref sorted-l (ceiling mid-index)))\n           2))))\n"], ["#lang racket\n;; Checks if given string is a palindrome\n;; >>> (is_palindrome \"\")\n;; #t\n;; >>> (is_palindrome \"aba\")\n;; #t\n;; >>> (is_palindrome \"aaaaa\")\n;; #t\n;; >>> (is_palindrome \"zbcd\")\n;; #f\n(define (is_palindrome text)\n  (equal? text (string-reverse text)))\n"], ["#lang racket\n;; Return 2^n modulo p (be aware of numerics).\n;; >>> (modp 3 5)\n;; 3\n;; >>> (modp 1101 101)\n;; 2\n;; >>> (modp 0 101)\n;; 1\n;; >>> (modp 3 11)\n;; 8\n;; >>> (modp 100 101)\n;; 1\n(define (modp n p)\n  (modulo (expt 2 n) p))\n"], ["#lang racket\n;;  For a given list of input numbers, calculate Mean Absolute Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is the average absolute difference between each\n;; element and a centerpoint (mean in this case):\n;; MAD = average | x - x_mean |\n;; >>> (mean_absolute_deviation (list 1.0 2.0 3.0 4.0))\n;; 1.0\n(define (mean_absolute_deviation numbers)\n  (let* ((n (length numbers))\n         (mean (/ (apply + numbers) n))\n         (deviations (map (lambda (x) (abs (- x mean))) numbers))\n         (sum_deviations (apply + deviations)))\n    (/ sum_deviations n)))\n"], ["#lang racket\n;; remove_vowels is a function that takes string and returns string without vowels.\n;; >>> (remove_vowels \"\")\n;; \"\"\n;; >>> (remove_vowels \"abcdef\")\n;; \"bcdf\"\n;; >>> (remove_vowels \"aaaaa\")\n;; \"\"\n;; >>> (remove_vowels \"aaBAA\")\n;; \"B\"\n;; >>> (remove_vowels \"zbcd\")\n;; \"zbcd\"\n(define (remove_vowels text)\n  (list->string (filter (lambda (c) (not (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))) (string->list text))))\n"], ["#lang racket\n;; Return #t if all numbers in the list l are below threshold t.\n;; >>> (below_threshold (list 1 2 4 10) 100)\n;; #t\n;; >>> (below_threshold (list 1 20 4 10) 5)\n;; #f\n(define (below_threshold l t)\n  (cond\n    [(null? l) #t]\n    [(> (car l) t) #f]\n    [else (below_threshold (cdr l) t)]))\n"], ["#lang racket\n;; Add two numbers x and y\n;; >>> (add 2 3)\n;; 5\n;; >>> (add 5 7)\n;; 12\n(define (add x y)\n  (+ x y))\n"], ["#lang racket\n;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f\n(define (same_chars s0 s1)\n  (equal? (sort (string->list s0) char<?)\n          (sort (string->list s1) char<?)))\n"], ["#lang racket\n;; Return n-th Fibonacci number.\n;; >>> (fib 10)\n;; 55\n;; >>> (fib 1)\n;; 1\n;; >>> (fib 8)\n;; 21\n(define (fib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [else (+ (fib (- n 1)) (fib (- n 2)))]))\n"], ["#lang racket\n;;  brackets is a string of \"<\" and \">\".\n;; return #t if every opening bracket has a corresponding closing bracket.\n;; >>> (correct_bracketing \"<\")\n;; #f\n;; >>> (correct_bracketing \"<>\")\n;; #t\n;; >>> (correct_bracketing \"<<><>>\")\n;; #t\n;; >>> (correct_bracketing \"><<>\")\n;; #f\n(define (correct_bracketing brackets)\n  (let loop ((stack '()) (brackets (string->list brackets)))\n    (cond\n      ((null? brackets) (null? stack))\n      ((char=? (car brackets) #\\<) (loop (cons #\\< stack) (cdr brackets)))\n      ((char=? (car brackets) #\\>)\n       (if (null? stack)\n           #f\n           (loop (cdr stack) (cdr brackets))))\n      (else (loop stack (cdr brackets))))))\n"], ["#lang racket\n;; Return #t is list elements are monotonically increasing or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t\n(define (monotonic l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n"], ["#lang racket\n;; Return sorted unique common elements for two lists.\n;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common l1 l2)\n  (sort (remove-duplicates (filter (lambda (x) (member x l2)) l1)) <))\n"], ["#lang racket\n;; Return the largest prime factor of n. Assume n > 1 and is not a prime.\n;; >>> (largest_prime_factor 13195)\n;; 29\n;; >>> (largest_prime_factor 2048)\n;; 2\n(define (largest_prime_factor n)\n  (let loop ((i 2) (largest 1))\n    (cond\n      ((> i n) largest)\n      ((and (= (modulo n i) 0) (prime? i)) (loop (+ i 1) i))\n      (else (loop (+ i 1) largest)))))\n"], ["#lang racket\n;;  Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse numbers delimeter)\n  (cond\n    [(empty? numbers) '()]\n    [(empty? (rest numbers)) (list (first numbers))]\n    [else (append (list (first numbers) delimeter) (intersperse (rest numbers) delimeter))]))\n"], ["#lang racket\n;; sum_to_n is a function that sums numbers from 1 to n.\n;; >>> (sum_to_n 30)\n;; 465\n;; >>> (sum_to_n 100)\n;; 5050\n;; >>> (sum_to_n 5)\n;; 15\n;; >>> (sum_to_n 10)\n;; 55\n;; >>> (sum_to_n 1)\n;; 1\n(define (sum_to_n n)\n  (/ (* n (+ n 1)) 2))\n"], ["#lang racket\n;;  brackets is a string of \"(\" and \")\".\n;; return #t if every opening bracket has a corresponding closing bracket.\n;; >>> (correct_bracketing \"(\")\n;; #f\n;; >>> (correct_bracketing \"()\")\n;; #t\n;; >>> (correct_bracketing \"(()())\")\n;; #t\n;; >>> (correct_bracketing \")(()\")\n;; #f\n(define (correct_bracketing brackets)\n  (let loop ([stack '()] [brackets (string->list brackets)])\n    (cond\n      [(null? brackets) (null? stack)]\n      [(char=? (car brackets) #\\() (loop (cons #\\( stack) (cdr brackets))]\n      [(char=? (car brackets) #\\)) (if (null? stack) #f (loop (cdr stack) (cdr brackets)))])))\n"], ["#lang racket\n;;  xs represent coefficients of a polynomial.\n;; xs[0] + xs[1] * x + xs[2] * x^2 + ....\n;;  Return derivative of this polynomial in the same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>> (derivative (list 1 2 3))\n;; (list 2 6)\n(define (derivative xs)\n  (for/list ([i (in-range 1 (length xs))])\n    (* (list-ref xs (- i 1)) i)))\n"], ["#lang racket\n;; The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1) == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n;; Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n;; >>> (fibfib 1)\n;; 0\n;; >>> (fibfib 5)\n;; 4\n;; >>> (fibfib 8)\n;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n"], ["#lang racket\n;; Write a function vowels_count which takes a string representing\n;; a word as input and returns the number of vowels in the string.\n;; Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n;; vowel, but only when it is at the end of the given word.\n;; Example:\n;; >>> (vowels_count \"abcde\")\n;; 2\n;; >>> (vowels_count \"ACEDY\")\n;; 3\n(define (vowels_count s)\n  (let ((vowels '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n    (count (lambda (c) (member c vowels)) (string->list s))))\n"], ["#lang racket\n;; Circular shift the digits of the integer x, shift the digits right by shift\n;; and return the result as a string.\n;; If shift > number of digits, return digits reversed.\n;; >>> (circular_shift 12 1)\n;; \"21\"\n;; >>> (circular_shift 12 2)\n;; \"12\"\n(define (circular_shift x shift)\n  (let* ((digits (string->list (number->string x)))\n         (n (length digits)))\n    (if (> shift n)\n        (list->string (reverse digits))\n        (list->string (append (drop-right digits shift) (take-right digits shift))))))\n"], ["#lang racket\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let loop ((i 0) (sum 0))\n    (if (= i (string-length s))\n        sum\n        (if (char-upper-case? (string-ref s i))\n            (loop (+ i 1) (+ sum (char->integer (string-ref s i))))\n            (loop (+ i 1) sum)))))\n"], ["#lang racket\n;; In this task, you will be given a string that represents a number of apples and oranges \n;; that are distributed in a basket of fruit this basket contains \n;; apples, oranges, and mango fruits. Given the string that represents the total number of \n;; the oranges and apples and an integer that represent the total number of the fruits \n;; in the basket return the number of the mango fruits in the basket.\n;; for examble:\n;; >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n;; 8\n;; >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n;; 2\n;; >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n;; 95\n;; >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n;; 19\n(define (fruit_distribution s n)\n  (let* ((apples (string->number (regexp-match #px\"[0-9]+\" (regexp-match #px\"[0-9]+ apples\" s))))\n         (oranges (string->number (regexp-match #px\"[0-9]+\" (regexp-match #px\"[0-9]+ oranges\" s))))\n         (total-fruits (+ apples oranges)))\n    (- n total-fruits)))\n"], ["#lang racket\n;; \"Given a list representing a branch of a tree that has non-negative integer nodes\n;; your task is to pluck one of the nodes and return it.\n;; The plucked node should be the node with the smallest even value.\n;; If multiple nodes with the same smallest even value are found return the node that has smallest index.\n;; The plucked node should be returned in a list, [ smalest_value, its index ],\n;; If there are no even values or the given list is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>> (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;;              so we will choose the first zero, which has the smallest index.\n;; Constraints:\n;;     * 1 <= nodes.length <= 10000\n;;     * 0 <= node.value\n(define (pluck arr)\n  (let ((even-nodes (filter even? arr)))\n    (if (empty? even-nodes)\n        '()\n        (let ((min-even (apply min even-nodes)))\n          (list min-even (index-of min-even arr))))))\n"], ["#lang racket\n;; You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n;; zero, and has a frequency greater than or equal to the value of the integer itself. \n;; The frequency of an integer is the number of times it appears in the list.\n;; If no such a value exist, return -1.\n;; Examples:\n;; >>> (search (list 4 1 2 2 3 1))\n;; 2\n;; >>> (search (list 1 2 2 3 3 3 4 4 4))\n;; 3\n;; >>> (search (list 5 5 4 4 4))\n;; -1\n(define (search lst)\n  (let ((freqs (make-hash)))\n    (for ([x lst])\n      (hash-set! freqs x (add1 (hash-ref freqs x 0))))\n    (for/or ([x (in-range (apply max lst) 0 -1)])\n      (when (>= (hash-ref freqs x 0) x)\n        (return x)))\n    -1))\n"], ["#lang racket\n;;  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n;; For each of the group, output the deepest level of nesting of parentheses.\n;; E.g. (()()) has maximum two levels of nesting while ((())) has three.\n;; >>> (parse_nested_parens \"(()()) ((())) () ((())()())\")\n;; (list 2 3 1 3)\n(define (parse_nested_parens paren_string)\n  (define (parse_group group)\n    (define (parse_group_helper group level max_level)\n      (cond\n        ((empty? group) max_level)\n        ((char=? (first group) #\\() (parse_group_helper (rest group) (+ level 1) (max level max_level)))\n        ((char=? (first group) #\\)) (parse_group_helper (rest group) (- level 1) (max level max_level)))\n        (else (parse_group_helper (rest group) level max_level))))\n    (parse_group_helper group 0 0))\n  (map parse_group (string-split paren_string)))\n"], ["#lang racket\n;; Given list of integers, return list in strange order.\n;; Strange sorting, is when you start with the minimum value,\n;; then maximum of the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list lst)\n  (if (null? lst)\n      '()\n      (let ((min-val (apply min lst))\n            (max-val (apply max lst)))\n        (if (= min-val max-val)\n            (list min-val)\n            (let ((remaining-lst (remove min-val (remove max-val lst))))\n              (cons min-val (cons max-val (strange_sort_list remaining-lst))))))))\n"], ["#lang racket\n;; Given the lengths of the three sides of a triangle. Return the area of\n;; the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n;; Otherwise return -1\n;; Three sides make a valid triangle when the sum of any two sides is greater \n;; than the third side.\n;; Example:\n;; >>> (triangle_area 3 4 5)\n;; 6.0\n;; >>> (triangle_area 1 2 10)\n;; -1\n(define (triangle_area a b c)\n  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round (/ (sqrt (* (- (* a a) (* b b)) (* (- a a) (* c c)))) 4) 100)\n      -1))\n"], ["#lang racket\n;; Write a function that returns #t if the object q will fly, and #f otherwise.\n;; The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n;; Example:\n;; >>> (will_it_fly (list 1 2) 5)\n;; #f\n;; # 1+2 is less than the maximum possible weight, but it's unbalanced.\n;; >>> (will_it_fly (list 3 2 3) 1)\n;; #f\n;; # it's balanced, but 3+2+3 is more than the maximum possible weight.\n;; >>> (will_it_fly (list 3 2 3) 9)\n;; #t\n;; # 3+2+3 is less than the maximum possible weight, and it's balanced.\n;; >>> (will_it_fly (list 3) 5)\n;; #t\n;; # 3 is less than the maximum possible weight, and it's balanced.\n(define (will_it_fly q w)\n  (let ((sum (apply + q)))\n    (and (<= sum w) (equal? q (reverse q)))))\n"], ["#lang racket\n;; Given a list arr of integers, find the minimum number of elements that\n;; need to be changed to make the list palindromic. A palindromic list is a list that\n;; is read the same backwards and forwards. In one change, you can change one element to any other element.\n;; For example:\n;; >>> (smallest_change (list 1 2 3 5 4 7 9 6))\n;; 4\n;; >>> (smallest_change (list 1 2 3 4 3 2 2))\n;; 1\n;; >>> (smallest_change (list 1 2 3 2 1))\n;; 0\n(define (smallest_change arr)\n  (let loop ((i 0) (j (- (length arr) 1)) (count 0))\n    (cond\n      ((>= i j) count)\n      ((= (list-ref arr i) (list-ref arr j)) (loop (+ i 1) (- j 1) count))\n      (else (loop (+ i 1) (- j 1) (+ count 1))))))\n"], ["#lang racket\n;; Write a function that accepts two lists of strings and returns the list that has \n;; total number of chars in the all strings of the list less than the other list.\n;; if the two lists have the same number of chars, return the first list.\n;; Examples\n;; >>> (total_match (list ) (list ))\n;; (list )\n;; >>> (total_match (list \"hi\" \"admin\") (list \"hI\" \"Hi\"))\n;; (list \"hI\" \"Hi\")\n;; >>> (total_match (list \"hi\" \"admin\") (list \"hi\" \"hi\" \"admin\" \"project\"))\n;; (list \"hi\" \"admin\")\n;; >>> (total_match (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\"))\n;; (list \"hI\" \"hi\" \"hi\")\n;; >>> (total_match (list \"4\") (list \"1\" \"2\" \"3\" \"4\" \"5\"))\n;; (list \"4\")\n(define (total_match lst1 lst2)\n  (let ((total1 (apply + (map string-length lst1)))\n        (total2 (apply + (map string-length lst2))))\n    (if (< total1 total2)\n        lst1\n        lst2)))\n"], ["#lang racket\n;; Write a function that returns true if the given number is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n;; 30 = 2 * 3 * 5\n(define (is_multiply_prime a)\n  (define (prime? n)\n    (define (helper i)\n      (cond ((> (* i i) n) #t)\n            ((zero? (modulo n i)) #f)\n            (else (helper (+ i 1)))))\n    (helper 2))\n  (define (multiply-primes n)\n    (define (helper i)\n      (cond ((> i n) #f)\n            ((and (prime? i) (multiply-primes (/ n i))) #t)\n            (else (helper (+ i 1)))))\n    (cond ((= n 1) #t)\n          ((prime? n) #t)\n          (else (helper 2))))\n  (and (< a 100) (multiply-primes a)))\n"], ["#lang racket\n;; Your task is to write a function that returns true if a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; #t\n;; >>> (is_simple_power 2 2)\n;; #t\n;; >>> (is_simple_power 8 2)\n;; #t\n;; >>> (is_simple_power 3 2)\n;; #f\n;; >>> (is_simple_power 3 1)\n;; #f\n;; >>> (is_simple_power 5 3)\n;; #f\n(define (is_simple_power x n)\n  (let loop ((i 0))\n    (cond\n      ((= (expt n i) x) #t)\n      ((> (expt n i) x) #f)\n      (else (loop (+ i 1))))))\n"], ["#lang racket\n;; Write a function that takes an integer a and returns #t \n;; if this ingeger is a cube of some integer number.\n;; Note: you may assume the input is always valid.\n;; Examples:\n;; >>> (iscube 1)\n;; #t\n;; >>> (iscube 2)\n;; #f\n;; >>> (iscube -1)\n;; #t\n;; >>> (iscube 64)\n;; #t\n;; >>> (iscube 0)\n;; #t\n;; >>> (iscube 180)\n;; #f\n(define (iscube a)\n  (let ((cube-root (expt a (/ 1 3))))\n    (= a (* cube-root cube-root cube-root))))\n"], ["#lang racket\n;; You have been tasked to write a function that receives \n;; a hexadecimal number as a string and counts the number of hexadecimal \n;; digits that are primes (prime number, or a prime, is a natural number \n;; greater than 1 that is not a product of two smaller natural numbers).\n;; Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n;; Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n;; So you have to determine a number of the following digits: 2, 3, 5, 7, \n;; B (=decimal 11), D (=decimal 13).\n;; Note: you may assume the input is always correct or empty string, \n;; and symbols A,B,C,D,E,F are always uppercase.\n;; Examples:\n;; >>> (hex_key \"AB\")\n;; 1\n;; >>> (hex_key \"1077E\")\n;; 2\n;; >>> (hex_key \"ABED1A33\")\n;; 4\n;; >>> (hex_key \"123456789ABCDEF0\")\n;; 6\n;; >>> (hex_key \"2020\")\n;; 2\n(define (hex_key num)\n  (let ((primes '(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997))\n    (count (lambda (x) (member x primes)) (map string->number (map string (string->list num))))))\n"], ["#lang racket\n;; You will be given a number in decimal form and your task is to convert it to\n;; binary format. The function should return a string, with each character representing a binary\n;; number. Each character in the string will be '0' or '1'.\n;; There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n;; The extra characters are there to help with the format.\n;; Examples:\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n(define (decimal_to_binary decimal)\n  (string-append \"db\" (number->string decimal 2) \"db\"))\n"], ["#lang racket\n;;  Filter an input list of strings only for ones that contain given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>> (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list \"abc\" \"bacd\" \"array\")\n(define (filter_by_substring strings substring)\n  (filter (lambda (s) (string-contains? s substring)) strings))\n"], ["#lang racket\n;; You are given a string s.\n;; Your task is to check if the string is haprkt or not.\n;; A string is haprkt if its length is at least 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy \"a\")\n;; #f\n;; >>> (is_happy \"aa\")\n;; #f\n;; >>> (is_happy \"abcd\")\n;; #t\n;; >>> (is_happy \"aabb\")\n;; #f\n;; >>> (is_happy \"adb\")\n;; #t\n;; >>> (is_happy \"xyy\")\n;; #f\n(define (is_happy s)\n  (and (>= (string-length s) 3)\n       (for/and ([i (in-range (- (string-length s) 2))])\n         (not (equal? (string-ref s i) (string-ref s (+ i 1)) (string-ref s (+ i 2)))))))\n"], ["#lang racket\n;; It is the last week of the semester and the teacher has to give the grades\n;; to students. The teacher has been making her own algorithm for grading.\n;; The only problem is, she has lost the code she used for grading.\n;; She has given you a list of GPAs for some students and you have to write \n;; a function that can output a list of letter grades using the following table:\n;;          GPA       |    Letter grade\n;;           4.0                A+\n;;         > 3.7                A \n;;         > 3.3                A- \n;;         > 3.0                B+\n;;         > 2.7                B \n;;         > 2.3                B-\n;;         > 2.0                C+\n;;         > 1.7                C\n;;         > 1.3                C-\n;;         > 1.0                D+ \n;;         > 0.7                D \n;;         > 0.0                D-\n;;           0.0                E\n;; Example:\n;; >>> (grade_equation (list 4.0 3 1.7 2 3.5))\n;; (list \"A+\" \"B\" \"C-\" \"C\" \"A-\")\n(define (numerical_letter_grade grades)\n  (map (lambda (gpa)\n         (cond\n           [(>= gpa 4.0) \"A+\"]\n           [(>= gpa 3.7) \"A\"]\n           [(>= gpa 3.3) \"A-\"]\n           [(>= gpa 3.0) \"B+\"]\n           [(>= gpa 2.7) \"B\"]\n           [(>= gpa 2.3) \"B-\"]\n           [(>= gpa 2.0) \"C+\"]\n           [(>= gpa 1.7) \"C\"]\n           [(>= gpa 1.3) \"C-\"]\n           [(>= gpa 1.0) \"D+\"]\n           [(>= gpa 0.7) \"D\"]\n           [(>= gpa 0.0) \"D-\"]\n           [else \"E\"]))\n       grades))\n"], ["#lang racket\n;; Write a function that takes a string and returns #t if the string\n;; length is a prime number or #f otherwise\n;; Examples\n;; >>> (prime_length \"Hello\")\n;; #t\n;; >>> (prime_length \"abcdcba\")\n;; #t\n;; >>> (prime_length \"kittens\")\n;; #t\n;; >>> (prime_length \"orange\")\n;; #f\n(define (prime_length string)\n  (define (prime? n)\n    (define (helper i)\n      (cond\n        [(> (* i i) n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (helper (+ i 1))]))\n    (if (< n 2)\n        #f\n        (helper 2)))\n  (prime? (string-length string)))\n"], ["#lang racket\n;; Given a positive integer n, return the count of the numbers of n-digit\n;; positive integers that start or end with 1.\n(define (starts_one_ends n)\n  (if (= n 1)\n      2\n      (+ (expt 2 (- n 2)) 2)))\n"], ["#lang racket\n;; Given a positive integer N, return the total sum of its digits in binary.\n;; Example\n;; >>> (solve 1000)\n;; \"1\"\n;; >>> (solve 150)\n;; \"110\"\n;; >>> (solve 147)\n;; \"1100\"\n;; Variables:\n;;     @N integer\n;;          Constraints: 0 \u2264 N \u2264 10000.\n;; Output:\n;;      a string of binary number\n(define (solve N)\n  (number->string (string->number (number->string (sum-digits N) 2))))\n"], ["#lang racket\n;; Given a non-empty list of integers lst. add the even elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n;; 2\n(define (add lst)\n  (let loop ((lst lst) (index 0) (sum 0))\n    (cond\n      [(null? lst) sum]\n      [(odd? index) (loop (cdr lst) (+ index 1) (+ sum (car lst)))]\n      [else (loop (cdr lst) (+ index 1) sum)])))\n"], ["#lang racket\n;; Write a function that takes a string and returns an ordered version of it.\n;; Ordered version of string, is a string where all words (separated by space)\n;; are replaced by a new word where all the characters arranged in\n;; ascending order based on ascii value.\n;; Note: You should keep the order of words and blank spaces in the sentence.\n;; For example:\n;; >>> (anti_shuffle \"Hi\")\n;; \"Hi\"\n;; >>> (anti_shuffle \"hello\")\n;; \"ehllo\"\n;; >>> (anti_shuffle \"Hello World!!!\")\n;; \"Hello !!!Wdlor\"\n(define (anti_shuffle s)\n  (string-join\n   (map (lambda (word)\n          (list->string (sort (string->list word) char<?)))\n        (string-split s))\n   \" \"))\n"], ["#lang racket\n;; You are given a 2 dimensional data, as a nested lists,\n;; which is similar to matrix, however, unlike matrices,\n;; each row may contain a different number of columns.\n;; Given lst, and integer x, find integers x in the list,\n;; and return list of lists, [(x1, y1), (x2, y2) ...] such that\n;; each list is a coordinate - (row, columns), starting with 0.\n;; Sort coordinates initially by rows in ascending order.\n;; Also, sort coordinates of the row by columns in descending order.\n;; Examples:\n;; >>> (get_row (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1)\n;; (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0))\n;; >>> (get_row (list ) 1)\n;; (list )\n;; >>> (get_row (list (list ) (list 1) (list 1 2 3)) 3)\n;; (list (list 2 2))\n(define (get_row lst x)\n  (let loop ((lst lst) (row 0) (result '()))\n    (if (null? lst)\n        (sort result (lambda (a b)\n                       (or (< (car a) (car b))\n                           (and (= (car a) (car b))\n                                (> (cadr a) (cadr b))))))\n        (let ((col (member x (car lst))))\n          (if col\n              (loop (cdr lst) (+ row 1) (cons (list row (- (length (car lst)) (length col))) result))\n              (loop (cdr lst) (+ row 1) result))))))\n"], ["#lang racket\n;; Given a list of non-negative integers, return a corkt of the given list after sorting,\n;; you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n;; or sort it in descending order if the sum( first index value, last index value) is even.\n;; Note:\n;; * don't change the given list.\n;; Examples:\n;; >>> (sort_array (list ))\n;; (list )\n;; >>> (sort_array (list 5))\n;; (list 5)\n;; >>> (sort_array (list 2 4 3 0 1 5))\n;; (list 0 1 2 3 4 5)\n;; >>> (sort_array (list 2 4 3 0 1 5 6))\n;; (list 6 5 4 3 2 1 0)\n(define (sort_array array)\n  (let ((sum (+ (car array) (last array))))\n    (if (odd? sum)\n        (sort array <)\n        (sort array >))))\n"], ["#lang racket\n;; Create a function encrypt that takes a string as an argument and\n;; returns a string encrypted with the alphabet being rotated. \n;; The alphabet should be rotated in a manner such that the letters \n;; shift down by two multiplied to two places.\n;; For example:\n;; >>> (encrypt \"hi\")\n;; \"lm\"\n;; >>> (encrypt \"asdfghjkl\")\n;; \"ewhjklnop\"\n;; >>> (encrypt \"gf\")\n;; \"kj\"\n;; >>> (encrypt \"et\")\n;; \"ix\"\n(define (encrypt s)\n  (define alphabet \"abcdefghijklmnopqrstuvwxyz\")\n  (define rotated-alphabet (substring alphabet 2 (string-length alphabet)))\n  (define (rotate-char c)\n    (let ((index (string-index alphabet c)))\n      (if index\n          (string-ref rotated-alphabet index)\n          c)))\n  (string-map rotate-char s))\n"], ["#lang racket\n;;  For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n;; Empty sum should be equal to 0 and empty product should be equal to 1.\n;; >>> (sum_product (list ))\n;; (list 0 1)\n;; >>> (sum_product (list 1 2 3 4))\n;; (list 10 24)\n(define (sum_product numbers)\n  (if (empty? numbers)\n      (list 0 1)\n      (list (apply + numbers) (apply * numbers))))\n"], ["#lang racket\n;; You are given a list of integers.\n;; Write a function next_smallest() that returns the 2nd smallest element of the list.\n;; Return #f if there is no such element.\n;; >>> (next_smallest (list 1 2 3 4 5))\n;; 2\n;; >>> (next_smallest (list 5 1 4 3 2))\n;; 2\n;; >>> (next_smallest (list ))\n;; #f\n;; >>> (next_smallest (list 1 1))\n;; #f\n(define (next_smallest lst)\n  (define (helper lst smallest second_smallest)\n    (cond\n      ((null? lst) (if (= smallest second_smallest) #f second_smallest))\n      ((< (car lst) smallest) (helper (cdr lst) (car lst) smallest))\n      ((< (car lst) second_smallest) (helper (cdr lst) smallest (car lst)))\n      (else (helper (cdr lst) smallest second_smallest))))\n  (helper lst (car lst) (car lst)))\n"], ["#lang racket\n;; You'll be given a string of words, and your task is to count the number\n;; of boredoms. A boredom is a sentence that starts with the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n;; >>> (is_bored \"Hello world\")\n;; 0\n;; >>> (is_bored \"The sky is blue. The sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ((sentences (regexp-split #rx\"[.?!]\" S)))\n    (count (lambda (s) (regexp-match #rx\"^I\" s)) sentences)))\n"], ["#lang racket\n;; Create a function that takes 3 numbers.\n;; Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n;; Returns false in any other cases.\n;; Examples\n;; >>> (any_int 5 2 7)\n;; #t\n;; >>> (any_int 3 2 2)\n;; #f\n;; >>> (any_int 3 -2 1)\n;; #t\n;; >>> (any_int 3.6 -2.2 2)\n;; #f\n(define (any_int x y z)\n  (and (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n"], ["#lang racket\n;; Write a function that takes a message, and encodes in such a \n;; way that it swaps case of all letters, replaces all vowels in \n;; the message with the letter that appears 2 places ahead of that \n;; vowel in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> (encode \"test\")\n;; \"TGST\"\n;; >>> (encode \"This is a message\")\n;; \"tHKS KS C MGSSCGG\"\n(define (encode message)\n  (define vowels \"aeiouAEIOU\")\n  (define (swap-case c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n        (char-downcase c)))\n  (define (vowel-shift c)\n    (define index (string-index vowels c))\n    (if index\n        (string-ref vowels (modulo (+ index 2) 10))\n        c))\n  (list->string\n   (map (lambda (c)\n          (if (char-alphabetic? c)\n              (vowel-shift (swap-case c))\n              c))\n        (string->list message))))\n"], ["#lang racket\n;; You are given a list of integers.\n;; You need to find the largest prime value and return the sum of its digits.\n;; Examples:\n;; >>> (skjkasdkd (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3))\n;; 10\n;; >>> (skjkasdkd (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1))\n;; 25\n;; >>> (skjkasdkd (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3))\n;; 13\n;; >>> (skjkasdkd (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6))\n;; 11\n;; >>> (skjkasdkd (list 0 81 12 3 1 21))\n;; 3\n;; >>> (skjkasdkd (list 0 8 1 2 1 7))\n;; 7\n(define (skjkasdkd lst)\n  (define (prime? n)\n    (define (helper i)\n      (cond ((> (* i i) n) #t)\n            ((zero? (modulo n i)) #f)\n            (else (helper (+ i 1)))))\n    (if (< n 2)\n        #f\n        (helper 2)))\n  (define (sum-digits n)\n    (if (< n 10)\n        n\n        (+ (modulo n 10) (sum-digits (quotient n 10)))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n"], ["#lang racket\n;; Given a hash, return #t if all keys are strings in lower \n;; case or all keys are strings in upper case, else return #f.\n;; The function should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t\n(define (check_dict_case dict)\n  (cond\n    [(empty? dict) #f]\n    [(andmap string? (hash-keys dict))\n     (let ([keys (hash-keys dict)])\n       (or (andmap string-lower-case? keys)\n           (andmap string-upper-case? keys)))]\n    [else #f]))\n"], ["#lang racket\n;; Implement a function that takes an non-negative integer and returns a list of the first n\n;; integers that are prime numbers and less than n.\n;; for example:\n;; >>> (count_up_to 5)\n;; (list 2 3)\n;; >>> (count_up_to 11)\n;; (list 2 3 5 7)\n;; >>> (count_up_to 0)\n;; (list )\n;; >>> (count_up_to 20)\n;; (list 2 3 5 7 11 13 17 19)\n;; >>> (count_up_to 1)\n;; (list )\n;; >>> (count_up_to 18)\n;; (list 2 3 5 7 11 13 17)\n(define (count_up_to n)\n  (define (prime? x)\n    (define (helper y)\n      (cond\n        ((> (* y y) x) #t)\n        ((zero? (modulo x y)) #f)\n        (else (helper (+ y 1)))))\n    (if (< x 2)\n        #f\n        (helper 2)))\n  (define (helper i lst)\n    (cond\n      ((= i n) lst)\n      ((prime? i) (helper (+ i 1) (append lst (list i))))\n      (else (helper (+ i 1) lst))))\n  (helper 2 '()))\n"], ["#lang racket\n;; Complete the function that takes two integers and returns \n;; the product of their unit digits.\n;; Assume the input is always valid.\n;; Examples:\n;; >>> (multiply 148 412)\n;; 16\n;; >>> (multiply 19 28)\n;; 72\n;; >>> (multiply 2020 1851)\n;; 0\n;; >>> (multiply 14 -15)\n;; 20\n(define (multiply a b)\n  (* (modulo a 10) (modulo b 10)))\n"], ["#lang racket\n;; Given a string s, count the number of uppercase vowels in even indices.\n;; For example:\n;; >>> (count_upper \"aBCdEf\")\n;; 1\n;; >>> (count_upper \"abcdefg\")\n;; 0\n;; >>> (count_upper \"dBBE\")\n;; 0\n(define (count_upper s)\n  (let loop ((i 0) (count 0))\n    (if (>= i (string-length s))\n        count\n        (loop (+ i 2) (if (and (even? i) (char-upper-case? (string-ref s i)))\n                           (+ count 1)\n                           count)))))\n"], ["#lang racket\n;; Create a function that takes a value (string) representing a number\n;; and returns the closest integer to it. If the number is equidistant\n;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding away from zero means that if the given number is equidistant\n;; from two integers, the one you should return is the one that is the\n;; farthest from zero. For example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"-14.5\") should return -15.\n(define (closest_integer value)\n  (let ((num (string->number value)))\n    (if (< (abs (- num (floor num))) (abs (- num (ceiling num))))\n        (floor num)\n        (ceiling num))))\n"], ["#lang racket\n;;  From a given list of integers, generate a list of rolling maximum element found until given moment\n;; in the sequence.\n;; >>> (rolling_max (list 1 2 3 2 3 4 2))\n;; (list 1 2 3 3 3 4 4)\n(define (rolling_max numbers)\n  (let loop ((nums numbers) (max (car numbers)) (result (list max)))\n    (if (null? (cdr nums))\n        (reverse result)\n        (loop (cdr nums) (max (car nums) max) (cons (max (car nums) max) result)))))\n"]]