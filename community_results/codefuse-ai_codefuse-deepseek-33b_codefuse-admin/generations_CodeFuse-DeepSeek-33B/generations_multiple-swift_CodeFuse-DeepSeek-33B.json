[["/// Check if in given array of numbers, are any two numbers closer to each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0, 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0, 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers: [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count-1 {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) <= threshold {\n                return true\n            }\n        }\n    }\n    return false"], ["/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in an array, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int) -> [Int] {\n    var result = [Int]()\n    var current = n\n    for i in 1...n {\n        result.append(current)\n        if i % 2 == 1 {\n            current += 2\n        } else {\n            current += 1\n        }\n    }\n    return result"], ["/// You will be given a string of words separated by commas or spaces. Your task is\n/// to split the string into words and return an array of the words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n/// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One, two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    return s.components(separatedBy: .whitespacesAndNewlines)"], ["/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n/// -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i % 2 == 0 && i > result {\n            result = i\n        }\n    }\n    return result"], ["extension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1) }\n    let avg = Double(n + m) / 2.0\n    let roundedAvg = Int(round(avg))\n    let binary = String(roundedAvg, radix: 2)\n    return .success(binary)"], ["/// Given an array of positive integers x. return a sorted array of all \n/// elements that hasn't any even digit.\n/// Note: Returned array should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15, 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n/// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in x {\n        var hasEvenDigit = false\n        var temp = num\n        while temp > 0 {\n            let digit = temp % 10\n            if digit % 2 == 0 {\n                hasEvenDigit = true\n                break\n            }\n            temp /= 10\n        }\n        if !hasEvenDigit {\n            result.append(num)\n        }\n    }\n    return result.sorted()"], ["/// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n/// reverse the resulting array, and then replace each digit by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n/// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    let sortedArr = arr.filter { $0 >= 1 && $0 <= 9 }.sorted().reversed()\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return sortedArr.map { names[$0 - 1] }"], ["/// Implement the function f that takes n as a parameter,\n/// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts from 1.\n/// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\nfunc f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1...n {\n        if i % 2 == 0 {\n            var factorial = 1\n            for j in 1...i {\n                factorial *= j\n            }\n            result.append(factorial)\n        } else {\n            var sum = 0\n            for j in 1...i {\n                sum += j\n            }\n            result.append(sum)\n        }\n    }\n    return result"], ["/// Given a positive integer n, return a tuple that has the number of even and odd\n/// integer palindromes that fall within the range(1, n), inclusive.\n/// Example 1:\n/// >>> even_odd_palindrome(n: 3)\n/// (1, 2)\n/// Explanation:\n/// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n/// Example 2:\n/// >>> even_odd_palindrome(n: 12)\n/// (4, 6)\n/// Explanation:\n/// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n/// Note:\n/// 1. 1 <= n <= 10^3\n/// 2. returned tuple has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n: Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    for i in 1...n {\n        let str = String(i)\n        if str == String(reversed(str)) {\n            if i % 2 == 0 {\n                evenCount += 1\n            } else {\n                oddCount += 1\n            }\n        }\n    }\n    return (evenCount, oddCount)"], ["/// Write a function count_nums which takes an array of integers and returns\n/// the number of elements which has a sum of digits > 0.\n/// If a number is negative, then its first signed digit will be negative:\n/// e.g. -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n/// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr: [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n    for num in arr {\n        var sum = 0\n        var n = abs(num)\n        while n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n        if sum > 0 {\n            count += 1\n        }\n    }\n    return count"], ["/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n/// numbers in the array will be randomly ordered. Your task is to determine if\n/// it is possible to get an array sorted in non-decreasing order by performing \n/// the following operation on the given array:\n/// You are allowed to perform right shift operation any number of times.\n/// One right shift operation means shifting all elements of the array by one\n/// position in the right direction. The last element of the array will be moved to\n/// the starting position in the array i.e. 0th index. \n/// If it is possible to obtain the sorted array by performing the above operation\n/// then return true else return false.\n/// If the given array is empty then return true.\n/// Note: The given array is guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr: [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations, non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr: [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing order for the given\n/// array by performing any number of right shift operations.\nfunc move_one_ball(arr: [Int]) -> Bool {\n    if arr.isEmpty {\n        return true\n    }\n    let sortedArr = arr.sorted()\n    let lastIndex = arr.count - 1\n    for i in 0..<arr.count {\n        if arr[i] != sortedArr[i] {\n            if arr[i] != sortedArr[(i + 1) % arr.count] {\n                return false\n            }\n        }\n    }\n    return true"], ["/// Find the shortest palindrome that begins with a supplied string.\n/// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string that is a palindrome.\n/// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(string: \"\")\n/// \"\"\n/// >>> make_palindrome(string: \"cat\")\n/// \"catac\"\n/// >>> make_palindrome(string: \"cata\")\n/// \"catac\"\nfunc make_palindrome(string: String) -> String {\n    var reversed = String(string.reversed())\n    for i in 0..<string.count {\n        if string.hasPrefix(reversed.suffix(string.count - i)) {\n            return string + reversed.prefix(i)\n        }\n    }\n    return string + reversed"], ["/// In this problem, you will implement a function that takes two arrays of numbers,\n/// and determines whether it is possible to perform an exchange of elements\n/// between them to make lst1 an array of only even numbers.\n/// There is no limit on the number of exchanged elements between lst1 and lst2.\n/// If it is possible to exchange elements between the lst1 and lst2 to make\n/// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n/// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String {\n    var evenCount = 0\n    var oddCount = 0\n    for num in lst1 {\n        if num % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount += 1\n        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount += 1\n        }\n    }\n    if evenCount == lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }"], ["/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String : Int]()\n    let words = test.split(separator: \" \")\n    for word in words {\n        dict[word, default: 0] += 1\n    }\n    let maxCount = dict.values.max() ?? 0\n    return dict.filter { $0.value == maxCount }"], ["/// Task\n/// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n/// then check if the result string is palindrome.\n/// A string is called palindrome if it reads the same backward as forward.\n/// You should return a tuple containing the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s: \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\", c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\", c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String) -> (String, Bool) {\n    let filteredString = s.filter { !c.contains($0) }\n    let reversedString = String(filteredString.reversed())\n    let isPalindrome = filteredString == reversedString\n    return (filteredString, isPalindrome)"], ["/// Given an array of strings, where each string consists of only digits, return an array.\n/// Each element i of the output should be \"the number of odd elements in the\n/// string i of the input.\" where all the i's should be replaced by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n/// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String]) -> [String] {\n    var result: [String] = []\n    for str in lst {\n        var count = 0\n        for char in str {\n            if let digit = Int(String(char)) {\n                if digit % 2 != 0 {\n                    count += 1\n                }\n            }\n        }\n        result.append(\"the number of odd elements \\(count)n the str\\(count)ng \\(count) of the \\(count)nput.\")\n    }\n    return result"], ["/// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums: [Int]) -> Int {\n    var minSum = nums[0]\n    var currSum = nums[0]\n    for i in 1..<nums.count {\n        currSum = min(nums[i], currSum + nums[i])\n        minSum = min(minSum, currSum)\n    }\n    return minSum"], ["/// You are given a rectangular grid of wells. Each row represents a single well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well has a corresponding bucket that can be used to extract water from it, \n/// and all buckets have the same capacity.\n/// Your task is to use the buckets to empty the wells.\n/// Output the number of times you need to lower the buckets.\n/// Example 1:\n/// >>> max_fill(grid: [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], capacity: 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(grid: [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2)\n/// 5\n/// Example 3:\n/// >>> max_fill(grid: [[0, 0, 0], [0, 0, 0]], capacity: 5)\n/// 0\n/// Constraints:\n/// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\nfunc max_fill(grid: [[Int]], capacity: Int) -> Int {\n    var count = 0\n    var currentCapacity = 0\n    for row in grid {\n        for well in row {\n            if well == 1 {\n                currentCapacity += 1\n                if currentCapacity == capacity {\n                    count += 1\n                    currentCapacity = 0\n                }\n            }\n        }\n    }\n    return count"], ["/// In this Kata, you have to sort an array of non-negative integers according to\n/// number of ones in their binary representation in ascending order.\n/// For similar number of ones, sort based on decimal value.\n/// It must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n/// [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5, -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int]) -> [Int] {\n    return arr.sorted { a, b in\n        let aCount = String(a, radix: 2).filter { $0 == \"1\" }.count\n        let bCount = String(b, radix: 2).filter { $0 == \"1\" }.count\n        if aCount == bCount {\n            return a < b\n        } else {\n            return aCount < bCount\n        }\n    }"], ["/// Given a string s and a natural number n, you have been tasked to implement \n/// a function that returns an array of all words from string s that contain exactly \n/// n consonants, in order these words appear in the string s.\n/// If the string s is empty then the function should return an empty array.\n/// Note: you may assume the input string contains only letters and spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"aeiouAEIOU\")\n    var result = [String]()\n    for word in s.split(separator: \" \") {\n        let consonants = word.filter { !vowels.contains($0) }\n        if consonants.count == n {\n            result.append(word)\n        }\n    }\n    return result"], ["/// You are given a word. Your task is to find the closest vowel that stands between \n/// two consonants from the right side of the word (case sensitive).\n/// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n/// find any vowel met the above condition. \n/// You may assume that the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word: \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word: \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    let vowels = Set(\"aeiouAEIOU\")\n    let consonants = Set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    var closestVowel = \"\"\n    var distance = Int.max\n    for i in stride(from: word.count-1, through: 1, by: -1) {\n        let char = word[word.index(word.startIndex, offsetBy: i)]\n        if vowels.contains(char) {\n            closestVowel = String(char)\n            distance = 0\n        } else if consonants.contains(char) {\n            distance += 1\n        }\n        if distance == 2 {\n            return closestVowel\n        }\n    }\n    return \"\""], ["/// You are given an array of two strings, both strings consist of open\n/// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if it is possible to concatenate the two strings in\n/// some order, that the resulting string will be good.\n/// A string S is considered to be good if and only if all parentheses in S\n/// are balanced. For example: the string '(())()' is good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(lst: [\"()(\", \")\"])\n/// \"Yes\"\n/// >>> match_parens(lst: [\")\", \")\"])\n/// \"No\"\nfunc match_parens(lst: [String]) -> String {\n    var stack = [Character]()\n    for c in lst.joined() {\n        if c == \"(\" {\n            stack.append(c)\n        } else if c == \")\" {\n            if stack.count > 0 && stack.last == \"(\" {\n                stack.removeLast()\n            } else {\n                return \"No\"\n            }\n        }\n    }\n    return stack.count == 0 ? \"Yes\" : \"No\""], ["/// Input are two strings a and b consisting only of 1s and 0s.\n/// Perform binary XOR on these inputs and return result also as a string.\n/// >>> string_xor(a: \"010\", b: \"110\")\n/// \"100\"\nfunc string_xor(a: String, b: String) -> String {\n    let aBits = Array(a.map { Int(String($0)) ?? 0 })\n    let bBits = Array(b.map { Int(String($0)) ?? 0 })\n    var result = [Int]()\n    for i in 0..<aBits.count {\n        result.append(aBits[i] ^ bBits[i])\n    }\n    return result.map { String($0) }.joined()"], ["/// Given an array arr of integers and a positive integer k, return a sorted array \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n/// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    return arr.sorted().reversed().prefix(k)"], ["/// Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst: [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n        if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n        }\n    }\n    return sum"], ["/// Given a non-empty array of integers arr and an integer k, return\n/// the sum of the elements with at most two digits from the first k elements of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n    return sum"], ["/// Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n/// as follows: start with any positive integer n. Then each term is obtained from the \n/// previous term as follows: if the previous term is even, the next term is one half of \n/// the previous term. If the previous term is odd, the next term is 3 times the previous\n/// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n/// 2. returned array sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n/// >>> get_odd_collatz(n: 5)\n/// [1, 5]\nfunc get_odd_collatz(n: Int) -> [Int] {\n    var collatz = [Int]()\n    var num = n\n    while num != 1 {\n        collatz.append(num)\n        if num % 2 == 0 {\n            num = num / 2\n        } else {\n            num = 3 * num + 1\n        }\n    }\n    collatz.append(1)\n    return collatz.filter { $0 % 2 != 0 }.sorted()"], ["/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    // Check if the date string is empty\n    if date.isEmpty {\n        return false\n    }\n    \n    // Split the date string into month, day, and year components\n    let components = date.components(separatedBy: \"-\")\n    guard components.count == 3 else {\n        return false\n    }\n    \n    // Parse the month, day, and year components\n    let month = Int(components[0])\n    let day = Int(components[1])\n    let year = Int(components[2])\n    \n    // Check if the month is valid\n    guard month != nil && month >= 1 && month <= 12 else {\n        return false\n    }\n    \n    // Check if the day is valid\n    guard day != nil && day >= 1 else {\n        return false\n    }\n    \n    // Check if the year is valid\n    guard year != nil else {\n        return false\n    }\n    \n    // Check if the number of days is valid for the given month\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        guard day <= 31 else {\n            return false\n        }\n    case 4, 6, 9, 11:\n        guard day <= 30 else {\n            return false\n        }\n    case 2:\n        // Check if the year is a leap year\n        let isLeapYear = (year % 4 == 0 && year % 100 != 0) || year % 400 == 0\n        guard day <= (isLeapYear ? 29 : 28) else {\n            return false\n        }\n    default:\n        return false\n    }\n    \n    // The date is valid\n    return true"], ["extension Int: Error {}\n        \n/// Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n/// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n    if let words = txt.split(separator: \" \").map(String.init) {\n        return .success(words)\n    } else if let words = txt.split(separator: \",\").map(String.init) {\n        return .success(words)\n    } else {\n        let lowercaseLetters = txt.filter { $0.isASCII && $0.isLowercase }\n        let oddOrderLetters = lowercaseLetters.filter { $0.asciiValue % 2 == 1 }\n        return .failure(oddOrderLetters.count)\n    }"], ["/// Given an array of numbers, return whether or not they are sorted\n/// in ascending order. If array has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(lst: [5])\n/// true\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(lst: [1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(lst: [1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(lst: [1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(lst: [1, 2, 2, 2, 3, 4])\n/// false\nfunc is_sorted(lst: [Int]) -> Bool {\n    var prev: Int? = nil\n    for num in lst {\n        if let prevNum = prev, num < prevNum {\n            return false\n        }\n        prev = num\n    }\n    return true"], ["/// You are given two intervals,\n/// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed which means that the interval (start, end)\n/// includes both start and end.\n/// For each given interval, it is assumed that its start is less or equal its end.\n/// Your task is to determine whether the length of intersection of these two \n/// intervals is a prime number.\n/// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n/// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise, return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n/// [input/output] samples:\n/// >>> intersection(interval1: (1, 2), interval2: (2, 3))\n/// \"NO\"\n/// >>> intersection(interval1: (-1, 1), interval2: (0, 4))\n/// \"NO\"\n/// >>> intersection(interval1: (-3, -1), interval2: (-5, 5))\n/// \"YES\"\nfunc intersection(interval1: (Int, Int), interval2: (Int, Int)) -> String {\n    let start = max(interval1.0, interval2.0)\n    let end = min(interval1.1, interval2.1)\n    let length = end - start + 1\n    if length <= 1 {\n        return \"NO\"\n    }\n    for i in 2..<length {\n        if length % i == 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\""], ["/// You are given an array arr of integers and you need to return\n/// sum of magnitudes of integers multiplied by product of all signs\n/// of each number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr: [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr: [Int]) -> Int? {\n    if arr.isEmpty {\n        return nil\n    }\n    var sum = 0\n    var product = 1\n    for num in arr {\n        sum += abs(num)\n        product *= num.sign\n    }\n    return sum * product"], ["/// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n/// each cell of the grid contains a value. Every integer in the range [1, N * N]\n/// inclusive appears exactly once on the cells of the grid.\n/// You have to find the minimum path of length k in the grid. You can start\n/// from any cell, and in each step you can move to any of the neighbor cells,\n/// in other words, you can go to cells which share an edge with you current\n/// cell.\n/// Please note that a path of length k means visiting exactly k cells (not\n/// necessarily distinct).\n/// You CANNOT go off the grid.\n/// A path A (of length k) is considered less than a path B (of length k) if\n/// after making the ordered arrays of the values on the cells that A and B go\n/// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n/// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n/// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n/// lst_A[j] = lst_B[j].\n/// It is guaranteed that the answer is unique.\n/// Return an ordered array of the values on the cells that the minimum path go through.\n/// Examples:    \n/// >>> minPath(grid: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], k: 3)\n/// [1, 2, 1]\n/// >>> minPath(grid: [[5, 9, 3], [4, 1, 6], [7, 8, 2]], k: 1)\n/// [1]\nfunc minPath(grid: [[Int]], k: Int) -> [Int] {\n    let n = grid.count\n    var dp = Array(repeating: Array(repeating: [Int](repeating: Int.max, count: k + 1), count: n), count: n)\n    dp[0][0][1] = grid[0][0]\n    for i in 0..<n {\n        for j in 0..<n {\n            for l in 1..<k+1 {\n                if i > 0 {\n                    dp[i][j][l] = min(dp[i][j][l], dp[i-1][j][l-1] + grid[i][j])\n                }\n                if j > 0 {\n                    dp[i][j][l] = min(dp[i][j][l], dp[i][j-1][l-1] + grid[i][j])\n                }\n            }\n        }\n    }\n    var path = [Int]()\n    var i = n - 1, j = n - 1, l = k\n    while i > 0 || j > 0 {\n        if i > 0 && dp[i][j][l] == dp[i-1][j][l-1] + grid[i][j] {\n            path.append(grid[i][j])\n            i -= 1\n            l -= 1\n        } else {\n            path.append(grid[i][j])\n            j -= 1\n            l -= 1\n        }\n    }\n    path.append(grid[0][0])\n    return path.reversed()"], ["/// Out of array of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return nil in case the input array is empty.\n/// >>> longest(strings: [] as [String])\n/// nil\n/// >>> longest(strings: [\"a\", \"b\", \"c\"])\n/// \"a\"\n/// >>> longest(strings: [\"a\", \"bb\", \"ccc\"])\n/// \"ccc\"\nfunc longest(strings: [String]) -> String? {\n    guard !strings.isEmpty else { return nil }\n    return strings.max(by: { $0.count < $1.count })"], ["/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n        } else if i == 1 {\n            result.append(3)\n        } else if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i-1] + result[i-2] + result[i+1])\n        }\n    }\n    return result"], ["/// Given a positive integer n, return the product of the odd digits.\n/// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(n: 1)\n/// 1\n/// >>> digits(n: 4)\n/// 0\n/// >>> digits(n: 235)\n/// 15\nfunc digits(n: Int) -> Int {\n    var product = 1\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if digit % 2 != 0 {\n            product *= digit\n        }\n        num /= 10\n    }\n    return product"], ["/// Create a function that takes a string as input which contains only square brackets.\n/// The function should return true if and only if there is a valid subsequence of brackets \n/// where at least one bracket in the subsequence is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string: \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n/// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\")\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string: String) -> Bool {\n    var stack = [Character]()\n    for char in string {\n        if char == \"[\" {\n            stack.append(char)\n        } else if char == \"]\" {\n            if stack.count > 0 {\n                stack.removeLast()\n            } else {\n                return false\n            }\n        }\n    }\n    return stack.count > 0"], ["/// You are given an array of numbers.\n/// You need to return the sum of squared numbers in the given array,\n/// round each element in the array to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0, 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>> sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4, 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        let ceilNum = Int(ceil(num))\n        sum += ceilNum * ceilNum\n    }\n    return sum"], ["/// Create a function that returns true if the last character\n/// of a given string is an alphabetical character and is not\n/// a part of a word, and false otherwise.\n/// Note: \"word\" is a group of characters separated by space.\n/// Examples:\n/// >>> check_if_last_char_is_a_letter(txt: \"apple pie\")\n/// false\n/// >>> check_if_last_char_is_a_letter(txt: \"apple pi e\")\n/// true\n/// >>> check_if_last_char_is_a_letter(txt: \"apple pi e \")\n/// false\n/// >>> check_if_last_char_is_a_letter(txt: \"\")\n/// false\nfunc check_if_last_char_is_a_letter(txt: String) -> Bool {\n    if txt.isEmpty {\n        return false\n    }\n    let lastChar = txt.last\n    if lastChar == \" \" {\n        return false\n    }\n    return lastChar.isLetter"], ["/// Create a function which returns the largest index of an element which\n/// is not greater than or equal to the element immediately preceding it. If\n/// no such element exists then return -1. The given array will not contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1, 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr: [Int]) -> Int {\n    for i in 1..<arr.count {\n        if arr[i] <= arr[i-1] {\n            return i-1\n        }\n    }\n    return -1"], ["/// Create a function that returns a tuple (a, b), where 'a' is\n/// the largest of negative integers, and 'b' is the smallest\n/// of positive integers in an array.\n/// If there is no negative or positive integers, return them as nil.\n/// Examples:\n/// >>> largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7])\n/// (nil, 1)\n/// >>> largest_smallest_integers(lst: [] as [Int])\n/// (nil, nil)\n/// >>> largest_smallest_integers(lst: [0])\n/// (nil, nil)\nfunc largest_smallest_integers(lst: [Int]) -> (Int?, Int?) {\n    var largestNegative: Int? = nil\n    var smallestPositive: Int? = nil\n    \n    for num in lst {\n        if num < 0 {\n            if largestNegative == nil || num > largestNegative! {\n                largestNegative = num\n            }\n        } else if num > 0 {\n            if smallestPositive == nil || num < smallestPositive! {\n                smallestPositive = num\n            }\n        }\n    }\n    \n    return (largestNegative, smallestPositive)"], ["enum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    switch (a, b) {\n    case (.intValue(let aInt), .intValue(let bInt)):\n        return aInt > bInt ? a : bInt > aInt ? b : nil\n    case (.doubleValue(let aDouble), .doubleValue(let bDouble)):\n        return aDouble > bDouble ? a : bDouble > aDouble ? b : nil\n    case (.stringValue(let aString), .stringValue(let bString)):\n        let aDouble = Double(aString.replacingOccurrences(of: \",\", with: \".\")) ?? 0\n        let bDouble = Double(bString.replacingOccurrences(of: \",\", with: \".\")) ?? 0\n        return aDouble > bDouble ? a : bDouble > aDouble ? b : nil\n    default:\n        return nil\n    }"], ["/// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n/// Example\n/// >>> is_equal_to_sum_even(n: 4)\n/// false\n/// >>> is_equal_to_sum_even(n: 6)\n/// false\n/// >>> is_equal_to_sum_even(n: 8)\n/// true\nfunc is_equal_to_sum_even(n: Int) -> Bool {\n    if n % 2 != 0 {\n        return false\n    }\n    let half = n / 2\n    for i in 2...half {\n        for j in i+1...half {\n            for k in j+1...half {\n                for l in k+1...half {\n                    if i + j + k + l == half {\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false"], ["/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    var result = 1\n    for i in stride(from: n, through: 1, by: -1) {\n        result *= i\n    }\n    return result"], ["/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a: 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n    var x = a\n    var y = b\n    while y != 0 {\n        let temp = y\n        y = x % y\n        x = temp\n    }\n    return x"], ["/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(text: \" Example\")\n/// \"Example\"\n/// >>> fix_spaces(text: \" Example 1\")\n/// \"Example_1\"\n/// >>> fix_spaces(text: \" Example 2\")\n/// \"_Example_2\"\n/// >>> fix_spaces(text: \" Example 3\")\n/// \"_Example-3\"\nfunc fix_spaces(text: String) -> String {\n    var result = text.trimmingCharacters(in: .whitespacesAndNewlines)\n    result = result.replacingOccurrences(of: \"  \", with: \"-\", options: .literal, range: nil)\n    result = result.replacingOccurrences(of: \" \", with: \"_\", options: .literal, range: nil)\n    return result"], ["/// Create a function which takes a string representing a file's name, and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n/// A file's name is considered to be valid if and only if all the following conditions \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The substring before the dot should not be empty, and it starts with a letter from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(file_name: \"example.txt\")\n/// \"Yes\"\n/// >>> file_name_check(file_name: \"1example.dll\")\n/// \"No\"\nfunc file_name_check(file_name: String) -> String {\n    let valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    let parts = file_name.components(separatedBy: \".\")\n    if parts.count != 2 {\n        return \"No\"\n    }\n    let name = parts[0]\n    let extension = parts[1]\n    if name.count > 3 || name.isEmpty || !name.first?.isLetter() ?? false {\n        return \"No\"\n    }\n    if !valid_extensions.contains(extension) {\n        return \"No\"\n    }\n    return \"Yes\""], ["/// You are given a string representing a sentence,\n/// the sentence contains some words separated by a space,\n/// and you have to return a string that contains the words from the original sentence,\n/// whose lengths are prime numbers,\n/// the order of the words in the new string should be the same as the original one.\n/// Example 1:\n/// >>> words_in_sentence(sentence: \"This is a test\")\n/// \"is\"\n/// Example 2:\n/// >>> words_in_sentence(sentence: \"lets go for swimming\")\n/// \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfunc words_in_sentence(sentence: String) -> String {\n    let words = sentence.split(separator: \" \")\n    var result = \"\"\n    for word in words {\n        if isPrime(word.count) {\n            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in: .whitespaces)"], ["/// Your task is to implement a function that will simplify the expression\n/// x * n. The function returns true if x * n evaluates to a whole number and false\n/// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n/// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n/// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n/// >>> simplify(x: \"1/5\", n: \"5/1\")\n/// true\n/// >>> simplify(x: \"1/6\", n: \"2/1\")\n/// false\n/// >>> simplify(x: \"7/10\", n: \"10/2\")\n/// false\nfunc simplify(x: String, n: String) -> Bool {\n    let xComponents = x.components(separatedBy: \"/\")\n    let nComponents = n.components(separatedBy: \"/\")\n    let xNumerator = Int(xComponents[0]) ?? 0\n    let xDenominator = Int(xComponents[1]) ?? 1\n    let nNumerator = Int(nComponents[0]) ?? 0\n    let nDenominator = Int(nComponents[1]) ?? 1\n    let result = (xNumerator * nDenominator) % (xDenominator * nNumerator)\n    return result == 0"], ["/// Write a function which sorts the given array of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1, 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums: [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n    var sortedNums = nums.sorted { (a, b) -> Bool in\n        let sumA = String(a).reduce(0) { $0 + Int(String($1))?.description.reduce(0) { $0 + Int(String($1))? } ?? 0 }\n        let sumB = String(b).reduce(0) { $0 + Int(String($1))?.description.reduce(0) { $0 + Int(String($1))? } ?? 0 }\n        if sumA == sumB {\n            return nums.firstIndex(of: a)! < nums.firstIndex(of: b)!\n        } else {\n            return sumA < sumB\n        }\n    }\n    return sortedNums"], ["/// Write a function that takes an array of numbers as input and returns \n/// the number of elements in the array that are greater than 10 and both \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n/// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums: [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var count = 0\n    for num in nums {\n        if num > 10 && abs(num) % 2 == 1 && abs(num) % 10 % 2 == 1 {\n            count += 1\n        }\n    }\n    return count"], ["/// You are given a positive integer n. You have to create an integer array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n/// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var count = 0\n    for i in 1...n {\n        for j in i+1...n {\n            for k in j+1...n {\n                let sum = i*i - i + 1 + j*j - j + 1 + k*k - k + 1\n                if sum % 3 == 0 {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count"], ["/// Write a function that accepts an array of strings as a parameter,\n/// deletes the strings that have odd lengths from it,\n/// and returns the resulted array with a sorted order,\n/// The array is always an array of strings and never an array of numbers,\n/// and it may contain duplicates.\n/// The order of the array should be ascending by length of each word, and you\n/// should return the array sorted by that rule.\n/// If two words have the same length, sort the array alphabetically.\n/// The function should return an array of strings in sorted order.\n/// You may assume that all words will have the same length.\n/// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let evenLengthStrings = lst.filter { $0.count % 2 == 0 }\n    let sortedStrings = evenLengthStrings.sorted { $0.count == $1.count ? $0 < $1 : $0.count < $1.count }\n    return sortedStrings"], ["/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes = [String]()\n    for i in 1...string.count {\n        prefixes.append(String(string[0..<i]))\n    }\n    return prefixes"], ["/// A simple program which should return the value of x if n is \n/// a prime number and should return the value of y otherwise.\n/// Examples:\n/// >>> x_or_y(n: 7, x: 34, y: 12)\n/// 34\n/// >>> x_or_y(n: 15, x: 8, y: 5)\n/// 5\nfunc x_or_y(n: Int, x: Int, y: Int) -> Int {\n    if isPrime(n) {\n        return x\n    } else {\n        return y\n    }"], ["/// Given an array of numbers, return the sum of squares of the numbers\n/// in the array that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst: [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n/// >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty, return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy: 2) != 0 && num.isInteger {\n            sum += Int(pow(num, 2))\n        }\n    }\n    return sum"], ["/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n/// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0, 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0, 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<game.count {\n        let diff = abs(game[i] - guess[i])\n        result.append(diff)\n    }\n    return result"], ["/// You will be given the name of a class (a string) and an array of extensions.\n/// The extensions are to be used to load additional classes to the class. The\n/// strength of the extension is as follows: Let CAP be the number of the uppercase\n/// letters in the extension's name, and let SM be the number of lowercase letters \n/// in the extension's name, the strength is given by the fraction CAP - SM. \n/// You should find the strongest extension and return a string in this \n/// format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions with the same strength, you should\n/// choose the one that comes first in the array.\n/// For example, if you are given \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions: [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name: String, extensions: [String]) -> String {\n    var strongest_extension = \"\"\n    var strongest_strength = Double.infinity\n    for extension in extensions {\n        var cap_count = 0\n        var sm_count = 0\n        for char in extension {\n            if char.isUppercase {\n                cap_count += 1\n            } else if char.isLowercase {\n                sm_count += 1\n            }\n        }\n        let strength = Double(cap_count) - Double(sm_count)\n        if strength < strongest_strength {\n            strongest_strength = strength\n            strongest_extension = extension\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\""], ["/// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a: \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b: \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n/// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>> cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a: \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String) -> Bool {\n    let rotations = (0..<b.count).map { b.suffix(b.count - $0) + b.prefix($0) }\n    return rotations.contains { a.contains($0) }"], ["/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var evenCount = 0\n    var oddCount = 0\n    var n = abs(num)\n    while n > 0 {\n        let digit = n % 10\n        if digit % 2 == 0 {\n            evenCount += 1\n        } else {\n            oddCount += 1\n        }\n        n /= 10\n    }\n    return (evenCount, oddCount)"], ["/// Given a positive integer, obtain its roman numeral equivalent as a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n/// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number: 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\nfunc int_to_mini_roman(number: Int) -> String {\n    let romanNumerals = [\n        (1000, \"m\"),\n        (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"i\")\n    ]\n    var result = \"\"\n    var num = number\n    for (value, symbol) in romanNumerals {\n        while num >= value {\n            result += symbol\n            num -= value\n        }\n    }\n    return result.lowercased()"], ["/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    let sides = [a, b, c].sorted()\n    return sides[0]^2 + sides[1]^2 == sides[2]^2"], ["/// Write a function that accepts an array of strings.\n/// The array contains different words. Return the word with maximum number\n/// of unique characters. If multiple strings have maximum number of unique\n/// characters, return the one which comes first in lexicographical order.\n/// >>> find_max(words: [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n    var maxWord = \"\"\n    var maxUniqueChars = 0\n    for word in words {\n        let uniqueChars = Set(word)\n        if uniqueChars.count > maxUniqueChars || (uniqueChars.count == maxUniqueChars && word < maxWord) {\n            maxWord = word\n            maxUniqueChars = uniqueChars.count\n        }\n    }\n    return maxWord"], ["/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    let totalEaten = number + need\n    let remainingCarrots = remaining - need\n    if remainingCarrots < 0 {\n        return [totalEaten, 0]\n    } else {\n        return [totalEaten, remainingCarrots]\n    }"], ["/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return (0...n).map { String($0) }.joined(separator: \" \")"], ["/// Given two arrays operator, and operand. The first array has basic algebra operations, and \n/// the second array is an array of integers. Use the two given arrays to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator array is equal to the length of operand array minus one.\n/// Operand is an array of of non-negative integers.\n/// Operator array has at least one operator, and operand array has at least two operands.\nfunc do_algebra(operator: [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in 0..<operator.count {\n        let op = operator[i]\n        let num = operand[i+1]\n        switch op {\n            case \"+\":\n                result += num\n            case \"-\":\n                result -= num\n            case \"*\":\n                result *= num\n            case \"//\":\n                result /= num\n            case \"**\":\n                result = Int(pow(Double(result), Double(num)))\n            default:\n                break\n        }\n    }\n    return result"], ["/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    var result = \"\"\n    var hasLetters = false\n    for char in s {\n        if char.isLetter {\n            hasLetters = true\n            if char.isUppercase {\n                result.append(char.lowercased())\n            } else {\n                result.append(char.uppercased())\n            }\n        } else {\n            result.append(char)\n        }\n    }\n    if !hasLetters {\n        result = String(result.reversed())\n    }\n    return result"], ["/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text: String) -> String? {\n    guard !text.isEmpty else { return nil }\n    let data = text.data(using: .utf8)!\n    let hash = data.md5\n    return hash.map { String(format: \"%02x\", $0) }.joined()"], ["/// Given two positive integers a and b, return the even digits between a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(a: 2, b: 8)\n/// [2, 4, 6, 8]\n/// >>> generate_integers(a: 8, b: 2)\n/// [2, 4, 6, 8]\n/// >>> generate_integers(a: 10, b: 14)\n/// [] as [Int]\nfunc generate_integers(a: Int, b: Int) -> [Int] {\n    let start = min(a, b)\n    let end = max(a, b)\n    var result = [Int]()\n    for i in start...end {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result"], ["/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\")\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string: String) -> Int {\n    return Set(string.lowercased()).count"], ["/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return array of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string: \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n    for note in music_string.split(separator: \" \") {\n        switch note {\n        case \"o\":\n            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n        case \".|\":\n            beats.append(1)\n        default:\n            break\n        }\n    }\n    return beats"], ["/// Find how many times a given substring can be found in the original string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring: \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n/// 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var count = 0\n    var index = string.startIndex\n    while index < string.endIndex {\n        if let range = string[index...].range(of: substring) {\n            count += 1\n            index = range.upperBound\n        } else {\n            break\n        }\n    }\n    return count"], ["/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    let numberWords = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n    let numberArray = numbers.split(separator: \" \").map { numberWords.firstIndex(of: $0)! }\n    let sortedArray = numberArray.sorted()\n    let sortedWords = sortedArray.map { numberWords[$0] }\n    return sortedWords.joined(separator: \" \")"], ["/// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n/// separate those group into separate strings and return the array of those.\n/// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n/// Ignore any spaces in the input string.\n/// >>> separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string: String) -> [String] {\n    var groups = [String]()\n    var current_group = \"\"\n    var open_count = 0\n    \n    for char in paren_string {\n        if char == \"(\" {\n            open_count += 1\n        } else if char == \")\" {\n            open_count -= 1\n        }\n        \n        if open_count == 0 && char == \")\" {\n            groups.append(current_group)\n            current_group = \"\"\n        } else if char != \" \" {\n            current_group.append(char)\n        }\n    }\n    \n    return groups"], ["/// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n/// other and return them in order (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double]) -> (Double, Double) {\n    var closestPair = (numbers[0], numbers[1])\n    var minDifference = abs(numbers[0] - numbers[1])\n    \n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i] - numbers[j])\n            if difference < minDifference {\n                minDifference = difference\n                closestPair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n            }\n        }\n    }\n    \n    return closestPair"], ["/// Given array of numbers (of at least two elements), apply a linear transform to that array,\n/// such that the smallest number will become 0 and the largest will become 1\n/// >>> rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers: [Double]) -> [Double] {\n    let min = numbers.min()!\n    let max = numbers.max()!\n    let range = max - min\n    return numbers.map { ($0 - min) / range }"], ["/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return values.flatMap { $0 as? Int }"], ["/// Return length of given string\n/// >>> strlen(string: \"\")\n/// 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count"], ["/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n: Int) -> Int {\n    var divisor = n - 1\n    while divisor > 0 {\n        if n % divisor == 0 {\n            return divisor\n        }\n        divisor -= 1\n    }\n    return 1"], ["/// Return array of prime factors of given integer in the order from smallest to largest.\n/// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n/// Input number should be equal to the product of all factors\n/// >>> factorize(n: 8)\n/// [2, 2, 2]\n/// >>> factorize(n: 25)\n/// [5, 5]\n/// >>> factorize(n: 70)\n/// [2, 5, 7]\nfunc factorize(n: Int) -> [Int] {\n    var factors = [Int]()\n    var divisor = 2\n    var number = n\n    \n    while divisor <= number {\n        if number % divisor == 0 {\n            factors.append(divisor)\n            number /= divisor\n        } else {\n            divisor += 1\n        }\n    }\n    \n    return factors"], ["/// From an array of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers: [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in numbers {\n        if !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result"], ["/// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string: String) -> String {\n    var flippedString = \"\"\n    for char in string {\n        if char.isUppercase {\n            flippedString += String(char.lowercased())\n        } else if char.isLowercase {\n            flippedString += String(char.uppercased())\n        } else {\n            flippedString += String(char)\n        }\n    }\n    return flippedString"], ["/// Concatenate array of strings into a single string\n/// >>> concatenate(strings: [] as [String])\n/// \"\"\n/// >>> concatenate(strings: [\"a\", \"b\", \"c\"])\n/// \"abc\"\nfunc concatenate(strings: [String]) -> String {\n    return strings.joined()"], ["/// Filter an input array of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\", \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String] {\n    return strings.filter { $0.hasPrefix(prefix) }"], ["/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(number: 3.5)\n/// 0.5\nfunc truncate_number(number: Double) -> Double {\n    return number - Double(Int(number))"], ["/// Return only positive numbers in the array.\n/// >>> get_positive(l: [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int]) -> [Int] {\n    return l.filter { $0 > 0 }"], ["/// Return true if a given number is prime, and false otherwise.\n/// >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n: 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n/// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\nfunc is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true"], ["/// This function takes an array l and returns an array l' such that\n/// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n/// to the values of the corresponding indicies of l, but sorted.\n/// >>> sort_third(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third(l: [5, 6, 3, 4, 8, 9, 2])\n/// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    var l_prime = l\n    var divisible_by_three = [Int]()\n    for (index, value) in l.enumerated() {\n        if index % 3 == 0 {\n            divisible_by_three.append(value)\n        }\n    }\n    divisible_by_three.sort()\n    var index = 0\n    for (index, value) in l.enumerated() {\n        if index % 3 == 0 {\n            l_prime[index] = divisible_by_three[index/3]\n        }\n    }\n    return l_prime"], ["/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    return Array(Set(l)).sorted()"], ["/// Return maximum element in the array.\n/// >>> max_element(l: [1, 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\nfunc max_element(l: [Int]) -> Int {\n    return l.max() ?? 0"], ["/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n/// >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n: Int) -> Int {\n    var count = 0\n    for i in 1...n {\n        if (i % 11 == 0 || i % 13 == 0) && String(i).contains(\"7\") {\n            count += 1\n        }\n    }\n    return count"], ["/// This function takes an array l and returns an array l' such that\n/// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>> sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n/// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var l_prime = l\n    var even_values = [Int]()\n    for i in stride(from: 0, to: l.count, by: 2) {\n        even_values.append(l[i])\n    }\n    even_values.sort()\n    for i in stride(from: 0, to: l.count, by: 2) {\n        l_prime[i] = even_values.removeFirst()\n    }\n    return l_prime"], ["/// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n/// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n: 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var count = 0\n    var fib1 = 0\n    var fib2 = 1\n    while count < n {\n        let nextFib = fib1 + fib2\n        fib1 = fib2\n        fib2 = nextFib\n        if isPrime(nextFib) {\n            count += 1\n        }\n    }\n    return fib1"], ["/// You're given an array of deposit and withdrawal operations on a bank account that starts with\n/// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n/// at that point function should return true. Otherwise it should return false.\n/// >>> below_zero(operations: [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\nfunc below_zero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false"], ["/// triples_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are three distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l: [Int]) -> Bool {\n    for i in 0..<l.count-2 {\n        for j in i+1..<l.count-1 {\n            for k in j+1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false"], ["/// Imagine a road that's a perfectly straight infinitely long line.\n/// n cars are driving left to right;  simultaneously, a different set of n cars\n/// are driving right to left.   The two sets of cars start out being very far from\n/// each other.  All cars move in the same speed.  Two cars are said to collide\n/// when a car that's moving left to right hits a car that's moving right to left.\n/// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n/// in their trajectory as if they did not collide.\n/// This function outputs the number of such collisions.\nfunc car_race_collision(n: Int) -> Int {\n    return n"], ["/// Return array with elements incremented by 1.\n/// >>> incr_list(l: [1, 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    return l.map { $0 + 1 }"], ["/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n    return false"], ["/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result = \"\"\n    var quotient = x\n    while quotient > 0 {\n        let remainder = quotient % base\n        result = String(remainder) + result\n        quotient = quotient / base\n    }\n    return result"], ["/// Given length of a side and high return area for a triangle.\n/// >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double {\n    return 0.5 * Double(a) * Double(h)"], ["/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n/// 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int) -> Int {\n    var fibs = [0, 0, 2, 0]\n    for i in 4...n {\n        fibs.append(fibs[i-1] + fibs[i-2] + fibs[i-3] + fibs[i-4])\n    }\n    return fibs[n]"], ["/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    return sorted.count % 2 == 0 ? Double(sorted[mid - 1] + sorted[mid]) / 2.0 : Double(sorted[mid])"], ["/// Checks if given string is a palindrome\n/// >>> is_palindrome(text: \"\")\n/// true\n/// >>> is_palindrome(text: \"aba\")\n/// true\n/// >>> is_palindrome(text: \"aaaaa\")\n/// true\n/// >>> is_palindrome(text: \"zbcd\")\n/// false\nfunc is_palindrome(text: String) -> Bool {\n    let reversedText = String(text.reversed())\n    return text == reversedText"], ["/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(n: 3, p: 5)\n/// 3\n/// >>> modp(n: 1101, p: 101)\n/// 2\n/// >>> modp(n: 0, p: 101)\n/// 1\n/// >>> modp(n: 3, p: 11)\n/// 8\n/// >>> modp(n: 100, p: 101)\n/// 1\nfunc modp(n: Int, p: Int) -> Int {\n    return pow(2, n, p)"], ["/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n    let deviations = numbers.map { abs($0 - mean) }\n    let mad = deviations.reduce(0, +) / Double(deviations.count)\n    return mad"], ["/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for char in text {\n        if vowels.contains(char) == false {\n            result.append(char)\n        }\n    }\n    return result"], ["/// Return true if all numbers in the array l are below threshold t.\n/// >>> below_threshold(l: [1, 2, 4, 10], t: 100)\n/// true\n/// >>> below_threshold(l: [1, 20, 4, 10], t: 5)\n/// false\nfunc below_threshold(l: [Int], t: Int) -> Bool {\n    for num in l {\n        if num >= t {\n            return false\n        }\n    }\n    return true"], ["/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>> add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y"], ["/// Check if two words have the same characters.\n/// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\", s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\")\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n/// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\nfunc same_chars(s0: String, s1: String) -> Bool {\n    let sorted0 = Array(s0).sorted()\n    let sorted1 = Array(s1).sorted()\n    return sorted0 == sorted1"], ["/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>> fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    var a = 0\n    var b = 1\n    for _ in 2..<n {\n        let c = a + b\n        a = b\n        b = c\n    }\n    return a + b"], ["/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets: \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n/// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets: \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.append(bracket)\n        } else if bracket == \">\" {\n            if stack.count == 0 {\n                return false\n            }\n            stack.removeLast()\n        }\n    }\n    return stack.count == 0"], ["/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i] > l[i-1] {\n            decreasing = false\n        } else if l[i] < l[i-1] {\n            increasing = false\n        }\n    }\n    return increasing || decreasing"], ["/// Return sorted unique common elements for two arrays.\n/// >>> common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n    let set1 = Set(l1)\n    let set2 = Set(l2)\n    let commonSet = set1.intersection(set2)\n    let commonArray = Array(commonSet)\n    let sortedArray = commonArray.sorted()\n    return sortedArray"], ["/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n: 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var factor = 2\n    var largest_factor = 1\n\n    while factor * factor <= n {\n        if n % factor == 0 {\n            n /= factor\n            largest_factor = factor\n        } else {\n            factor += 1\n        }\n    }\n\n    if n > largest_factor {\n        largest_factor = n\n    }\n\n    return largest_factor"], ["/// Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter: 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<numbers.count {\n        result.append(numbers[i])\n        if i != numbers.count - 1 {\n            result.append(delimeter)\n        }\n    }\n    return result"], ["/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n: 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n/// 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n: Int) -> Int {\n    return n * (n + 1) / 2"], ["/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets: \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n/// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets: \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets {\n        if bracket == \"(\" {\n            stack.append(bracket)\n        } else if bracket == \")\" {\n            if stack.count == 0 {\n                return false\n            }\n            stack.removeLast()\n        }\n    }\n    return stack.count == 0"], ["/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, value) in xs.enumerated() {\n        if index == 0 {\n            continue\n        }\n        result.append(value * index)\n    }\n    return result"], ["/// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n/// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n/// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n/// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fibfib = [Int](repeating: 0, count: n+1)\n    fibfib[1] = 0\n    fibfib[2] = 1\n    for i in 3..<n+1 {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    }\n    return fibfib[n]"], ["/// Write a function vowels_count which takes a string representing\n/// a word as input and returns the number of vowels in the string.\n/// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(s: \"abcde\")\n/// 2\n/// >>> vowels_count(s: \"ACEDY\")\n/// 3\nfunc vowels_count(s: String) -> Int {\n    let vowels = Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"])\n    var count = 0\n    for char in s.lowercased() {\n        if vowels.contains(String(char)) {\n            count += 1\n        }\n    }\n    return count"], ["/// Circular shift the digits of the integer x, shift the digits right by shift\n/// and return the result as a string.\n/// If shift > number of digits, return digits reversed.\n/// >>> circular_shift(x: 12, shift: 1)\n/// \"21\"\n/// >>> circular_shift(x: 12, shift: 2)\n/// \"12\"\nfunc circular_shift(x: Int, shift: Int) -> String {\n    let digits = String(x)\n    let n = digits.count\n    let shiftMod = shift % n\n    let shifted = digits.suffix(n - shiftMod) + digits.prefix(shiftMod)\n    return shifted"], ["/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for char in s {\n        if char.isUppercase {\n            sum += Int(char.asciiValue!)\n        }\n    }\n    return sum"], ["/// In this task, you will be given a string that represents a number of apples and oranges \n/// that are distributed in a basket of fruit this basket contains \n/// apples, oranges, and mango fruits. Given the string that represents the total number of \n/// the oranges and apples and an integer that represent the total number of the fruits \n/// in the basket return the number of the mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int) -> Int {\n    let components = s.components(separatedBy: \" \")\n    let apples = Int(components[0]) ?? 0\n    let oranges = Int(components[3]) ?? 0\n    let mangoes = n - apples - oranges\n    return mangoes"], ["/// \"Given an array representing a branch of a tree that has non-negative integer nodes\n/// your task is to pluck one of the nodes and return it.\n/// The plucked node should be the node with the smallest even value.\n/// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n/// The plucked node should be returned in an array, [ smalest_value, its index ],\n/// If there are no even values or the given array is empty, return [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n/// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr: [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3, 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n/// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var smallestEvenValue = Int.max\n    var smallestEvenIndex = Int.max\n    for (index, value) in arr.enumerated() {\n        if value % 2 == 0 && value < smallestEvenValue {\n            smallestEvenValue = value\n            smallestEvenIndex = index\n        }\n    }\n    if smallestEvenValue == Int.max {\n        return []\n    } else {\n        return [smallestEvenValue, smallestEvenIndex]\n    }"], ["/// You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n/// zero, and has a frequency greater than or equal to the value of the integer itself. \n/// The frequency of an integer is the number of times it appears in the array.\n/// If no such a value exist, return -1.\n/// Examples:\n/// >>> search(lst: [4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(lst: [1, 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(lst: [5, 5, 4, 4, 4])\n/// -1\nfunc search(lst: [Int]) -> Int {\n    var freq = [Int: Int]()\n    for num in lst {\n        freq[num, default: 0] += 1\n    }\n    for num in freq.keys.sorted(by: >) {\n        if freq[num] >= num {\n            return num\n        }\n    }\n    return -1"], ["/// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n/// For each of the group, output the deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n    var result: [Int] = []\n    var stack: [Int] = []\n    var maxDepth = 0\n    for char in paren_string {\n        if char == \"(\" {\n            stack.append(0)\n        } else if char == \")\" {\n            let depth = stack.popLast() ?? 0\n            maxDepth = max(maxDepth, depth)\n            if stack.count > 0 {\n                stack[stack.count - 1] = max(stack[stack.count - 1], depth + 1)\n            }\n        }\n    }\n    result.append(maxDepth)\n    return result"], ["/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var sortedList = lst\n    sortedList.sort()\n    var result = [Int]()\n    var isMin = true\n    while !sortedList.isEmpty {\n        if isMin {\n            result.append(sortedList.removeFirst())\n        } else {\n            result.append(sortedList.removeLast())\n        }\n        isMin = !isMin\n    }\n    return result"], ["/// Given the lengths of the three sides of a triangle. Return the area of\n/// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when the sum of any two sides is greater \n/// than the third side.\n/// Example:\n/// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1, b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c]\n    let sortedSides = sides.sorted()\n    if sortedSides[0] + sortedSides[1] > sortedSides[2] {\n        let s = Double(sides.reduce(0, +)) / 2.0\n        let area = sqrt(s * (s - Double(sides[0])) * (s - Double(sides[1])) * (s - Double(sides[2])))\n        return Double(round(100 * area) / 100)\n    } else {\n        return -1\n    }"], ["/// Write a function that returns true if the object q will fly, and false otherwise.\n/// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n/// Example:\n/// >>> will_it_fly(q: [1, 2], w: 5)\n/// false\n/// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>> will_it_fly(q: [3, 2, 3], w: 1)\n/// false\n/// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n/// >>> will_it_fly(q: [3, 2, 3], w: 9)\n/// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n/// >>> will_it_fly(q: [3], w: 5)\n/// true\n/// # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q: [Int], w: Int) -> Bool {\n    var sum = 0\n    for i in 0..<q.count {\n        sum += q[i]\n    }\n    if sum > w {\n        return false\n    }\n    for i in 0..<q.count/2 {\n        if q[i] != q[q.count-i-1] {\n            return false\n        }\n    }\n    return true"], ["/// Given an array arr of integers, find the minimum number of elements that\n/// need to be changed to make the array palindromic. A palindromic array is an array that\n/// is read the same backwards and forwards. In one change, you can change one element to any other element.\n/// For example:\n/// >>> smallest_change(arr: [1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(arr: [1, 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(arr: [1, 2, 3, 2, 1])\n/// 0\nfunc smallest_change(arr: [Int]) -> Int {\n    var count = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] != arr[j] {\n            count += 1\n        }\n        i += 1\n        j -= 1\n    }\n    return count"], ["/// Write a function that accepts two arrays of strings and returns the array that has \n/// total number of chars in the all strings of the array less than the other array.\n/// if the two arrays have the same number of chars, return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1: [String], lst2: [String]) -> [String] {\n    let lst1Chars = lst1.reduce(0) { $0 + $1.count }\n    let lst2Chars = lst2.reduce(0) { $0 + $1.count }\n    if lst1Chars < lst2Chars {\n        return lst1\n    } else if lst1Chars > lst2Chars {\n        return lst2\n    } else {\n        return lst1\n    }"], ["/// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var count = 0\n    var product = 1\n    for prime in primes {\n        if a % prime == 0 {\n            count += 1\n            product *= prime\n        }\n        if count == 3 {\n            break\n        }\n    }\n    return count == 3 && product == a"], ["/// Your task is to write a function that returns true if a number x is a simple\n/// power of n and false in other cases.\n/// x is a simple power of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n/// true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x: 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>> is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n/// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    var power = 0\n    var result = 1\n    while result < x {\n        result *= n\n        power += 1\n    }\n    return result == x"], ["/// Write a function that takes an integer a and returns true \n/// if this ingeger is a cube of some integer number.\n/// Note: you may assume the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n/// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a: 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\nfunc iscube(a: Int) -> Bool {\n    let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n    return cubeRoot * cubeRoot * cubeRoot == a"], ["/// You have been tasked to write a function that receives \n/// a hexadecimal number as a string and counts the number of hexadecimal \n/// digits that are primes (prime number, or a prime, is a natural number \n/// greater than 1 that is not a product of two smaller natural numbers).\n/// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are always uppercase.\n/// Examples:\n/// >>> hex_key(num: \"AB\")\n/// 1\n/// >>> hex_key(num: \"1077E\")\n/// 2\n/// >>> hex_key(num: \"ABED1A33\")\n/// 4\n/// >>> hex_key(num: \"123456789ABCDEF0\")\n/// 6\n/// >>> hex_key(num: \"2020\")\n/// 2\nfunc hex_key(num: String) -> Int {\n    let primes = Set([2, 3, 5, 7, 11, 13, 17])\n    var count = 0\n    for char in num {\n        if let digit = Int(String(char), radix: 16) {\n            if primes.contains(digit) {\n                count += 1\n            }\n        }\n    }\n    return count"], ["/// You will be given a number in decimal form and your task is to convert it to\n/// binary format. The function should return a string, with each character representing a binary\n/// number. Each character in the string will be '0' or '1'.\n/// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n/// The extra characters are there to help with the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal: Int) -> String {\n    let binary = String(decimal, radix: 2)\n    return \"db\\(binary)db\""], ["/// Filter an input array of strings only for ones that contain given substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\", \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\nfunc filter_by_substring(strings: [String], substring: String) -> [String] {\n    return strings.filter { $0.contains(substring) }"], ["/// You are given a string s.\n/// Your task is to check if the string is hapswift or not.\n/// A string is hapswift if its length is at least 3 and every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: \"a\")\n/// false\n/// >>> is_happy(s: \"aa\")\n/// false\n/// >>> is_happy(s: \"abcd\")\n/// true\n/// >>> is_happy(s: \"aabb\")\n/// false\n/// >>> is_happy(s: \"adb\")\n/// true\n/// >>> is_happy(s: \"xyy\")\n/// false\nfunc is_happy(s: String) -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true"], ["/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you an array of GPAs for some students and you have to write \n/// a function that can output an array of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n    var letterGrades = [String]()\n    for gpa in grades {\n        if gpa == 4.0 {\n            letterGrades.append(\"A+\")\n        } else if gpa > 3.7 {\n            letterGrades.append(\"A\")\n        } else if gpa > 3.3 {\n            letterGrades.append(\"A-\")\n        } else if gpa > 3.0 {\n            letterGrades.append(\"B+\")\n        } else if gpa > 2.7 {\n            letterGrades.append(\"B\")\n        } else if gpa > 2.3 {\n            letterGrades.append(\"B-\")\n        } else if gpa > 2.0 {\n            letterGrades.append(\"C+\")\n        } else if gpa > 1.7 {\n            letterGrades.append(\"C\")\n        } else if gpa > 1.3 {\n            letterGrades.append(\"C-\")\n        } else if gpa > 1.0 {\n            letterGrades.append(\"D+\")\n        } else if gpa > 0.7 {\n            letterGrades.append(\"D\")\n        } else if gpa > 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades"], ["/// Write a function that takes a string and returns true if the string\n/// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string: \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n/// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string: \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let length = string.count\n    if length < 2 {\n        return false\n    }\n    for i in 2..<length {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true"], ["/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    let count = 10 * pow(10, n as Double - 2)\n    return Int(count)"], ["/// Given a positive integer N, return the total sum of its digits in binary.\n/// Example\n/// >>> solve(N: 1000)\n/// \"1\"\n/// >>> solve(N: 150)\n/// \"110\"\n/// >>> solve(N: 147)\n/// \"1100\"\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n/// Output:\n/// a string of binary number\nfunc solve(N: Int) -> String {\n    var sum = 0\n    var n = N\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return String(sum, radix: 2)"], ["/// Given a non-empty array of integers lst. add the even elements that are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\nfunc add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated() {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum"], ["/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n/// \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s: String) -> String {\n    var result = \"\"\n    for word in s.split(separator: \" \") {\n        let sortedWord = String(word.sorted())\n        result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in: .whitespacesAndNewlines)"], ["/// You are given a 2 dimensional data, as a nested arrays,\n/// which is similar to matrix, however, unlike matrices,\n/// each row may contain a different number of columns.\n/// Given lst, and integer x, find integers x in the array,\n/// and return array of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially by rows in ascending order.\n/// Also, sort coordinates of the row by columns in descending order.\n/// Examples:\n/// >>> get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1)\n/// [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(lst: [] as [[Int]], x: 1)\n/// [] as [(Int, Int)]\n/// >>> get_row(lst: [[] as [Int], [1], [1, 2, 3]], x: 3)\n/// [(2, 2)]\nfunc get_row(lst: [[Int]], x: Int) -> [(Int, Int)] {\n    var result: [(Int, Int)] = []\n    for (row, columns) in lst.enumerated() {\n        for (column, value) in columns.enumerated() {\n            if value == x {\n                result.append((row, column))\n            }\n        }\n    }\n    result.sort { $0.0 < $1.0 || ($0.0 == $1.0 && $0.1 > $1.1) }\n    return result"], ["/// Given an array of non-negative integers, return a coswift of the given array after sorting,\n/// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n/// or sort it in descending order if the sum( first index value, last index value) is even.\n/// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array: [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n/// >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array: [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int]) -> [Int] {\n    var sortedArray = array\n    if array.count > 0 {\n        let sum = array[0] + array[array.count - 1]\n        if sum % 2 == 0 {\n            sortedArray.sort(by: >)\n        } else {\n            sortedArray.sort()\n        }\n    }\n    return sortedArray"], ["/// Create a function encrypt that takes a string as an argument and\n/// returns a string encrypted with the alphabet being rotated. \n/// The alphabet should be rotated in a manner such that the letters \n/// shift down by two multiplied to two places.\n/// For example:\n/// >>> encrypt(s: \"hi\")\n/// \"lm\"\n/// >>> encrypt(s: \"asdfghjkl\")\n/// \"ewhjklnop\"\n/// >>> encrypt(s: \"gf\")\n/// \"kj\"\n/// >>> encrypt(s: \"et\")\n/// \"ix\"\nfunc encrypt(s: String) -> String {\n    var encryptedString = \"\"\n    for char in s {\n        let asciiValue = char.asciiValue\n        let shiftedValue = asciiValue + 2*2\n        let encryptedChar = Character(UnicodeScalar(shiftedValue)!)\n        encryptedString += String(encryptedChar)\n    }\n    return encryptedString"], ["/// For a given array of integers, return a tuple consisting of a sum and a product of all the integers in an array.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: [] as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers {\n        sum += number\n        product *= number\n    }\n    return (sum, product)"], ["/// You are given an array of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the array.\n/// Return nil if there is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n/// >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: [] as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst: [Int]) -> Int? {\n    if lst.count < 2 {\n        return nil\n    }\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    if smallest > secondSmallest {\n        let temp = smallest\n        smallest = secondSmallest\n        secondSmallest = temp\n    }\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest && lst[i] != smallest {\n            secondSmallest = lst[i]\n        }\n    }\n    if smallest == secondSmallest {\n        return nil\n    }\n    return secondSmallest"], ["/// You'll be given a string of words, and your task is to count the number\n/// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue. The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n    var count = 0\n    var sentences = S.components(separatedBy: \".!?\")\n    for sentence in sentences {\n        if sentence.hasPrefix(\"I\") {\n            count += 1\n        }\n    }\n    return count"], ["/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x.truncatingRemainder(dividingBy: 1) != 0 || y.truncatingRemainder(dividingBy: 1) != 0 || z.truncatingRemainder(dividingBy: 1) != 0 {\n        return false\n    }\n    if x == y + z || y == x + z || z == x + y {\n        return true\n    }\n    return false"], ["/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message: \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n/// \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let vowels = \"aeiouAEIOU\"\n    for char in message {\n        let newChar: Character\n        if vowels.contains(char) {\n            let index = vowels.index(of: char)\n            let nextIndex = vowels.index(vowels.startIndex, offsetBy: (index.encodedOffset + 2) % vowels.count)\n            newChar = vowels[nextIndex]\n        } else {\n            newChar = char.isUppercase ? char.lowercased() : char.uppercased()\n        }\n        encodedMessage.append(newChar)\n    }\n    return encodedMessage"], ["/// You are given an array of integers.\n/// You need to find the largest prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n/// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\nfunc skjkasdkd(lst: [Int]) -> Int {\n    var largestPrime = 0\n    for num in lst {\n        if isPrime(num) && num > largestPrime {\n            largestPrime = num\n        }\n    }\n    return sumOfDigits(largestPrime)"], ["/// Implement a function that takes an non-negative integer and returns an array of the first n\n/// integers that are prime numbers and less than n.\n/// for example:\n/// >>> count_up_to(n: 5)\n/// [2, 3]\n/// >>> count_up_to(n: 11)\n/// [2, 3, 5, 7]\n/// >>> count_up_to(n: 0)\n/// [] as [Int]\n/// >>> count_up_to(n: 20)\n/// [2, 3, 5, 7, 11, 13, 17, 19]\n/// >>> count_up_to(n: 1)\n/// [] as [Int]\n/// >>> count_up_to(n: 18)\n/// [2, 3, 5, 7, 11, 13, 17]\nfunc count_up_to(n: Int) -> [Int] {\n    var primes = [Int]()\n    for i in 2..<n {\n        var isPrime = true\n        for j in 2..<i {\n            if i % j == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes.append(i)\n        }\n    }\n    return primes"], ["/// Complete the function that takes two integers and returns \n/// the product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19, b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a: 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a % 10) * abs(b % 10)"], ["/// Given a string s, count the number of uppercase vowels in even indices.\n/// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s: \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s: String) -> Int {\n    var count = 0\n    for (index, char) in s.enumerated() {\n        if index % 2 == 0 && char.isUppercase && \"AEIOU\".contains(char) {\n            count += 1\n        }\n    }\n    return count"], ["/// Create a function that takes a value (string) representing a number\n/// and returns the closest integer to it. If the number is equidistant\n/// from two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(value: \"10\")\n/// 10\n/// >>> closest_integer(value: \"15.3\")\n/// 15\n/// Note:\n/// Rounding away from zero means that if the given number is equidistant\n/// from two integers, the one you should return is the one that is the\n/// farthest from zero. For example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"-14.5\") should return -15.\nfunc closest_integer(value: String) -> Int {\n    let number = Double(value)!\n    let rounded = round(number)\n    if rounded - number == 0.5 {\n        return number > 0 ? Int(rounded + 0.5) : Int(rounded - 0.5)\n    } else {\n        return Int(rounded)\n    }"], ["/// From a given array of integers, generate an array of rolling maximum element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers: [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int]) -> [Int] {\n    var result = [Int]()\n    var max = numbers[0]\n    for number in numbers {\n        if number > max {\n            max = number\n        }\n        result.append(max)\n    }\n    return result"]]