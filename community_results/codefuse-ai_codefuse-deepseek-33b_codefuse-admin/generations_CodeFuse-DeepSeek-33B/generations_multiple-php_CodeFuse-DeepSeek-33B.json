[["<?php\n// Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements(array(1.0, 2.0, 3.0), 0.5)\n// false\n// >>> has_close_elements(array(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n// true\nfunction has_close_elements($numbers, $threshold) {\n    // Sort the array in ascending order\n    sort($numbers);\n\n    // Iterate through the array and check if any two adjacent numbers\n    // are closer to each other than the given threshold\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        if ($numbers[$i + 1] - $numbers[$i] < $threshold) {\n            return true;\n        }\n    }\n\n    // If no two adjacent numbers are closer to each other than the threshold,\n    // return false\n    return false;\n}\n"], ["<?php\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// array(3, 5, 7)\nfunction make_a_pile($n) {\n    $pile = array($n);\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % 2 == 0) {\n            $pile[] = $n + $i * 2;\n        } else {\n            $pile[] = $n + $i * 2 - 1;\n        }\n    }\n    return $pile;\n}\n"], ["<?php\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// array(\"Hi\", \"my\", \"name\", \"is\", \"John\")\n// >>> words_string(\"One, two, three, four, five, six\")\n// array(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\")\nfunction words_string($s) {\n    $words = preg_split('/[\\s,]+/', $s);\n    return $words;\n}"], ["<?php\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num($x, $y) {\n    // If x is even, return x\n    if ($x % 2 == 0) {\n        return $x;\n    }\n    // If x is odd, return the next even number\n    else {\n        $x += 1;\n        if ($x > $y) {\n            return -1;\n        }\n        else {\n            return $x;\n        }\n    }\n}\n"], ["<?php\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg($n, $m) {\n    if ($n > $m) {\n        return -1;\n    }\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $avg = round($sum / ($m - $n + 1));\n    return decbin($avg);\n}\n\necho rounded_avg(1, 5) . \"\\n\"; // \"0b11\"\necho rounded_avg(7, 5) . \"\\n\"; // -1\necho rounded_avg(10, 20) . \"\\n\"; // \"0b1111\"\necho rounded_avg(20, 33) . \"\\n\"; // \"0b11010\""], ["<?php\n// Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits(array(15, 33, 1422, 1))\n// array(1, 15, 33)\n// >>> unique_digits(array(152, 323, 1422, 10))\n// array()\nfunction unique_digits($x) {\n    $result = array();\n    foreach ($x as $num) {\n        $has_even_digit = false;\n        while ($num > 0) {\n            $digit = $num % 10;\n            if ($digit % 2 == 0) {\n                $has_even_digit = true;\n                break;\n            }\n            $num = floor($num / 10);\n        }\n        if (!$has_even_digit) {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n    return $result;\n}\n"], ["<?php\n// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n// >>> by_length(array())\n// array()\n// If the array has any strange number ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction by_length($arr) {\n    $names = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    $sorted = array_filter($arr, function($num) {\n        return $num >= 1 && $num <= 9;\n    });\n    rsort($sorted);\n    $result = array_map(function($num) use ($names) {\n        return $names[$num - 1];\n    }, $sorted);\n    return $result;\n}\n"], ["<?php\n// Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// array(1, 2, 6, 24, 15)\nfunction f($n) {\n    $result = array();\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $factorial = 1;\n            for ($j = 1; $j <= $i; $j++) {\n                $factorial *= $j;\n            }\n            $result[] = $factorial;\n        } else {\n            $sum = 0;\n            for ($j = 1; $j <= $i; $j++) {\n                $sum += $j;\n            }\n            $result[] = $sum;\n        }\n    }\n    return $result;\n}\n"], ["<?php\n// Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// array(1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// array(4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome($n) {\n    $even_count = 0;\n    $odd_count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if (strrev(strval($i)) == strval($i)) {\n            if ($i % 2 == 0) {\n                $even_count++;\n            } else {\n                $odd_count++;\n            }\n        }\n    }\n    return array($even_count, $odd_count);\n}"], ["<?php\n// Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums(array())\n// 0\n// >>> count_nums(array(-1, 11, -11))\n// 1\n// >>> count_nums(array(1, 1, 2))\n// 3\nfunction count_nums($arr) {\n    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num_str = strval(abs($num));\n        for ($i = 0; $i < strlen($num_str); $i++) {\n            $sum += intval($num_str[$i]);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n"], ["<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball(array(3, 4, 5, 1, 2))\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball(array(3, 5, 4, 1, 2))\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball($arr) {\n    // If the array is empty, return true\n    if (empty($arr)) {\n        return true;\n    }\n\n    // Find the index of the maximum element in the array\n    $max_index = array_search(max($arr), $arr);\n\n    // If the maximum element is at the beginning of the array, return true\n    if ($max_index == 0) {\n        return true;\n    }\n\n    // If the maximum element is at the end of the array, return false\n    if ($max_index == count($arr) - 1) {\n        return false;\n    }\n\n    // If the maximum element is in the middle of the array, check if it can be\n    // moved to the beginning of the array by performing right shift operations\n    for ($i = $max_index; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n"], ["<?php\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome($string) {\n    // Find the longest postfix of supplied string that is a palindrome.\n    $len = strlen($string);\n    $i = 0;\n    while ($i < $len) {\n        $j = $len - 1;\n        while ($j > $i && $string[$i] == $string[$j]) {\n            $i++;\n            $j--;\n        }\n        if ($i >= $j) {\n            break;\n        }\n        $i = 0;\n        $len--;\n    }\n    // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    $prefix = substr($string, 0, $len);\n    $suffix = strrev($prefix);\n    return $string . $suffix;\n}\n"], ["<?php\n// In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange(array(1, 2, 3, 4), array(1, 2, 3, 4))\n// \"YES\"\n// >>> exchange(array(1, 2, 3, 4), array(1, 5, 3, 4))\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange($lst1, $lst2) {\n    // Count the number of odd numbers in lst1\n    $odd_count = 0;\n    foreach ($lst1 as $num) {\n        if ($num % 2 != 0) {\n            $odd_count++;\n        }\n    }\n\n    // Count the number of even numbers in lst2\n    $even_count = 0;\n    foreach ($lst2 as $num) {\n        if ($num % 2 == 0) {\n            $even_count++;\n        }\n    }\n\n    // If there are more odd numbers in lst1 than even numbers in lst2,\n    // it is not possible to exchange elements to make lst1 all even.\n    if ($odd_count > $even_count) {\n        return \"NO\";\n    }\n\n    return \"YES\";\n}\n"], ["<?php\n// Given a string representing a space separated lowercase letters, return an array\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2, \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" => 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\")\n// array()\nfunction histogram($test) {\n    $letters = explode(\" \", $test);\n    $counts = array_count_values($letters);\n    $max_count = max($counts);\n    $result = array();\n    foreach ($counts as $letter => $count) {\n        if ($count == $max_count) {\n            $result[$letter] = $count;\n        }\n    }\n    return $result;\n}"], ["<?php\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// array(\"bcd\", false)\n// >>> reverse_delete(\"abcdef\", \"b\")\n// array(\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// array(\"cdedc\", true)\nfunction reverse_delete($s, $c) {\n    // Remove all characters in $c from $s\n    $s = str_replace(str_split($c), '', $s);\n\n    // Check if $s is a palindrome\n    $is_palindrome = ($s == strrev($s));\n\n    // Return the result as an array\n    return array($s, $is_palindrome);\n}\n"], ["<?php\n// Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count(array(\"1234567\"))\n// array(\"the number of odd elements 4n the str4ng 4 of the 4nput.\")\n// >>> odd_count(array(\"3\", \"11111111\"))\n// array(\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\")\nfunction odd_count($lst) {\n    $result = array();\n    foreach ($lst as $str) {\n        $count = 0;\n        for ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] % 2 != 0) {\n                $count++;\n            }\n        }\n        $result[] = \"the number of odd elements $countn the str$countng $count of the $countnput.\";\n    }\n    return $result;\n}\n\n$input = array(\"1234567\", \"3\", \"11111111\");\n$output = odd_count($input);\nprint_r($output);"], ["<?php\n// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum(array(2, 3, 4, 1, 2, 4))\n// 1\n// >>> minSubArraySum(array(-1, -2, -3))\n// -6\nfunction minSubArraySum($nums) {\n    $minSum = $nums[0];\n    $currSum = $nums[0];\n    for ($i = 1; $i < count($nums); $i++) {\n        $currSum = min($nums[$i], $currSum + $nums[$i]);\n        $minSum = min($minSum, $currSum);\n    }\n    return $minSum;\n}\n"], ["<?php\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1)\n// 6\n// Example 2:\n// >>> max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2)\n// 5\n// Example 3:\n// >>> max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill($grid, $capacity) {\n    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n    $num_buckets = 0;\n    $num_wells = 0;\n    for ($i = 0; $i < $num_rows; $i++) {\n        for ($j = 0; $j < $num_cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $num_wells++;\n            }\n        }\n    }\n    while ($num_wells > 0) {\n        $num_buckets++;\n        $num_wells -= $capacity;\n    }\n    return $num_buckets;\n}"], ["<?php\n// In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr) {\n    $counts = array_map(function($num) {\n        return array_sum(str_split(decbin($num)));\n    }, $arr);\n    array_multisort($counts, $arr);\n    return $arr;\n}\n"], ["<?php\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\", \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>> select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words = explode(\" \", $s);\n    $result = array();\n    foreach ($words as $word) {\n        $consonants = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = strtolower($word[$i]);\n            if ($char != 'a' && $char != 'e' && $char != 'i' && $char != 'o' && $char != 'u') {\n                $consonants++;\n            }\n        }\n        if ($consonants == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n"], ["<?php\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n    $closest_vowel = '';\n    $word_length = strlen($word);\n    for ($i = $word_length - 1; $i >= 2; $i--) {\n        if (!in_array($word[$i], $vowels) && in_array($word[$i - 1], $vowels) && !in_array($word[$i - 2], $vowels)) {\n            $closest_vowel = $word[$i - 1];\n            break;\n        }\n    }\n    return $closest_vowel;\n}\n\necho get_closest_vowel(\"yogurt\"); // Output: \"u\"\necho get_closest_vowel(\"FULL\"); // Output: \"U\"\necho get_closest_vowel(\"quick\"); // Output: \"\"\necho get_closest_vowel(\"ab\"); // Output: \"\""], ["<?php\n// You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens(array(\"()(\", \")\"))\n// \"Yes\"\n// >>> match_parens(array(\")\", \")\"))\n// \"No\"\nfunction match_parens($lst) {\n    $str = $lst[0] . $lst[1];\n    $stack = array();\n    for ($i = 0; $i < strlen($str); $i++) {\n        if ($str[$i] == '(') {\n            array_push($stack, '(');\n        } else {\n            if (empty($stack)) {\n                return \"No\";\n            }\n            array_pop($stack);\n        }\n    }\n    if (empty($stack)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n"], ["<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a); $i++) {\n        $result .= ($a[$i] ^ $b[$i]);\n    }\n    return $result;\n}\n"], ["<?php\n// Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum(array(-3, -4, 5), 3)\n// array(-4, -3, 5)\n// Example 2:\n// >>> maximum(array(4, -4, 4), 2)\n// array(4, 4)\n// Example 3:\n// >>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\n// array(2)\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k) {\n    sort($arr); // Sort the array in ascending order\n    $result = array_slice($arr, -$k); // Get the last $k elements of the sorted array\n    return $result;\n}"], ["<?php\n// Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution(array(5, 8, 7, 1))\n// 12\n// >>> solution(array(3, 3, 3, 3, 3))\n// 9\n// >>> solution(array(30, 13, 24, 321))\n// 0\nfunction solution($lst) {\n    $sum = 0;\n    for ($i = 0; $i < count($lst); $i += 2) {\n        if ($lst[$i] % 2 != 0) {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n"], ["<?php\n// Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements(array(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements($arr, $k) {\n    $sum = 0;\n    for ($i = 0; $i < $k; $i++) {\n        if (strlen(strval($arr[$i])) <= 2) {\n            $sum += $arr[$i];\n        }\n    }\n    return $sum;\n}\n"], ["<?php\n// Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// array(1, 5)\nfunction get_odd_collatz($n) {\n    $collatz_sequence = array($n);\n    while ($n != 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = 3 * $n + 1;\n        }\n        $collatz_sequence[] = $n;\n    }\n    $odd_collatz_sequence = array();\n    foreach ($collatz_sequence as $num) {\n        if ($num % 2 != 0) {\n            $odd_collatz_sequence[] = $num;\n        }\n    }\n    sort($odd_collatz_sequence);\n    return $odd_collatz_sequence;\n}\n"], ["<?php\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date($date) {\n    // Check if the date string is not empty\n    if (empty($date)) {\n        return false;\n    }\n\n    // Split the date string into month, day, and year\n    $date_parts = explode(\"-\", $date);\n\n    // Check if the date string is in the format: mm-dd-yyyy\n    if (count($date_parts) != 3) {\n        return false;\n    }\n\n    // Extract the month, day, and year from the date string\n    $month = $date_parts[0];\n    $day = $date_parts[1];\n    $year = $date_parts[2];\n\n    // Check if the month is valid\n    if ($month < 1 || $month > 12) {\n        return false;\n    }\n\n    // Check if the day is valid\n    if ($day < 1 || $day > 31) {\n        return false;\n    }\n\n    // Check if the day is valid for February\n    if ($month == 2) {\n        if ($day > 29) {\n            return false;\n        }\n        if ($day == 29) {\n            if (!($year % 4 == 0 && ($year % 100 != 0 || $year % 400 == 0))) {\n                return false;\n            }\n        }\n    }\n\n    // Check if the day is valid for April, June, September, and November\n    if ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n        if ($day > 30) {\n            return false;\n        }\n    }\n\n    // The date is valid\n    return true;\n}\n"], ["<?php\n// Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"Hello,world!\")\n// array(\"Hello\", \"world!\")\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words($txt) {\n    $words = explode(\" \", $txt);\n    if (count($words) > 1) {\n        return $words;\n    }\n    $words = explode(\",\", $txt);\n    if (count($words) > 1) {\n        return $words;\n    }\n    $count = 0;\n    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ctype_lower($txt[$i]) && ord($txt[$i]) % 2 != 0) {\n            $count++;\n        }\n    }\n    return $count;\n}"], ["<?php\n// Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n// true\n// >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n// >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1, 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\nfunction is_sorted($lst) {\n    // Check if array has more than 1 duplicate of the same number\n    if (count($lst) !== count(array_unique($lst))) {\n        return false;\n    }\n    // Check if array is sorted in ascending order\n    for ($i = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["<?php\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection(array(1, 2), array(2, 3))\n// \"NO\"\n// >>> intersection(array(-1, 1), array(0, 4))\n// \"NO\"\n// >>> intersection(array(-3, -1), array(-5, 5))\n// \"YES\"\nfunction intersection($interval1, $interval2) {\n    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n        return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n"], ["<?php\n// You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return null for empty arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0, 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n        return null;\n    }\n    $product = 1;\n    $sum = 0;\n    foreach ($arr as $num) {\n        $product *= ($num > 0) - ($num < 0);\n        $sum += abs($num);\n    }\n    return $product * $sum;\n}\n"], ["<?php\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9)), 3)\n// array(1, 2, 1)\n// >>> minPath(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1)\n// array(1)\nfunction minPath($grid, $k) {\n    $n = count($grid);\n    $dp = array_fill(0, $n, array_fill(0, $n, array_fill(0, $k + 1, PHP_INT_MAX)));\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $dp[$i][$j][1] = $grid[$i][$j];\n        }\n    }\n    for ($l = 2; $l <= $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                for ($x = 0; $x < $n; $x++) {\n                    for ($y = 0; $y < $n; $y++) {\n                        if ($x != $i || $y != $j) {\n                            $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$x][$y][$l - 1] + $grid[$i][$j]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    $min_path = array_fill(0, $k, PHP_INT_MAX);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $min_path[$k - 1] = min($min_path[$k - 1], $dp[$i][$j][$k]);\n        }\n    }\n    return $min_path;\n}"], ["<?php\n// Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return null in case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n// \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n    return $longest;\n}\n"], ["<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// array(1, 3, 2, 8)\nfunction tri($n) {\n    $tri = array(1, 3);\n    for ($i = 2; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $tri[$i] = 1 + $i / 2;\n        } else {\n            $tri[$i] = $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return $tri;\n}\n\nprint_r(tri(3));"], ["<?php\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits($n) {\n    $product = 1;\n    $has_odd = false;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n            $has_odd = true;\n        }\n        $n = floor($n / 10);\n    }\n    if (!$has_odd) {\n        return 0;\n    }\n    return $product;\n}\n\necho digits(1) . \"\\n\"; // Output: 1\necho digits(4) . \"\\n\"; // Output: 0\necho digits(235) . \"\\n\"; // Output: 15"], ["<?php\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested($string) {\n    // Initialize a stack to keep track of the brackets.\n    $stack = array();\n\n    // Iterate through each character in the string.\n    for ($i = 0; $i < strlen($string); $i++) {\n        // If the character is an opening bracket, push it onto the stack.\n        if ($string[$i] == '[') {\n            array_push($stack, '[');\n        }\n        // If the character is a closing bracket, check if there is an opening bracket on the stack.\n        else if ($string[$i] == ']') {\n            // If there is an opening bracket on the stack, pop it off and continue.\n            if (count($stack) > 0 && $stack[count($stack) - 1] == '[') {\n                array_pop($stack);\n            }\n            // If there is not an opening bracket on the stack, return false.\n            else {\n                return false;\n            }\n        }\n    }\n\n    // If there are any opening brackets left on the stack, return false.\n    if (count($stack) > 0) {\n        return false;\n    }\n\n    // If there are no opening brackets left on the stack and all brackets have been matched, return true.\n    return true;\n}\n"], ["<?php\n// You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst(array(1.0, 2.0, 3.0))\n// 14\n// >>> lst(array(1.0, 4.0, 9.0))\n// 98\n// >>> lst(array(1.0, 3.0, 5.0, 7.0))\n// 84\n// >>> lst(array(1.4, 4.2, 0.0))\n// 29\n// >>> lst(array(-2.4, 1.0, 1.0))\n// 6\nfunction sum_squares($lst) {\n    $sum = 0;\n    foreach ($lst as $num) {\n        $sum += pow(ceil($num), 2);\n    }\n    return $sum;\n}\n"], ["<?php\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter($txt) {\n    // Remove any trailing spaces from the input string\n    $txt = rtrim($txt);\n\n    // Check if the last character is an alphabetical character\n    if (ctype_alpha($txt[strlen($txt) - 1])) {\n        // Check if the last character is not part of a word\n        if ($txt[strlen($txt) - 2] == ' ') {\n            return true;\n        }\n    }\n\n    return false;\n}\n"], ["<?php\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange(array(1, 2, 4, 3, 5))\n// 3\n// >>> can_arrange(array(1, 2, 3))\n// -1\nfunction can_arrange($arr) {\n    $max_index = -1;\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i-1]) {\n            $max_index = $i-1;\n        }\n    }\n    return $max_index;\n}\n"], ["<?php\n// Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n// array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n// >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst) {\n    $largest_negative = null;\n    $smallest_positive = null;\n    foreach ($lst as $num) {\n        if ($num < 0 && ($largest_negative === null || $num > $largest_negative)) {\n            $largest_negative = $num;\n        } elseif ($num > 0 && ($smallest_positive === null || $num < $smallest_positive)) {\n            $smallest_positive = $num;\n        }\n    }\n    return array($largest_negative, $smallest_positive);\n}\n"], ["<?php\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return null if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// null\nfunction compare_one($a, $b) {\n    // Convert strings to floats\n    $a = str_replace(',', '.', $a);\n    $b = str_replace(',', '.', $b);\n    $a = floatval($a);\n    $b = floatval($b);\n\n    // Compare the values\n    if ($a > $b) {\n        return $a;\n    } elseif ($b > $a) {\n        return $b;\n    } else {\n        return null;\n    }\n}\n"], ["<?php\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even($n) {\n    // Check if n is divisible by 4\n    if ($n % 4 != 0) {\n        return false;\n    }\n    // If n is divisible by 4, then it can be written as the sum of exactly 4 positive even numbers\n    return true;\n}\n"], ["<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial($n) {\n    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return $result;\n}\n"], ["<?php\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor($a, $b) {\n    if ($b == 0) {\n        return $a;\n    } else {\n        return greatest_common_divisor($b, $a % $b);\n    }\n}\n\necho greatest_common_divisor(3, 5) . \"\\n\"; // Output: 1\necho greatest_common_divisor(25, 15) . \"\\n\"; // Output: 5"], ["<?php\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces($text) {\n    $text = trim($text); // remove leading/trailing spaces\n    $text = preg_replace('/\\s+/', ' ', $text); // replace multiple spaces with single space\n    $text = str_replace(' ', '_', $text); // replace spaces with underscores\n    $text = preg_replace('/-{2,}/', '-', $text); // replace multiple dashes with single dash\n    return $text;\n}\n\necho fix_spaces(\" Example\") . \"\\n\"; // \"Example\"\necho fix_spaces(\" Example 1\") . \"\\n\"; // \"Example_1\"\necho fix_spaces(\" Example 2\") . \"\\n\"; // \"_Example_2\"\necho fix_spaces(\" Example 3\") . \"\\n\"; // \"_Example-3\""], ["<?php\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check($file_name) {\n    // Check if there are more than three digits in the file's name.\n    if (preg_match('/\\d{4,}/', $file_name)) {\n        return \"No\";\n    }\n\n    // Check if the file's name contains exactly one dot.\n    if (substr_count($file_name, '.') != 1) {\n        return \"No\";\n    }\n\n    // Split the file's name into two substrings: the substring before the dot,\n    // and the substring after the dot.\n    $parts = explode('.', $file_name);\n    $before_dot = $parts[0];\n    $after_dot = $parts[1];\n\n    // Check if the substring before the dot is empty or does not start with a letter.\n    if (empty($before_dot) || !preg_match('/^[a-zA-Z]/', $before_dot)) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions.\n    $allowed_extensions = ['txt', 'exe', 'dll'];\n    if (!in_array($after_dot, $allowed_extensions)) {\n        return \"No\";\n    }\n\n    // If all conditions are met, return 'Yes'.\n    return \"Yes\";\n}\n"], ["<?php\n// \"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// array(1, 2, 3)\n// >>> lst\n// array()\n// >>> lst\n// array(-1, -5, 2, -1, -5)\nfunction sum_squares($lst) {\n    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } elseif ($i % 4 == 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}"], ["<?php\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence($sentence) {\n    $words = explode(\" \", $sentence);\n    $prime_words = array();\n    foreach ($words as $word) {\n        $length = strlen($word);\n        if (is_prime($length)) {\n            $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n}\n"], ["<?php\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify($x, $n) {\n    $x_parts = explode(\"/\", $x);\n    $n_parts = explode(\"/\", $n);\n    $x_numerator = $x_parts[0];\n    $x_denominator = $x_parts[1];\n    $n_numerator = $n_parts[0];\n    $n_denominator = $n_parts[1];\n    $result = ($x_numerator * $n_denominator) / ($x_denominator * $n_numerator);\n    return is_int($result);\n}\n"], ["<?php\n// Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points(array(1, 11, -1, -11, -12))\n// array(-1, -11, 1, -12, 11)\n// >>> order_by_points(array())\n// array()\nfunction order_by_points($nums) {\n    // Helper function to calculate the sum of digits of a number\n    function sum_digits($num) {\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n        }\n        return $sum;\n    }\n\n    // Sort the array based on the sum of digits\n    usort($nums, function($a, $b) {\n        $sum_a = sum_digits($a);\n        $sum_b = sum_digits($b);\n        if ($sum_a == $sum_b) {\n            return 0;\n        }\n        return ($sum_a < $sum_b) ? -1 : 1;\n    });\n\n    return $nums;\n}\n"], ["<?php\n// Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter(array(15, -73, 14, -15))\n// 1\n// >>> specialFilter(array(33, -2, -3, 45, 21, 109))\n// 2\nfunction specialFilter($nums) {\n    $count = 0;\n    foreach ($nums as $num) {\n        if ($num > 10 && abs($num) % 2 != 0 && abs($num) % 10 % 2 != 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n"], ["<?php\n// You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples($n) {\n    $a = array();\n    for ($i = 1; $i <= $n; $i++) {\n        $a[$i] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n - 2; $i++) {\n        for ($j = $i + 1; $j <= $n - 1; $j++) {\n            for ($k = $j + 1; $k <= $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n    return $count;\n}\n\necho get_max_triples(5);"], ["<?php\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $start = array_search($planet1, $planets);\n    $end = array_search($planet2, $planets);\n    if ($start === false || $end === false) {\n        return array();\n    }\n    $result = array();\n    for ($i = $start + 1; $i < $end; $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}"], ["<?php\n// Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\", \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach ($lst as $word) {\n        if (strlen($word) % 2 == 0) {\n            array_push($result, $word);\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));"], ["<?php\n// Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// array(\"a\", \"ab\", \"abc\")\nfunction all_prefixes($string) {\n    $prefixes = array();\n    $length = strlen($string);\n    for ($i = 1; $i <= $length; $i++) {\n        $prefixes[] = substr($string, 0, $i);\n    }\n    return $prefixes;\n}\n"], ["<?php\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y($n, $x, $y) {\n    if (gmp_prob_prime($n) == 2) {\n        return $x;\n    } else {\n        return $y;\n    }\n}\n\necho x_or_y(7, 34, 12) . \"\\n\";  // Output: 34\necho x_or_y(15, 8, 5) . \"\\n\";  // Output: 5"], ["<?php\n// Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference(array(1, 3, 2, 0))\n// 10\n// >>> double_the_difference(array(-1, -2, 0))\n// 0\n// >>> double_the_difference(array(9, -2))\n// 81\n// >>> double_the_difference(array(0))\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference($lst) {\n    $sum = 0;\n    foreach ($lst as $num) {\n        if (is_int($num) && $num % 2 != 0) {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n"], ["<?php\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1, 0, 0, 6)\nfunction compare($game, $guess) {\n    $result = array();\n    for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i]) {\n            array_push($result, 0);\n        } else {\n            array_push($result, abs($game[$i] - $guess[$i]));\n        }\n    }\n    return $result;\n}"], ["<?php\n// You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n// \"my_class.AA\"\nfunction Strongest_Extension($class_name, $extensions) {\n    $strength = array();\n    foreach ($extensions as $extension) {\n        $uppercase_count = preg_match_all('/[A-Z]/', $extension);\n        $lowercase_count = preg_match_all('/[a-z]/', $extension);\n        $strength[$extension] = $uppercase_count - $lowercase_count;\n    }\n    arsort($strength);\n    $strongest_extension = key($strength);\n    return $class_name . '.' . $strongest_extension;\n}\n"], ["<?php\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check($a, $b) {\n    // Concatenate the first word with itself to create a cyclic string\n    $cyclic_string = $a . $a;\n    \n    // Check if the second word is a substring in the cyclic string\n    if (strpos($cyclic_string, $b) !== false) {\n        return true;\n    }\n    \n    // If the second word is not a substring, check if any of its rotations are\n    for ($i = 0; $i < strlen($b); $i++) {\n        $rotated_word = substr($b, $i) . substr($b, 0, $i);\n        if (strpos($cyclic_string, $rotated_word) !== false) {\n            return true;\n        }\n    }\n    \n    // If none of the rotations are found, return false\n    return false;\n}\n"], ["<?php\n// Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// array(1, 1)\n// >>> even_odd_count(123)\n// array(1, 2)\nfunction even_odd_count($num) {\n    $even_count = 0;\n    $odd_count = 0;\n    $num = abs($num); // convert to positive number\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n        }\n        $num = floor($num / 10);\n    }\n    return array($even_count, $odd_count);\n}\n"], ["<?php\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    foreach ($roman_numerals as $roman => $value) {\n        while ($number >= $value) {\n            $result .= $roman;\n            $number -= $value;\n        }\n    }\n    return strtolower($result);\n}\n\necho int_to_mini_roman(19) . \"\\n\"; // Output: \"xix\"\necho int_to_mini_roman(152) . \"\\n\"; // Output: \"clii\"\necho int_to_mini_roman(426) . \"\\n\"; // Output: \"cdxxvi\""], ["<?php\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle($a, $b, $c) {\n    // Sort the sides in ascending order\n    $sides = array($a, $b, $c);\n    sort($sides);\n\n    // Check if the square of the longest side is equal to the sum of the squares\n    // of the other two sides\n    return (pow($sides[2], 2) == pow($sides[0], 2) + pow($sides[1], 2));\n}\n"], ["<?php\n// Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max(array(\"name\", \"of\", \"string\"))\n// \"string\"\n// >>> find_max(array(\"name\", \"enam\", \"game\"))\n// \"enam\"\n// >>> find_max(array(\"aaaaaaa\", \"bb\", \"cc\"))\n// \"aaaaaaa\"\nfunction find_max($words) {\n    $max_unique = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n        $unique_chars = count(array_unique(str_split($word)));\n        if ($unique_chars > $max_unique) {\n            $max_unique = $unique_chars;\n            $max_word = $word;\n        } elseif ($unique_chars == $max_unique && $word < $max_word) {\n            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n"], ["<?php\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// array(11, 4)\n// >>> eat(4, 8, 9)\n// array(12, 1)\n// >>> eat(1, 10, 10)\n// array(11, 0)\n// >>> eat(2, 11, 5)\n// array(7, 0)\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat($number, $need, $remaining) {\n    // Calculate the total number of carrots eaten after meals\n    $total = $number + $need;\n    \n    // Calculate the number of carrots left after meals\n    $left = $remaining - $need;\n    \n    // If there are not enough remaining carrots, eat all remaining carrots\n    if ($left < 0) {\n        $left = 0;\n    }\n    \n    // Return the result as an array\n    return array($total, $left);\n}"], ["<?php\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence($n) {\n    $sequence = \"\";\n    for ($i = 0; $i <= $n; $i++) {\n        $sequence .= $i . \" \";\n    }\n    return trim($sequence);\n}\n\necho string_sequence(0); // Output: \"0\"\necho string_sequence(5); // Output: \"0 1 2 3 4 5\""], ["<?php\n// Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i = 1; $i < count($operand); $i++) {\n        switch ($operator[$i-1]) {\n            case '+':\n                $result += $operand[$i];\n                break;\n            case '-':\n                $result -= $operand[$i];\n                break;\n            case '*':\n                $result *= $operand[$i];\n                break;\n            case '//':\n                $result = floor($result / $operand[$i]);\n                break;\n            case '**':\n                $result = pow($result, $operand[$i]);\n                break;\n        }\n    }\n    return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n$result = do_algebra($operator, $operand);\necho $result; // Output: 9"], ["<?php\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve($s) {\n    $letters = [];\n    $result = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n            $letters[] = $s[$i];\n        }\n    }\n    if (count($letters) == 0) {\n        return strrev($s);\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n            $result .= ctype_upper($s[$i]) ? strtolower($letters[count($letters) - 1]) : strtoupper($letters[count($letters) - 1]);\n            array_pop($letters);\n        } else {\n            $result .= $s[$i];\n        }\n    }\n    return $result;\n}\n\necho solve(\"1234\") . \"\\n\"; // Output: \"4321\"\necho solve(\"ab\") . \"\\n\"; // Output: \"AB\"\necho solve(\"#a@C\") . \"\\n\"; // Output: \"#A@c\""], ["<?php\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return null.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5($text) {\n    if (empty($text)) {\n        return null;\n    }\n    return md5($text);\n}\n"], ["<?php\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// array(2, 4, 6, 8)\n// >>> generate_integers(8, 2)\n// array(2, 4, 6, 8)\n// >>> generate_integers(10, 14)\n// array()\nfunction generate_integers($a, $b) {\n    $result = array();\n    for ($i = $a; $i <= $b; $i++) {\n        $digits = str_split(strval($i));\n        foreach ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                array_push($result, $digit);\n            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n"], ["<?php\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters($string) {\n    $string = strtolower($string); // convert string to lowercase\n    $char_array = str_split($string); // split string into an array of characters\n    $char_array = array_unique($char_array); // remove duplicates from array\n    return count($char_array); // return the count of unique characters\n}\n\necho count_distinct_characters(\"xyzXYZ\"); // output: 3\necho count_distinct_characters(\"Jerry\"); // output: 4"], ["<?php\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nfunction parse_music($music_string) {\n    $beats = array();\n    $notes = explode(' ', $music_string);\n    foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n                $beats[] = 4;\n                break;\n            case 'o|':\n                $beats[] = 2;\n                break;\n            case '.|':\n                $beats[] = 1;\n                break;\n        }\n    }\n    return $beats;\n}\n\n$music_string = \"o o| .| o| o| .| .| .| .| o o\";\n$beats = parse_music($music_string);\nprint_r($beats);"], ["<?php\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times($string, $substring) {\n    $count = 0;\n    $offset = 0;\n    while (($pos = strpos($string, $substring, $offset)) !== false) {\n        $count++;\n        $offset = $pos + 1;\n    }\n    return $count;\n}\n\necho how_many_times(\"\", \"a\"); // 0\necho how_many_times(\"aaa\", \"a\"); // 3\necho how_many_times(\"aaaa\", \"aa\"); // 3"], ["<?php\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers($numbers) {\n    $numbers_array = explode(\" \", $numbers);\n    $sorted_array = array();\n    foreach ($numbers_array as $number) {\n        switch ($number) {\n            case \"zero\":\n                $sorted_array[] = 0;\n                break;\n            case \"one\":\n                $sorted_array[] = 1;\n                break;\n            case \"two\":\n                $sorted_array[] = 2;\n                break;\n            case \"three\":\n                $sorted_array[] = 3;\n                break;\n            case \"four\":\n                $sorted_array[] = 4;\n                break;\n            case \"five\":\n                $sorted_array[] = 5;\n                break;\n            case \"six\":\n                $sorted_array[] = 6;\n                break;\n            case \"seven\":\n                $sorted_array[] = 7;\n                break;\n            case \"eight\":\n                $sorted_array[] = 8;\n                break;\n            case \"nine\":\n                $sorted_array[] = 9;\n                break;\n        }\n    }\n    sort($sorted_array);\n    $sorted_numbers = \"\";\n    foreach ($sorted_array as $number) {\n        switch ($number) {\n            case 0:\n                $sorted_numbers .= \"zero \";\n                break;\n            case 1:\n                $sorted_numbers .= \"one \";\n                break;\n            case 2:\n                $sorted_numbers .= \"two \";\n                break;\n            case 3:\n                $sorted_numbers .= \"three \";\n                break;\n            case 4:\n                $sorted_numbers .= \"four \";\n                break;\n            case 5:\n                $sorted_numbers .= \"five \";\n                break;\n            case 6:\n                $sorted_numbers .= \"six \";\n                break;\n            case 7:\n                $sorted_numbers .= \"seven \";\n                break;\n            case 8:\n                $sorted_numbers .= \"eight \";\n                break;\n            case 9:\n                $sorted_numbers .= \"nine \";\n                break;\n        }\n    }\n    return trim($sorted_numbers);\n}\n\necho sort_numbers(\"three one five\");"], ["<?php\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string) {\n    $groups = array();\n    $current_group = \"\";\n    $open_count = 0;\n\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\n        if ($char == \"(\") {\n            $open_count++;\n        } elseif ($char == \")\") {\n            $open_count--;\n        }\n\n        $current_group .= $char;\n\n        if ($open_count == 0) {\n            $groups[] = $current_group;\n            $current_group = \"\";\n        }\n    }\n\n    return $groups;\n}\n\n$paren_string = \"( ) (( )) (( )( ))\";\n$separated_groups = separate_paren_groups($paren_string);\nprint_r($separated_groups);"], ["<?php\n// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n// array(2.0, 2.2)\n// >>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n// array(2.0, 2.0)\nfunction find_closest_elements($numbers) {\n    $closest_distance = INF;\n    $closest_elements = array();\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $distance = abs($numbers[$i] - $numbers[$j]);\n            if ($distance < $closest_distance) {\n                $closest_distance = $distance;\n                $closest_elements = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($closest_elements);\n    return $closest_elements;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($numbers));\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\nprint_r(find_closest_elements($numbers));"], ["<?php\n// Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers) {\n    $min_val = min($numbers);\n    $max_val = max($numbers);\n    $range = $max_val - $min_val;\n    $rescaled_numbers = array();\n    foreach ($numbers as $num) {\n        $rescaled_numbers[] = ($num - $min_val) / $range;\n    }\n    return $rescaled_numbers;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n$rescaled_numbers = rescale_to_unit($numbers);\nprint_r($rescaled_numbers);"], ["<?php\n// Filter given array of any phpthon values only for integers\n// >>> filter_integers(array(\"a\", 3.14, 5))\n// array(5)\n// >>> filter_integers(array(1, 2, 3, \"abc\", array(), array()))\n// array(1, 2, 3)\nfunction filter_integers($values) {\n    $filtered = array();\n    foreach ($values as $value) {\n        if (is_int($value)) {\n            $filtered[] = $value;\n        }\n    }\n    return $filtered;\n}\n"], ["<?php\n// Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen($string) {\n    $count = 0;\n    while (isset($string[$count])) {\n        $count++;\n    }\n    return $count;\n}\n\necho strlen(\"\"); // Output: 0\necho strlen(\"abc\"); // Output: 3"], ["<?php\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor($n) {\n    for ($i = $n - 1; $i > 0; $i--) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n    }\n}\n\necho largest_divisor(15); // Output: 5\n"], ["<?php\n// Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n// array(2, 5, 7)\nfunction factorize($n) {\n    $factors = array();\n    $divisor = 2;\n    while ($n > 1) {\n        if ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /= $divisor;\n        } else {\n            $divisor++;\n        }\n    }\n    return $factors;\n}\n"], ["<?php\n// From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates(array(1, 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers) {\n    $result = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number, $result)) {\n            $result[] = $number;\n        }\n    }\n    return $result;\n}\n\n$numbers = array(1, 2, 3, 2, 4);\n$result = remove_duplicates($numbers);\nprint_r($result);"], ["<?php\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case($string) {\n    $flipped_string = \"\";\n    for ($i = 0; $i < strlen($string); $i++) {\n        $char = substr($string, $i, 1);\n        if (ctype_upper($char)) {\n            $flipped_string .= strtolower($char);\n        } elseif (ctype_lower($char)) {\n            $flipped_string .= strtoupper($char);\n        } else {\n            $flipped_string .= $char;\n        }\n    }\n    return $flipped_string;\n}\n\necho flip_case(\"Hello\"); // Output: \"hELLO\""], ["<?php\n// Concatenate array of strings into a single string\n// >>> concatenate(array())\n// \"\"\n// >>> concatenate(array(\"a\", \"b\", \"c\"))\n// \"abc\"\nfunction concatenate($strings) {\n    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n"], ["<?php\n// Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix(array(), \"a\")\n// array()\n// >>> filter_by_prefix(array(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"array\")\nfunction filter_by_prefix($strings, $prefix) {\n    $filtered_strings = array();\n    foreach ($strings as $string) {\n        if (strpos($string, $prefix) === 0) {\n            $filtered_strings[] = $string;\n        }\n    }\n    return $filtered_strings;\n}\n"], ["<?php\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n    return $number - floor($number);\n}\n\necho truncate_number(3.5); // Output: 0.5"], ["<?php\n// Return only positive numbers in the array.\n// >>> get_positive(array(-1, 2, -4, 5, 6))\n// array(2, 5, 6)\n// >>> get_positive(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n// array(5, 3, 2, 3, 9, 123, 1)\nfunction get_positive($l) {\n    $result = array();\n    foreach ($l as $num) {\n        if ($num > 0) {\n            array_push($result, $num);\n        }\n    }\n    return $result;\n}\n"], ["<?php\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime($n) {\n    if ($n <= 1) {\n        return false;\n    }\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["<?php\n// This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third(array(1, 2, 3))\n// array(1, 2, 3)\n// >>> sort_third(array(5, 6, 3, 4, 8, 9, 2))\n// array(2, 6, 3, 4, 8, 9, 5)\nfunction sort_third($l) {\n    $l_prime = $l;\n    $third_values = array();\n    for ($i = 0; $i < count($l); $i++) {\n        if (($i + 1) % 3 == 0) {\n            array_push($third_values, $l[$i]);\n        }\n    }\n    sort($third_values);\n    $j = 0;\n    for ($i = 0; $i < count($l); $i++) {\n        if (($i + 1) % 3 == 0) {\n            $l_prime[$i] = $third_values[$j];\n            $j++;\n        }\n    }\n    return $l_prime;\n}\n"], ["<?php\n// Return sorted unique elements in an array\n// >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// array(0, 2, 3, 5, 9, 123)\nfunction unique($l) {\n  sort($l);\n  return array_values(array_unique($l));\n}\n\n$arr = array(5, 3, 5, 2, 3, 3, 9, 0, 123);\nprint_r(unique($arr));"], ["<?php\n// Return maximum element in the array.\n// >>> max_element(array(1, 2, 3))\n// 3\n// >>> max_element(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n// 123\nfunction max_element($l) {\n    return max($l);\n}\n\necho max_element(array(1, 2, 3)); // Output: 3\necho max_element(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)); // Output: 123"], ["<?php\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz($n) {\n    $count = 0;\n    for ($i = 1; $i < $n; $i++) {\n        if ($i % 11 == 0 || $i % 13 == 0) {\n            $count += substr_count(strval($i), '7');\n        }\n    }\n    return $count;\n}\n\necho fizz_buzz(50) . \"\\n\";  // Output: 0\necho fizz_buzz(78) . \"\\n\";  // Output: 2\necho fizz_buzz(79) . \"\\n\";  // Output: 3"], ["<?php\n// This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even(array(1, 2, 3))\n// array(1, 2, 3)\n// >>> sort_even(array(5, 6, 3, 4))\n// array(3, 6, 5, 4)\nfunction sort_even($l) {\n    $even_values = array();\n    for ($i = 0; $i < count($l); $i += 2) {\n        array_push($even_values, $l[$i]);\n    }\n    sort($even_values);\n    $result = array();\n    for ($i = 0; $i < count($l); $i++) {\n        if ($i % 2 == 0) {\n            array_push($result, $l[$i]);\n        } else {\n            array_push($result, $even_values[$i/2]);\n        }\n    }\n    return $result;\n}\n"], ["<?php\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib($n) {\n    $fib = [0, 1];\n    $i = 2;\n    while (count($fib) < $n) {\n        $fib[$i] = $fib[$i-1] + $fib[$i-2];\n        $i++;\n    }\n    $prime_fib = [];\n    foreach ($fib as $num) {\n        if (is_prime($num)) {\n            $prime_fib[] = $num;\n        }\n    }\n    return $prime_fib[$n-1];\n}\n"], ["<?php\n// You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero(array(1, 2, 3))\n// false\n// >>> below_zero(array(1, 2, -4, 5))\n// true\nfunction below_zero($operations) {\n    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"], ["<?php\n// triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero(array(1, 3, 5, 0))\n// false\n// >>> triples_sum_to_zero(array(1, 3, -2, 1))\n// true\n// >>> triples_sum_to_zero(array(1, 2, 3, 7))\n// false\n// >>> triples_sum_to_zero(array(2, 4, -5, 3, 9, 7))\n// true\n// >>> triples_sum_to_zero(array(1))\n// false\nfunction triples_sum_to_zero($l) {\n    // Sort the array in ascending order.\n    sort($l);\n\n    // Iterate through the array, checking if there are three distinct\n    // elements that sum to zero.\n    for ($i = 0; $i < count($l) - 2; $i++) {\n        // If the current element is the same as the previous one, skip it.\n        if ($i > 0 && $l[$i] == $l[$i - 1]) {\n            continue;\n        }\n\n        // Set two pointers, one at the beginning of the array and one at the\n        // end.\n        $j = $i + 1;\n        $k = count($l) - 1;\n\n        // Iterate through the remaining elements, checking if there are two\n        // elements that sum to the negative of the current element.\n        while ($j < $k) {\n            // If the sum of the current elements is zero, return true.\n            if ($l[$i] + $l[$j] + $l[$k] == 0) {\n                return true;\n            }\n\n            // If the sum is too small, move the left pointer to the right.\n            if ($l[$i] + $l[$j] + $l[$k] < 0) {\n                $j++;\n            }\n\n            // If the sum is too large, move the right pointer to the left.\n            else {\n                $k--;\n            }\n        }\n    }\n\n    // If no three distinct elements sum to zero, return false.\n    return false;\n}\n"], ["<?php\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision($n) {\n    return $n;\n}\n"], ["<?php\n// Return array with elements incremented by 1.\n// >>> incr_list(array(1, 2, 3))\n// array(2, 3, 4)\n// >>> incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n// array(6, 4, 6, 3, 4, 4, 10, 1, 124)\nfunction incr_list($l) {\n    $result = array();\n    foreach ($l as $item) {\n        array_push($result, $item + 1);\n    }\n    return $result;\n}\n"], ["<?php\n// pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero(array(1, 3, 5, 0))\n// false\n// >>> pairs_sum_to_zero(array(1, 3, -2, 1))\n// false\n// >>> pairs_sum_to_zero(array(1, 2, 3, 7))\n// false\n// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))\n// true\n// >>> pairs_sum_to_zero(array(1))\n// false\nfunction pairs_sum_to_zero($l) {\n    // create an empty set to store the seen elements\n    $seen = array();\n    // iterate over the array\n    foreach ($l as $num) {\n        // check if the negative of the current number has been seen\n        if (in_array(-$num, $seen)) {\n            return true;\n        }\n        // add the current number to the set of seen elements\n        $seen[] = $num;\n    }\n    // if no pairs sum to zero were found, return false\n    return false;\n}\n"], ["<?php\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base($x, $base) {\n    $result = \"\";\n    while ($x > 0) {\n        $remainder = $x % $base;\n        $result = $remainder . $result;\n        $x = floor($x / $base);\n    }\n    return $result;\n}\n"], ["<?php\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area($a, $h) {\n    return ($a * $h) / 2;\n}\n\necho triangle_area(5, 3);"], ["<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return $n == 2 ? 2 : 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $temp = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $temp;\n    }\n    return $d;\n}\n\necho fib4(5) . \"\\n\"; // Output: 4\necho fib4(6) . \"\\n\"; // Output: 8\necho fib4(7) . \"\\n\"; // Output: 14"], ["<?php\n// Return median of elements in the array l.\n// >>> median(array(3, 1, 2, 4, 5))\n// 3\n// >>> median(array(-10, 4, 6, 1000, 10, 20))\n// 15.0\nfunction median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n/2 - 1] + $l[$n/2]) / 2;\n    } else {\n        return $l[floor($n/2)];\n    }\n}\n\necho median(array(3, 1, 2, 4, 5)) . \"\\n\";\necho median(array(-10, 4, 6, 1000, 10, 20)) . \"\\n\";"], ["<?php\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome($text) {\n    $reversed = strrev($text);\n    if ($text == $reversed) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"], ["<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    return pow(2, $n) % $p;\n}\n\necho modp(3, 5) . \"\\n\"; // Output: 3\necho modp(1101, 101) . \"\\n\"; // Output: 2\necho modp(0, 101) . \"\\n\"; // Output: 1\necho modp(3, 11) . \"\\n\"; // Output: 8\necho modp(100, 101) . \"\\n\"; // Output: 1"], ["<?php\n// For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation(array(1.0, 2.0, 3.0, 4.0))\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean = array_sum($numbers) / count($numbers);\n    $deviations = array_map(function($x) use ($mean) {\n        return abs($x - $mean);\n    }, $numbers);\n    $mad = array_sum($deviations) / count($deviations);\n    return $mad;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0);\n$mad = mean_absolute_deviation($numbers);\necho $mad;"], ["<?php\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels($text) {\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\");\n    $result = str_replace($vowels, \"\", $text);\n    return $result;\n}\n\necho remove_vowels(\"\"); // \"\"\necho remove_vowels(\"abcdef\"); // \"bcdf\"\necho remove_vowels(\"aaaaa\"); // \"\"\necho remove_vowels(\"aaBAA\"); // \"B\"\necho remove_vowels(\"zbcd\"); // \"zbcd\""], ["<?php\n// Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold(array(1, 2, 4, 10), 100)\n// true\n// >>> below_threshold(array(1, 20, 4, 10), 5)\n// false\nfunction below_threshold($l, $t) {\n    foreach ($l as $num) {\n        if ($num >= $t) {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["<?php\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add($x, $y) {\n  return $x + $y;\n}\n"], ["<?php\n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars($s0, $s1) {\n    $chars0 = count_chars($s0, 1);\n    $chars1 = count_chars($s1, 1);\n    return $chars0 == $chars1;\n}\n"], ["<?php\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib($n) {\n    if ($n <= 1) {\n        return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}\n\necho fib(10) . \"\\n\"; // Output: 55\necho fib(1) . \"\\n\"; // Output: 1\necho fib(8) . \"\\n\"; // Output: 21"], ["<?php\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets) {\n    $stack = array();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n            array_push($stack, \"<\");\n        } else {\n            if (empty($stack)) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n"], ["<?php\n// Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic(array(1, 2, 4, 20))\n// true\n// >>> monotonic(array(1, 20, 4, 10))\n// false\n// >>> monotonic(array(4, 1, 0, -10))\n// true\nfunction monotonic($l) {\n    $increasing = true;\n    $decreasing = true;\n    for ($i = 0; $i < count($l) - 1; $i++) {\n        if ($l[$i] > $l[$i + 1]) {\n            $increasing = false;\n        }\n        if ($l[$i] < $l[$i + 1]) {\n            $decreasing = false;\n        }\n    }\n    return $increasing || $decreasing;\n}\n"], ["<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n// >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1, $l2) {\n    $common = array_intersect($l1, $l2);\n    sort($common);\n    return array_unique($common);\n}\n\n$result1 = common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121));\nprint_r($result1);\n\n$result2 = common(array(5, 3, 2, 8), array(3, 2));\nprint_r($result2);"], ["<?php\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(13195); // Output: 29\necho largest_prime_factor(2048); // Output: 2"], ["<?php\n// Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse(array(), 4)\n// array()\n// >>> intersperse(array(1, 2, 3), 4)\n// array(1, 4, 2, 4, 3)\nfunction intersperse($numbers, $delimeter) {\n    $result = array();\n    foreach ($numbers as $number) {\n        $result[] = $number;\n        $result[] = $delimeter;\n    }\n    array_pop($result); // remove the last delimeter\n    return $result;\n}\n"], ["<?php\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n($n) {\n    return ($n * ($n + 1)) / 2;\n}\n\necho sum_to_n(30) . \"\\n\"; // Output: 465\necho sum_to_n(100) . \"\\n\"; // Output: 5050\necho sum_to_n(5) . \"\\n\"; // Output: 15\necho sum_to_n(10) . \"\\n\"; // Output: 55\necho sum_to_n(1) . \"\\n\"; // Output: 1"], ["<?php\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets) {\n    $stack = array();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n            array_push($stack, \"(\");\n        } else if ($brackets[$i] == \")\") {\n            if (empty($stack)) {\n                return false;\n            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n}\n"], ["<?php\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative(array(3, 1, 2, 4, 5))\n// array(1, 4, 12, 20)\n// >>> derivative(array(1, 2, 3))\n// array(2, 6)\nfunction derivative($xs) {\n    $result = array();\n    for ($i = 1; $i < count($xs); $i++) {\n        $result[] = $i * $xs[$i];\n    }\n    return $result;\n}\n"], ["<?php\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib($n) {\n    if ($n == 0) {\n        return 0;\n    } elseif ($n == 1) {\n        return 0;\n    } elseif ($n == 2) {\n        return 1;\n    } else {\n        return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n    }\n}\n"], ["<?php\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count($s) {\n    $vowels = array('a', 'e', 'i', 'o', 'u', 'y');\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (in_array(strtolower($s[$i]), $vowels)) {\n            $count++;\n        }\n    }\n    return $count;\n}\n"], ["<?php\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n    $digits = str_split(strval($x));\n    $num_digits = count($digits);\n    if ($shift > $num_digits) {\n        $shift = $num_digits;\n    }\n    $shifted_digits = array_slice($digits, -$shift);\n    $remaining_digits = array_slice($digits, 0, $num_digits - $shift);\n    $result = array_merge($shifted_digits, $remaining_digits);\n    return implode(\"\", $result);\n}\n\necho circular_shift(12, 1); // Output: \"21\"\necho circular_shift(12, 2); // Output: \"12\""], ["<?php\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum($s) {\n    $sum = 0;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_upper($s[$i])) {\n            $sum += ord($s[$i]);\n        }\n    }\n    return $sum;\n}\n"], ["<?php\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution($s, $n) {\n    $fruit_count = explode(\" and \", $s);\n    $apples = intval($fruit_count[0]);\n    $oranges = intval($fruit_count[1]);\n    $total_fruits = $apples + $oranges;\n    $mango_fruits = $n - $total_fruits;\n    return $mango_fruits;\n}\n\necho fruit_distribution(\"5 apples and 6 oranges\", 19); // Output: 8\necho fruit_distribution(\"0 apples and 1 oranges\", 3); // Output: 2\necho fruit_distribution(\"2 apples and 3 oranges\", 100); // Output: 95\necho fruit_distribution(\"100 apples and 1 oranges\", 120); // Output: 19"], ["<?php\n// \"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck(array(4, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck(array(1, 2, 3))\n// array(2, 1)\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck(array())\n// array()\n// Example 4:\n// >>> pluck(array(5, 0, 3, 0, 4, 2))\n// array(0, 1)\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even_values = array_filter($arr, function($val) {\n        return $val % 2 == 0;\n    });\n    if (empty($even_values)) {\n        return [];\n    }\n    $min_even_val = min($even_values);\n    $min_even_index = array_search($min_even_val, $arr);\n    return [$min_even_val, $min_even_index];\n}"], ["<?php\n// You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search(array(4, 1, 2, 2, 3, 1))\n// 2\n// >>> search(array(1, 2, 2, 3, 3, 3, 4, 4, 4))\n// 3\n// >>> search(array(5, 5, 4, 4, 4))\n// -1\nfunction search($lst) {\n    $counts = array_count_values($lst);\n    rsort($counts);\n    foreach ($counts as $num => $count) {\n        if ($num <= $count) {\n            return $num;\n        }\n    }\n    return -1;\n}\n\necho search(array(4, 1, 2, 2, 3, 1)); // Output: 2\necho search(array(1, 2, 2, 3, 3, 3, 4, 4, 4)); // Output: 3\necho search(array(5, 5, 4, 4, 4)); // Output: -1"], ["<?php\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string) {\n    $paren_groups = explode(\" \", $paren_string);\n    $max_depths = array();\n    foreach ($paren_groups as $group) {\n        $depth = 0;\n        $max_depth = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == \"(\") {\n                $depth++;\n                if ($depth > $max_depth) {\n                    $max_depth = $depth;\n                }\n            } else if ($group[$i] == \")\") {\n                $depth--;\n            }\n        }\n        $max_depths[] = $max_depth;\n    }\n    return $max_depths;\n}\n\n$result = parse_nested_parens(\"(()()) ((())) () ((())()())\");\nprint_r($result);"], ["<?php\n// Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list(array(1, 2, 3, 4))\n// array(1, 4, 2, 3)\n// >>> strange_sort_list(array(5, 5, 5, 5))\n// array(5, 5, 5, 5)\n// >>> strange_sort_list(array())\n// array()\nfunction strange_sort_list($lst) {\n    $result = array();\n    while (count($lst) > 0) {\n        $result[] = min($lst);\n        $result[] = max($lst);\n        array_splice($lst, array_search(min($lst), $lst), 1);\n        array_splice($lst, array_search(max($lst), $lst), 1);\n    }\n    return $result;\n}\n"], ["<?php\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area($a, $b, $c) {\n    if ($a + $b > $c && $a + $c > $b && $b + $c > $a) {\n        $s = ($a + $b + $c) / 2;\n        $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n        return round($area, 2);\n    } else {\n        return -1;\n    }\n}\n\necho triangle_area(3, 4, 5) . \"\\n\"; // Output: 6.0\necho triangle_area(1, 2, 10) . \"\\n\"; // Output: -1"], ["<?php\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly(array(1, 2), 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly(array(3, 2, 3), 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly(array(3, 2, 3), 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly(array(3), 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly($q, $w) {\n    // Check if the array is balanced (palindromic)\n    $reversed_q = array_reverse($q);\n    if ($q != $reversed_q) {\n        return false;\n    }\n    // Check if the sum of the elements is less than or equal to the maximum possible weight\n    $sum = array_sum($q);\n    if ($sum > $w) {\n        return false;\n    }\n    return true;\n}\n"], ["<?php\n// Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change(array(1, 2, 3, 5, 4, 7, 9, 6))\n// 4\n// >>> smallest_change(array(1, 2, 3, 4, 3, 2, 2))\n// 1\n// >>> smallest_change(array(1, 2, 3, 2, 1))\n// 0\nfunction smallest_change($arr) {\n    $n = count($arr);\n    $count = 0;\n    for ($i = 0; $i < $n / 2; $i++) {\n        if ($arr[$i] != $arr[$n - $i - 1]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n"], ["<?php\n// Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match(array(), array())\n// array()\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hI\", \"Hi\"))\n// array(\"hI\", \"Hi\")\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hi\", \"hi\", \"admin\", \"project\"))\n// array(\"hi\", \"admin\")\n// >>> total_match(array(\"hi\", \"admin\"), array(\"hI\", \"hi\", \"hi\"))\n// array(\"hI\", \"hi\", \"hi\")\n// >>> total_match(array(\"4\"), array(\"1\", \"2\", \"3\", \"4\", \"5\"))\n// array(\"4\")\nfunction total_match($lst1, $lst2) {\n    $total1 = array_reduce($lst1, function($acc, $str) {\n        return $acc + strlen($str);\n    }, 0);\n    $total2 = array_reduce($lst2, function($acc, $str) {\n        return $acc + strlen($str);\n    }, 0);\n    if ($total1 < $total2) {\n        return $lst1;\n    } elseif ($total1 > $total2) {\n        return $lst2;\n    } else {\n        return $lst1;\n    }\n}"], ["<?php\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime($a) {\n    // Check if the number is less than 100\n    if ($a >= 100) {\n        return false;\n    }\n\n    // Check if the number is a multiple of 3 prime numbers\n    $primes = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29);\n    foreach ($primes as $prime) {\n        if ($a % $prime == 0) {\n            $a /= $prime;\n        }\n    }\n    return $a == 1;\n}\n"], ["<?php\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n    if ($n == 1) {\n        return $x == 1;\n    }\n    $power = 1;\n    while ($power < $x) {\n        $power *= $n;\n    }\n    return $power == $x;\n}\n"], ["<?php\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n    $cube_root = round(pow(abs($a), 1/3));\n    return pow($cube_root, 3) == $a;\n}\n"], ["<?php\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key($num) {\n    $primes = array(2, 3, 5, 7, 11, 13);\n    $count = 0;\n    for ($i = 0; $i < strlen($num); $i++) {\n        $digit = hexdec($num[$i]);\n        if (in_array($digit, $primes)) {\n            $count++;\n        }\n    }\n    return $count;\n}"], ["<?php\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary($decimal) {\n    $binary = decbin($decimal);\n    return \"db\" . $binary . \"db\";\n}"], ["<?php\n// Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring(array(), \"a\")\n// array()\n// >>> filter_by_substring(array(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"bacd\", \"array\")\nfunction filter_by_substring($strings, $substring) {\n    $filtered_strings = array();\n    foreach ($strings as $string) {\n        if (strpos($string, $substring) !== false) {\n            array_push($filtered_strings, $string);\n        }\n    }\n    return $filtered_strings;\n}\n"], ["<?php\n// You are given a string s.\n// Your task is to check if the string is happhp or not.\n// A string is happhp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy($s) {\n    if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i < strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i+1] || $s[$i] == $s[$i+2] || $s[$i+1] == $s[$i+2]) {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["<?php\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation(array(4.0, 3, 1.7, 2, 3.5))\n// array(\"A+\", \"B\", \"C-\", \"C\", \"A-\")\nfunction numerical_letter_grade($grades) {\n    $letter_grades = array();\n    foreach ($grades as $grade) {\n        if ($grade == 4.0) {\n            $letter_grades[] = \"A+\";\n        } elseif ($grade > 3.7) {\n            $letter_grades[] = \"A\";\n        } elseif ($grade > 3.3) {\n            $letter_grades[] = \"A-\";\n        } elseif ($grade > 3.0) {\n            $letter_grades[] = \"B+\";\n        } elseif ($grade > 2.7) {\n            $letter_grades[] = \"B\";\n        } elseif ($grade > 2.3) {\n            $letter_grades[] = \"B-\";\n        } elseif ($grade > 2.0) {\n            $letter_grades[] = \"C+\";\n        } elseif ($grade > 1.7) {\n            $letter_grades[] = \"C\";\n        } elseif ($grade > 1.3) {\n            $letter_grades[] = \"C-\";\n        } elseif ($grade > 1.0) {\n            $letter_grades[] = \"D+\";\n        } elseif ($grade > 0.7) {\n            $letter_grades[] = \"D\";\n        } elseif ($grade > 0.0) {\n            $letter_grades[] = \"D-\";\n        } else {\n            $letter_grades[] = \"E\";\n        }\n    }\n    return $letter_grades;\n}\n\n$grades = array(4.0, 3, 1.7, 2, 3.5);\n$letter_grades = numerical_letter_grade($grades);\nprint_r($letter_grades);"], ["<?php\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length($string) {\n    // Get the length of the string\n    $length = strlen($string);\n\n    // Check if the length is less than 2 (since prime numbers start from 2)\n    if ($length < 2) {\n        return false;\n    }\n\n    // Check if the length is divisible by any number between 2 and the square root of the length\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return false;\n        }\n    }\n\n    // If the length is not divisible by any number, it is a prime number\n    return true;\n}\n"], ["<?php\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends($n) {\n    if ($n == 1) {\n        return 1;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i == 1 || $i == $n) {\n            $count += pow(2, $n - 1);\n        } else {\n            $count += pow(2, $n - 2);\n        }\n    }\n    return $count;\n}\n"], ["<?php\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve($N) {\n    $sum = 0;\n    while ($N > 0) {\n        $sum += $N % 10;\n        $N = floor($N / 10);\n    }\n    return decbin($sum);\n}"], ["<?php\n// Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add(array(4, 2, 6, 7))\n// 2\nfunction add($lst) {\n    $sum = 0;\n    for ($i = 1; $i < count($lst); $i += 2) {\n        if ($lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n"], ["<?php\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle($s) {\n    $words = explode(\" \", $s);\n    $new_words = array();\n    foreach ($words as $word) {\n        $chars = str_split($word);\n        sort($chars);\n        $new_word = implode(\"\", $chars);\n        array_push($new_words, $new_word);\n    }\n    return implode(\" \", $new_words);\n}\n\necho anti_shuffle(\"Hello World!!!\") . \"\\n\"; // Output: \"Hello !!!Wdlor\""], ["<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\nfunction get_row($lst, $x) {\n    $coordinates = array();\n    foreach ($lst as $row_index => $row) {\n        foreach ($row as $col_index => $value) {\n            if ($value == $x) {\n                $coordinates[] = array($row_index, $col_index);\n            }\n        }\n    }\n    usort($coordinates, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $coordinates;\n}"], ["<?php\n// Given an array of non-negative integers, return a cophp of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array(array())\n// array()\n// >>> sort_array(array(5))\n// array(5)\n// >>> sort_array(array(2, 4, 3, 0, 1, 5))\n// array(0, 1, 2, 3, 4, 5)\n// >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n// array(6, 5, 4, 3, 2, 1, 0)\nfunction sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n    $sorted_array = $array;\n    if ($sum % 2 == 0) {\n        rsort($sorted_array);\n    } else {\n        sort($sorted_array);\n    }\n    return $sorted_array;\n}"], ["<?php\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt($s) {\n    $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    $rotated_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n    $encrypted_string = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted_string .= $rotated_alphabet[$index];\n    }\n    return $encrypted_string;\n}\n"], ["<?php\n// For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product(array())\n// array(0, 1)\n// >>> sum_product(array(1, 2, 3, 4))\n// array(10, 24)\nfunction sum_product($numbers) {\n    $sum = 0;\n    $product = 1;\n    foreach ($numbers as $number) {\n        $sum += $number;\n        $product *= $number;\n    }\n    return array($sum, $product);\n}"], ["<?php\n// You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return null if there is no such element.\n// >>> next_smallest(array(1, 2, 3, 4, 5))\n// 2\n// >>> next_smallest(array(5, 1, 4, 3, 2))\n// 2\n// >>> next_smallest(array())\n// null\n// >>> next_smallest(array(1, 1))\n// null\nfunction next_smallest($lst) {\n    // Sort the array in ascending order\n    sort($lst);\n\n    // Check if there are at least 2 elements in the array\n    if (count($lst) < 2) {\n        return null;\n    }\n\n    // Return the 2nd smallest element\n    return $lst[1];\n}\n"], ["<?php\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored($S) {\n    $boredoms = 0;\n    $sentences = explode('.', $S);\n    foreach ($sentences as $sentence) {\n        $sentence = trim($sentence);\n        if (strpos($sentence, 'I') === 0) {\n            $boredoms++;\n        }\n    }\n    return $boredoms;\n}\n"], ["<?php\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z) {\n    // Check if all numbers are integers.\n    if (!is_int($x) || !is_int($y) || !is_int($z)) {\n        return false;\n    }\n    // Check if one of the numbers is equal to the sum of the other two.\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n        return true;\n    }\n    return false;\n}\n"], ["<?php\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode($message) {\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $encoded_message = \"\";\n    for ($i = 0; $i < strlen($message); $i++) {\n        $char = strtolower($message[$i]);\n        if (ctype_alpha($char)) {\n            if (in_array($char, $vowels)) {\n                $index = array_search($char, $vowels);\n                $new_index = ($index + 2) % count($vowels);\n                $encoded_char = $vowels[$new_index];\n            } else {\n                $encoded_char = $char;\n            }\n            if ($message[$i] === strtoupper($message[$i])) {\n                $encoded_char = strtoupper($encoded_char);\n            }\n        } else {\n            $encoded_char = $char;\n        }\n        $encoded_message .= $encoded_char;\n    }\n    return $encoded_message;\n}\n\necho encode(\"test\") . \"\\n\"; // Output: \"TGST\"\necho encode(\"This is a message\") . \"\\n\"; // Output: \"tHKS KS C MGSSCGG\""], ["<?php\n// You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd(array(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))\n// 10\n// >>> skjkasdkd(array(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))\n// 25\n// >>> skjkasdkd(array(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))\n// 13\n// >>> skjkasdkd(array(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))\n// 11\n// >>> skjkasdkd(array(0, 81, 12, 3, 1, 21))\n// 3\n// >>> skjkasdkd(array(0, 8, 1, 2, 1, 7))\n// 7\nfunction skjkasdkd($lst) {\n    $max_prime = 0;\n    foreach ($lst as $num) {\n        if (is_prime($num) && $num > $max_prime) {\n            $max_prime = $num;\n        }\n    }\n    return array_sum(str_split(strval($max_prime)));\n}\n"], ["<?php\n// Given an array, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given array is empty.\n// Examples:\n// >>> check_dict_case(array(\"a\" => \"apple\", \"b\" => \"banana\"))\n// true\n// >>> check_dict_case(array(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n// false\n// >>> check_dict_case(array(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n// false\n// >>> check_dict_case(array(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n// false\n// >>> check_dict_case(array(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n// true\nfunction check_dict_case($dict) {\n    if (empty($dict)) {\n        return false;\n    }\n    $lower_case = true;\n    $upper_case = true;\n    foreach ($dict as $key => $value) {\n        if (!is_string($key)) {\n            return false;\n        }\n        if (!ctype_lower($key)) {\n            $lower_case = false;\n        }\n        if (!ctype_upper($key)) {\n            $upper_case = false;\n        }\n    }\n    return $lower_case || $upper_case;\n}"], ["<?php\n// Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// array(2, 3)\n// >>> count_up_to(11)\n// array(2, 3, 5, 7)\n// >>> count_up_to(0)\n// array()\n// >>> count_up_to(20)\n// array(2, 3, 5, 7, 11, 13, 17, 19)\n// >>> count_up_to(1)\n// array()\n// >>> count_up_to(18)\n// array(2, 3, 5, 7, 11, 13, 17)\nfunction count_up_to($n) {\n    $primes = array();\n    for ($i = 2; $i < $n; $i++) {\n        $is_prime = true;\n        for ($j = 2; $j < $i; $j++) {\n            if ($i % $j == 0) {\n                $is_prime = false;\n                break;\n            }\n        }\n        if ($is_prime) {\n            array_push($primes, $i);\n        }\n    }\n    return $primes;\n}"], ["<?php\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply($a, $b) {\n  return ($a % 10) * ($b % 10);\n}\n"], ["<?php\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper($s) {\n    $count = 0;\n    for ($i = 0; $i < strlen($s); $i += 2) {\n        if (ctype_upper($s[$i]) && in_array(strtolower($s[$i]), ['a', 'e', 'i', 'o', 'u'])) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho count_upper(\"aBCdEf\") . \"\\n\"; // Output: 1\necho count_upper(\"abcdefg\") . \"\\n\"; // Output: 0\necho count_upper(\"dBBE\") . \"\\n\"; // Output: 0"], ["<?php\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer($value) {\n    // Convert the value to a float\n    $float_value = floatval($value);\n\n    // Round the float value to the nearest integer\n    $rounded_value = round($float_value);\n\n    // If the rounded value is equidistant from two integers, round it away from zero\n    if ($rounded_value - $float_value == 0.5) {\n        if ($float_value > 0) {\n            $rounded_value = ceil($float_value);\n        } else {\n            $rounded_value = floor($float_value);\n        }\n    }\n\n    // Return the rounded value as an integer\n    return intval($rounded_value);\n}\n"], ["<?php\n// From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max(array(1, 2, 3, 2, 3, 4, 2))\n// array(1, 2, 3, 3, 3, 4, 4)\nfunction rolling_max($numbers) {\n    $max_values = array();\n    $max_so_far = PHP_INT_MIN;\n    foreach ($numbers as $number) {\n        $max_so_far = max($max_so_far, $number);\n        array_push($max_values, $max_so_far);\n    }\n    return $max_values;\n}\n\n$numbers = array(1, 2, 3, 2, 3, 4, 2);\n$max_values = rolling_max($numbers);\nprint_r($max_values);"]]