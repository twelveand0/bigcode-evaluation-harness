[["import std.math;\n/*\n Check if in given array of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nfalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\ntrue\n*/\nbool has_close_elements(float[] numbers, float threshold)\n{\n    for (int i = 0; i < numbers.length; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            if (abs(numbers[i] - numbers[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"], ["import std.math;\n/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in an array, where element at index\ni represents the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3L)\n[3L, 5L, 7L]\n*/\nlong[] make_a_pile(long n)\n{\n    long[] pile = new long[n];\n    long stones = n;\n    for(long i = 0; i < n; i++)\n    {\n        pile[i] = stones;\n        if(stones % 2 == 0)\n        {\n            stones += 2;\n        }\n        else\n        {\n            stones += 2;\n        }\n    }\n    return pile;\n}\n"], ["import std.math;\n/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\n>>> words_string(\"Hi, my name is John\")\n[\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>>> words_string(\"One, two, three, four, five, six\")\n[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n*/\nstring[] words_string(string s)\n{\n    string[] words;\n    int i = 0;\n    int j = 0;\n    int len = s.length;\n    while (i < len)\n    {\n        while (i < len && (s[i] == ' ' || s[i] == ','))\n        {\n            i++;\n        }\n        j = i;\n        while (j < len && s[j] != ' ' && s[j] != ',')\n        {\n            j++;\n        }\n        if (i < len)\n        {\n            words.push_back(s.substr(i, j - i));\n        }\n        i = j;\n    }\n    return words;\n}\n"], ["import std.math;\n/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\nFor example:\n>>> choose_num(12L, 15L)\n14L\n>>> choose_num(13L, 12L)\n-1L\n*/\nlong choose_num(long x, long y)\n{\n    long result = -1;\n    for(long i = y; i >= x; i--)\n    {\n        if(i % 2 == 0)\n        {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n"], ["import std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \nelements that hasn't any even digit.\nNote: Returned array should be sorted in increasing order.\nFor example:\n>>> unique_digits([15L, 33L, 1422L, 1L])\n[1L, 15L, 33L]\n>>> unique_digits([152L, 323L, 1422L, 10L])\n[]\n*/\nlong[] unique_digits(long[] x)\n{\n    long[] result = new long[x.length];\n    int count = 0;\n    foreach(long num in x)\n    {\n        bool hasEvenDigit = false;\n        long temp = num;\n        while(temp > 0)\n        {\n            if(temp % 10 % 2 == 0)\n            {\n                hasEvenDigit = true;\n                break;\n            }\n            temp /= 10;\n        }\n        if(!hasEvenDigit)\n        {\n            result[count++] = num;\n        }\n    }\n    long[] finalResult = new long[count];\n    for(int i = 0; i < count; i++)\n    {\n        finalResult[i] = result[i];\n    }\n    return finalResult.sort();\n}\n"], ["import std.math;\n/*\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  If the array is empty, return an empty array:\n>>> by_length([])\n[]\n  If the array has any strange number ignore it:\n>>> by_length([1L, -1L, 55L])\n[\"One\"]\n*/\nstring[] by_length(long[] arr)\n{\n    string[] names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n    long[] sorted = arr.filter(x => x >= 1 && x <= 9).sort().reverse();\n    string[] result = new string[sorted.length];\n    for (int i = 0; i < sorted.length; i++) {\n        result[i] = names[sorted[i] - 1];\n    }\n    return result;\n}\n"], ["import std.math;\n/*\n Implement the function f that takes n as a parameter,\nand returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\n>>> f(5L)\n[1L, 2L, 6L, 24L, 15L]\n*/\nlong[] f(long n)\n{\n    long[] result = new long[n];\n    for(long i = 1; i <= n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            result[(int)i-1] = factorial(i);\n        }\n        else\n        {\n            long sum = 0;\n            for(long j = 1; j <= i; j++)\n            {\n                sum += j;\n            }\n            result[(int)i-1] = sum;\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\n>>> even_odd_palindrome(3L)\ntuple(1L, 2L)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\n>>> even_odd_palindrome(12L)\ntuple(4L, 6L)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n    1. 1 <= n <= 10^3\n    2. returned tuple has the number of even and odd integer palindromes respectively.\n*/\nTuple!(long, long) even_odd_palindrome(long n)\nnot immutable long countEven = 0;\nnot immutable long countOdd = 0;"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([])\n0L\n>>> count_nums([-1L, 11L, -11L])\n1L\n>>> count_nums([1L, 1L, 2L])\n3L\n*/\nlong count_nums(long[] arr)\n{\n    long count = 0L;\n    foreach (num; arr)\n    {\n        long sum = 0L;\n        long n = abs(num);\n        while (n > 0)\n        {\n            sum += n % 10;\n            n /= 10;\n        }\n        if (sum > 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWe have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \nIf it is possible to obtain the sorted array by performing the above operation\nthen return true else return false.\nIf the given array is empty then return true.\nNote: The given array is guaranteed to have unique elements.\nFor Example:\n>>> move_one_ball([3L, 4L, 5L, 1L, 2L])\ntrue\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given array.\n>>> move_one_ball([3L, 5L, 4L, 1L, 2L])\nfalse\nExplanation:It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n*/\nbool move_one_ball(long[] arr)\n{\n    if (arr.length == 0) {\n        return true;\n    }\n    int count = 0;\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[(i + 1) % arr.length]) {\n            count++;\n        }\n    }\n    return count <= 1;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>> make_palindrome(\"cata\")\n\"catac\"\n*/\nstring make_palindrome(string string)\n{\n    int n = string.length;\n    int i = 0;\n    while (i < n)\n    {\n        int j = n - 1;\n        while (j >= i && string[i] == string[j])\n        {\n            i++;\n            j--;\n        }\n        if (i >= j)\n        {\n            break;\n        }\n        i = 0;\n        n--;\n    }\n    string palindrome = string;\n    for (int k = n - 1; k >= 0; k--)\n    {\n        palindrome ~= string[k];\n    }\n    return palindrome;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nIn this problem, you will implement a function that takes two arrays of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 an array of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\n>>> exchange([1L, 2L, 3L, 4L], [1L, 2L, 3L, 4L])\n\"YES\"\n>>> exchange([1L, 2L, 3L, 4L], [1L, 5L, 3L, 4L])\n\"NO\"\nIt is assumed that the input arrays will be non-empty.\n*/\nstring exchange(long[] lst1, long[] lst2)\n{\n    long evenCount1 = 0;\n    long evenCount2 = 0;\n    long oddCount1 = 0;\n    long oddCount2 = 0;"], ["import std.math;\nimport std.typecons;\n/*\nGiven a string representing a space separated lowercase letters, return an associative array\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\nExample:\n>>> histogram(\"a b c\")\n[\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n>>> histogram(\"a b b a\")\n[\"a\": 2L, \"b\": 2L].nullable\n>>> histogram(\"a b c a b\")\n[\"a\": 2L, \"b\": 2L].nullable\n>>> histogram(\"b b b b a\")\n[\"b\": 4L].nullable\n>>> histogram(\"\")\n___null_dict___\n*/\nNullable!(long[string]) histogram(string test)\nnot null\n{\n    long[string] result;\n    string[] words = test.split(\" \");\n    foreach (word; words)\n    {\n        foreach (c; word)\n        {\n            if (result.exists(c))\n            {\n                result[c]++;\n            }\n            else\n            {\n                result[c] = 1L;\n            }\n        }\n    }\n    long maxCount = 0L;\n    foreach (key; result.keys)\n    {\n        if (result[key] > maxCount)\n        {\n            maxCount = result[key];\n        }\n    }\n    long[string] maxResult;\n    foreach (key; result.keys)\n    {\n        if (result[key] == maxCount)\n        {\n            maxResult[key] = result[key];\n        }\n    }\n    return maxResult.nullable;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and true/false for the check.\nExample\n>>> reverse_delete(\"abcde\", \"ae\")\ntuple(\"bcd\", false)\n>>> reverse_delete(\"abcdef\", \"b\")\ntuple(\"acdef\", false)\n>>> reverse_delete(\"abcdedcba\", \"ab\")\ntuple(\"cdedc\", true)\n*/\nTuple!(string, bool) reverse_delete(string s, string c)\n{\n    string result = \"\";\n    foreach (char ch; s)\n    {\n        if (!c.contains(ch))\n        {\n            result ~= ch;\n        }\n    }\n    bool isPalindrome = true;\n    for (size_t i = 0; i < result.length / 2; i++)\n    {\n        if (result[i] != result[result.length - i - 1])\n        {\n            isPalindrome = false;\n            break;\n        }\n    }\n    return tuple(result, isPalindrome);\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven an array of strings, where each string consists of only digits, return an array.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n>>> odd_count([\"1234567\"])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count([\"3\", \"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n*/\nstring[] odd_count(string[] lst)\n{\n    string[] result = new string[lst.length];\n    for(int i = 0; i < lst.length; i++)\n    {\n        int count = 0;\n        foreach(char c; lst[i])\n        {\n            if(c.toInt() % 2 != 0)\n            {\n                count++;\n            }\n        }\n        result[i] = \"the number of odd elements \" ~ count ~ \"n the str\" ~ count ~ \"ng \" ~ count ~ \" of the \" ~ count ~ \"nput.\";\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\n>>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n1L\n>>> minSubArraySum([-1L, -2L, -3L])\n-6L\n*/\nlong minSubArraySum(long[] nums)\n{\n    long minSum = nums[0];\n    long currSum = nums[0];\n    for (long i = 1; i < nums.length; i++)\n    {\n        currSum = min(nums[i], currSum + nums[i]);\n        minSum = min(minSum, currSum);\n    }\n    return minSum;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\n>>> max_fill([[0L, 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L)\n6L\nExample 2:\n>>> max_fill([[0L, 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L)\n5L\nExample 3:\n>>> max_fill([[0L, 0L, 0L], [0L, 0L, 0L]], 5L)\n0L\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10\n*/\nlong max_fill(long[][] grid, long capacity)\n{\n    long max_fill = 0;\n    long num_rows = grid.length;\n    long num_cols = grid[0].length;\n    long[] row_sums = new long[num_rows];\n    long[] col_sums = new long[num_cols];"], ["import std.math;\nimport std.typecons;\n/*\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\nIt must be implemented like this:\n>>> sort_array([1L, 5L, 2L, 3L, 4L])\n[1L, 2L, 3L, 4L, 5L]\n>>> sort_array([-2L, -3L, -4L, -5L, -6L])\n[-6L, -5L, -4L, -3L, -2L]\n>>> sort_array([1L, 0L, 2L, 3L, 4L])\n[0L, 1L, 2L, 3L, 4L]\n*/\nlong[] sort_array(long[] arr)\n{\n    return arr.sort((a, b) => (a.countOnes().compare(b.countOnes()) == 0) ? a.compare(b) : a.countOnes().compare(b.countOnes()));\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns an array of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty array.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\n>>> select_words(\"Mary had a little lamb\", 4L)\n[\"little\"]\n>>> select_words(\"Mary had a little lamb\", 3L)\n[\"Mary\", \"lamb\"]\n>>> select_words(\"simple white space\", 2L)\n[]\n>>> select_words(\"Hello world\", 4L)\n[\"world\"]\n>>> select_words(\"Uncle sam\", 3L)\n[\"Uncle\"]\n*/\nstring[] select_words(string s, long n)\n{\n    string[] words = s.split(\" \");\n    string[] result = new string[0];\n    foreach (word; words)\n    {\n        long consonants = 0;\n        foreach (c; word)\n        {\n            if (c.isLetter() && !\"aeiouAEIOU\".contains(c))\n            {\n                consonants++;\n            }\n        }\n        if (consonants == n)\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \nYou may assume that the given string contains English letter only.\nExample:\n>>> get_closest_vowel(\"yogurt\")\n\"u\"\n>>> get_closest_vowel(\"FULL\")\n\"U\"\n>>> get_closest_vowel(\"quick\")\n\"\"\n>>> get_closest_vowel(\"ab\")\n\"\"\n*/\nstring get_closest_vowel(string word)\nnot null\n{\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    int i = word.length - 1;\n    while (i >= 0)\n    {\n        if (vowels.index(word[i]) != -1)\n        {\n            result = word[i];\n            break;\n        }\n        i--;\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou are given an array of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\n>>> match_parens([\"()(\", \")\"])\n\"Yes\"\n>>> match_parens([\")\", \")\"])\n\"No\"\n*/\nstring match_parens(string[] lst)\n{\n    int open = 0;\n    int close = 0;\n    foreach (char c; lst[0])\n    {\n        if (c == '(')\n        {\n            open++;\n        }\n        else\n        {\n            close++;\n        }\n    }\n    foreach (char c; lst[1])\n    {\n        if (c == '(')\n        {\n            open++;\n        }\n        else\n        {\n            close++;\n        }\n    }\n    if (open == close)\n    {\n        return \"Yes\";\n    }\n    else\n    {\n        return \"No\";\n    }\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\nstring string_xor(string a, string b)\n{\n    string result = \"\";\n    for (int i = 0; i < a.length; i++)\n    {\n        int x = a[i] - '0';\n        int y = b[i] - '0';\n        int z = x ^ y;\n        result += z.toChar;\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven an array arr of integers and a positive integer k, return a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum([-3L, -4L, 5L], 3L)\n[-4L, -3L, 5L]\nExample 2:\n>>> maximum([4L, -4L, 4L], 2L)\n[4L, 4L]\nExample 3:\n>>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n[2L]\nNote:\n    1. The length of the array will be in the range of [1, 1000].\n    2. The elements in the array will be in the range of [-1000, 1000].\n    3. 0 <= k <= len(arr)\n*/\nlong[] maximum(long[] arr, long k)\n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n    for(long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n    }\n    for(long i = 0; i < k; i++)\n    {\n        long max = temp[0];\n        long index = 0;\n        for(long j = 1; j < temp.length; j++)\n        {\n            if(temp[j] > max)\n            {\n                max = temp[j];\n                index = j;\n            }\n        }\n        result[i] = max;\n        temp[index] = long.MinValue;\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\nExamples\n>>> solution([5L, 8L, 7L, 1L])\n12L\n>>> solution([3L, 3L, 3L, 3L, 3L])\n9L\n>>> solution([30L, 13L, 24L, 321L])\n0L\n*/\nlong solution(long[] lst)\n{\n    long sum = 0L;\n    for (int i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\nExample:\n>>> add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n24L\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\nlong add_elements(long[] arr, long k)\n{\n    long sum = 0;\n    foreach (i; 0 .. k)\n    {\n        if (arr[i] < 100)\n        {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote: \n    1. Collatz(1) is [1].\n    2. returned array sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>>> get_odd_collatz(5L)\n[1L, 5L]\n*/\nlong[] get_odd_collatz(long n)\nnot null\n{\n    long[] result = new long[0];\n    while (n != 1)\n    {\n        if (n % 2 == 1)\n        {\n            result ~= n;\n        }\n        if (n % 2 == 0)\n        {\n            n = n / 2;\n        }\n        else\n        {\n            n = 3 * n + 1;\n        }\n    }\n    result ~= 1;\n    return result.sort();\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n>>> valid_date(\"03-11-2000\")\ntrue\n>>> valid_date(\"15-01-2012\")\nfalse\n>>> valid_date(\"04-0-2040\")\nfalse\n>>> valid_date(\"06-04-2020\")\ntrue\n>>> valid_date(\"06/04/2020\")\nfalse\n*/\nbool valid_date(string date)\n{\n    if (date.empty())\n        return false;"], ["import std.math;\nimport std.typecons;\n/*\nGiven an array of numbers, return whether or not they are sorted\nin ascending order. If array has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted([5L])\ntrue\n>>> is_sorted([1L, 2L, 3L, 4L, 5L])\ntrue\n>>> is_sorted([1L, 3L, 2L, 4L, 5L])\nfalse\n>>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\ntrue\n>>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\ntrue\n>>> is_sorted([1L, 3L, 2L, 4L, 5L, 6L, 7L])\nfalse\n>>> is_sorted([1L, 2L, 2L, 3L, 3L, 4L])\ntrue\n>>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\nfalse\n*/\nbool is_sorted(long[] lst)\n{\n    foreach (i, e; lst)\n    {\n        if (i > 0 && e <= lst[i-1])\n        {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\n>>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\"NO\"\n>>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n\"NO\"\n>>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n\"YES\"\n*/\nstring intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2)\n{\n    long start1 = interval1[0];\n    long end1 = interval1[1];\n    long start2 = interval2[0];\n    long end2 = interval2[1];"], ["import std.math;\nimport std.typecons;\n/*\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return null for empty arr.\nExample:\n>>> prod_signs([1L, 2L, 2L, -4L])\n9L\n>>> prod_signs([0L, 1L])\n0L\n>>> prod_signs([])\nNone\n*/\nNullable!(long) prod_signs(long[] arr)\n{\n    if (arr.length == 0)\n    {\n        return null;\n    }\n    long sum = 0;\n    long product = 1;\n    foreach (long num; arr)\n    {\n        sum += abs(num);\n        product *= num.sign;\n    }\n    return sum * product;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered arrays of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered array of the values on the cells that the minimum path go through.\nExamples:    \n>>> minPath([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], 3L)\n[1L, 2L, 1L]\n>>> minPath([[5L, 9L, 3L], [4L, 1L, 6L], [7L, 8L, 2L]], 1L)\n[1L]\n*/\nlong[] minPath(long[][] grid, long k)\n{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};"], ["import std.math;\nimport std.typecons;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return null in case the input array is empty.\n>>> longest([])\nNone\n>>> longest([\"a\", \"b\", \"c\"])\n\"a\"\n>>> longest([\"a\", \"bb\", \"ccc\"])\n\"ccc\"\n*/\nNullable!(string) longest(string[] strings)\n{\n    if (strings.length == 0)\n    {\n        return null;\n    }\n    else\n    {\n        int maxLength = 0;\n        string longestString = \"\";\n        foreach (string s; strings)\n        {\n            if (s.length > maxLength)\n            {\n                maxLength = s.length;\n                longestString = s;\n            }\n        }\n        return longestString;\n    }\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return an array of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\n>>> tri(3L)\n[1L, 3L, 2L, 8L]\n*/\nlong[] tri(long n)\n{\n    long[] result = new long[n+1];\n    result[0] = 1;\n    result[1] = 3;\n    for(long i = 2; i <= n; i++)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = 1 + i / 2;\n        }\n        else\n        {\n            result[i] = result[i-1] + result[i-2] + result[i+1];\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\n>>> digits(1L)\n1L\n>>> digits(4L)\n0L\n>>> digits(235L)\n15L\n*/\nlong digits(long n)\n{\n    long product = 1L;\n    while (n > 0) {\n        long digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n        }\n        n /= 10;\n    }\n    return product;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue\n*/\nbool is_nested(string string)\n{\n    int count = 0;\n    foreach (char c; string)\n    {\n        if (c == '[')\n        {\n            count++;\n        }\n        else if (c == ']')\n        {\n            count--;\n        }\n        if (count < 0)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou are given an array of numbers.\nYou need to return the sum of squared numbers in the given array,\nround each element in the array to the upper int(Ceiling) first.\nExamples:\n>>> lst([1.0, 2.0, 3.0])\n14L\n>>> lst([1.0, 4.0, 9.0])\n98L\n>>> lst([1.0, 3.0, 5.0, 7.0])\n84L\n>>> lst([1.4, 4.2, 0.0])\n29L\n>>> lst([-2.4, 1.0, 1.0])\n6L\n*/\nlong sum_squares(float[] lst)\n{\n    long sum = 0;\n    foreach (x; lst) {\n        sum += pow(ceil(x), 2);\n    }\n    return sum;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\nExamples:\n>>> check_if_last_char_is_a_letter(\"apple pie\")\nfalse\n>>> check_if_last_char_is_a_letter(\"apple pi e\")\ntrue\n>>> check_if_last_char_is_a_letter(\"apple pi e \")\nfalse\n>>> check_if_last_char_is_a_letter(\"\")\nfalse\n*/\nbool check_if_last_char_is_a_letter(string txt)\n{\n    if(txt.length == 0)\n        return false;\n    else if(txt[$-1] != ' ' && txt[$-1].isAlpha)\n        return true;\n    else\n        return false;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\n>>> can_arrange([1L, 2L, 4L, 3L, 5L])\n3L\n>>> can_arrange([1L, 2L, 3L])\n-1L\n*/\nlong can_arrange(long[] arr)\n{\n    long maxIndex = -1;\n    for(long i = 1; i < arr.length; i++)\n    {\n        if(arr[i] < arr[i-1])\n        {\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in an array.\nIf there is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\ntuple(None, 1L)\n>>> largest_smallest_integers([])\ntuple(None, None)\n>>> largest_smallest_integers([0L])\ntuple(None, None)\n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[] lst)\n{\n    Nullable!(long) largestNegative = null;\n    Nullable!(long) smallestPositive = null;"], ["import std.math;\nimport std.typecons;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\n>>> is_equal_to_sum_even(4L)\nfalse\n>>> is_equal_to_sum_even(6L)\nfalse\n>>> is_equal_to_sum_even(8L)\ntrue\n*/\nbool is_equal_to_sum_even(long n)\n{\n    if (n % 4 != 0) {\n        return false;\n    }\n    long x = n / 4;\n    return x % 2 == 0;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4L)\n288L\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\nlong special_factorial(long n)\n{\n    long result = 1L;\n    for (long i = n; i > 0; i--) {\n        result *= factorial(i);\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3L, 5L)\n1L\n>>> greatest_common_divisor(25L, 15L)\n5L\n*/\nlong greatest_common_divisor(long a, long b)\n{\n    return a.gcd(b);\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n>>> fix_spaces(\" Example\")\n\"Example\"\n>>> fix_spaces(\" Example 1\")\n\"Example_1\"\n>>> fix_spaces(\" Example 2\")\n\"_Example_2\"\n>>> fix_spaces(\" Example 3\")\n\"_Example-3\"\n*/\nstring fix_spaces(string text)\n{\n    string result = \"\";\n    int count = 0;\n    foreach (char c; text)\n    {\n        if (c == ' ')\n        {\n            count++;\n            if (count == 2)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nCreate a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\n>>> file_name_check(\"example.txt\")\n\"Yes\"\n>>> file_name_check(\"1example.dll\")\n\"No\"\n*/\nstring file_name_check(string file_name)\n{\n    int digit_count = 0;\n    int dot_count = 0;\n    int substring_count = 0;\n    bool valid_substring = false;"], ["import std.math;\nimport std.typecons;\n/*\n\"\nThis function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n>>> lst\n[1L, 2L, 3L]\n>>> lst\n[]\n>>> lst\n[-1L, -5L, 2L, -1L, -5L]\n*/\nlong sum_squares(long[] lst)\n{\n    long sum = 0;\n    foreach (i, e; lst)\n    {\n        if (i % 3 == 0)\n        {\n            sum += e * e;\n        }\n        else if (i % 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>> words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\nstring words_in_sentence(string sentence)\n{\n    string[] words = sentence.split(\" \");\n    string result = \"\";\n    foreach (word; words)\n    {\n        if (isPrime(word.length))\n        {\n            result ~= word;\n        }\n    }\n    return result;\n}"], ["import std.math;\nimport std.typecons;\n/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n>>> simplify(\"1/5\", \"5/1\")\ntrue\n>>> simplify(\"1/6\", \"2/1\")\nfalse\n>>> simplify(\"7/10\", \"10/2\")\nfalse\n*/\nbool simplify(string x, string n)\n{\n    int x_num, x_den, n_num, n_den;\n    sscanf(x.toString(), \"%d/%d\", &x_num, &x_den);\n    sscanf(n.toString(), \"%d/%d\", &n_num, &n_den);\n    int result_num = x_num * n_num;\n    int result_den = x_den * n_den;\n    int gcd_num = gcd(result_num, result_den);\n    result_num /= gcd_num;\n    result_den /= gcd_num;\n    return result_den == 1 && result_num % result_den == 0;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function which sorts the given array of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original array.\nFor example:\n>>> order_by_points([1L, 11L, -1L, -11L, -12L])\n[-1L, -11L, 1L, -12L, 11L]\n>>> order_by_points([])\n[]\n*/\nlong[] order_by_points(long[] nums)\n{\n    long[][] nums_with_sums = new long[nums.length][2];\n    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long num = nums[i];\n        while (num != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n        }\n        nums_with_sums[i][0] = sum;\n        nums_with_sums[i][1] = i;\n    }\n    nums_with_sums.sort();\n    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[nums_with_sums[i][1]];\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\n>>> specialFilter([15L, -73L, 14L, -15L])\n1L\n>>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n2L\n*/\nlong specialFilter(long[] nums)\n{\n    long count = 0;\n    foreach (num; nums) {\n        if (num > 10 && abs(num) % 2 == 1 && abs(num % 10) % 2 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n    You are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    Example :\n    >>> get_max_triples(5L)\n    1L\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n*/\nlong get_max_triples(long n)\n{\n    long[] a = new long[n];\n    long count = 0;\n    for(long i = 1; i <= n; i++)\n    {\n        a[i-1] = i * i - i + 1;\n    }\n    for(long i = 0; i < n-2; i++)\n    {\n        for(long j = i+1; j < n-1; j++)\n        {\n            for(long k = j+1; k < n; k++)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function that accepts an array of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted array with a sorted order,\nThe array is always an array of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the array should be ascending by length of each word, and you\nshould return the array sorted by that rule.\nIf two words have the same length, sort the array alphabetically.\nThe function should return an array of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\n>>> list_sort([\"aa\", \"a\", \"aaa\"])\n[\"aa\"]\n>>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n[\"ab\", \"cd\"]\n*/\nstring[] sorted_list_sum(string[] lst)\n{\n    string[] result;\n    int i, j, len;\n    len = lst.length;\n    result = new string[len];\n    j = 0;\n    for(i = 0; i < len; i++)\n    {\n        if(lst[i].length % 2 == 0)\n        {\n            result[j] = lst[i];\n            j++;\n        }\n    }\n    result = result[0..j-1];\n    result.sort();\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n[\"a\", \"ab\", \"abc\"]\n*/\nstring[] all_prefixes(string string)\n{\n    string[] prefixes;\n    for (int i = 1; i <= string.length; i++)\n    {\n        prefixes ~= string[0..i];\n    }\n    return prefixes;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\nExamples:\n>>> x_or_y(7L, 34L, 12L)\n34L\n>>> x_or_y(15L, 8L, 5L)\n5L\n*/\nlong x_or_y(long n, long x, long y)\n{\n    if (isPrime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven an array of numbers, return the sum of squares of the numbers\nin the array that are odd. Ignore numbers that are negative or not integers.\n>>> double_the_difference([1L, 3L, 2L, 0L])\n10L\n>>> double_the_difference([-1L, -2L, 0L])\n0L\n>>> double_the_difference([9L, -2L])\n81L\n>>> double_the_difference([0L])\n0L\nIf the input array is empty, return 0.\n*/\nlong double_the_difference(float[] lst)\nnot null\n{\n    long sum = 0L;\n    foreach (num; lst)\n    {\n        if (num.isInteger() && num.toInt() % 2 != 0)\n        {\n            sum += pow(num.toInt(), 2);\n        }\n    }\n    return sum;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n>>> compare([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n[0L, 0L, 0L, 0L, 3L, 3L]\n>>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n[4L, 4L, 1L, 0L, 0L, 6L]\n*/\nlong[] compare(long[] game, long[] guess)\n{\n    long[] diff = new long[game.length];\n    for(int i = 0; i < game.length; i++)\n    {\n        diff[i] = abs(game[i] - guess[i]);\n    }\n    return diff;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou will be given the name of a class (a string) and an array of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the array.\nFor example, if you are given \"Slices\" as the class and an array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\"my_class.AA\"\n*/\nstring Strongest_Extension(string class_name, string[] extensions)\n{\n    string strongest_extension = \"\";\n    double strongest_strength = -1.0;"], ["import std.math;\nimport std.typecons;\n/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n>>> cycpattern_check(\"abcd\", \"abd\")\nfalse\n>>> cycpattern_check(\"hello\", \"ell\")\ntrue\n>>> cycpattern_check(\"whassup\", \"psus\")\nfalse\n>>> cycpattern_check(\"abab\", \"baa\")\ntrue\n>>> cycpattern_check(\"efef\", \"eeff\")\nfalse\n>>> cycpattern_check(\"himenss\", \"simen\")\ntrue\n*/\nbool cycpattern_check(string a, string b)\n{\n    int n = a.length();\n    int m = b.length();\n    if (m > n)\n        return false;\n    string temp = b + b;\n    for (int i = 0; i < n; i++)\n    {\n        if (temp.substr(i, m) == b)\n            return true;\n    }\n    return false;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\nExample:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n*/\nTuple!(long, long) even_odd_count(long num)\n{\n    long evenCount = 0L;\n    long oddCount = 0L;"], ["import std.math;\nimport std.typecons;\n/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19L)\n\"xix\"\n>>> int_to_mini_roman(152L)\n\"clii\"\n>>> int_to_mini_roman(426L)\n\"cdxxvi\"\n*/\nstring int_to_mini_roman(long number)\n{\n    string roman = \"\";\n    while (number > 0)\n    {\n        if (number >= 100)\n        {\n            roman ~= \"c\";\n            number -= 100;\n        }\n        else if (number >= 90)\n        {\n            roman ~= \"xc\";\n            number -= 90;\n        }\n        else if (number >= 50)\n        {\n            roman ~= \"l\";\n            number -= 50;\n        }\n        else if (number >= 40)\n        {\n            roman ~= \"xl\";\n            number -= 40;\n        }\n        else if (number >= 10)\n        {\n            roman ~= \"x\";\n            number -= 10;\n        }\n        else if (number >= 9)\n        {\n            roman ~= \"ix\";\n            number -= 9;\n        }\n        else if (number >= 5)\n        {\n            roman ~= \"v\";\n            number -= 5;\n        }\n        else if (number >= 4)\n        {\n            roman ~= \"iv\";\n            number -= 4;\n        }\n        else\n        {\n            roman ~= \"i\";\n            number -= 1;\n        }\n    }\n    return roman.toLower();\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\n>>> right_angle_triangle(3L, 4L, 5L)\ntrue\n>>> right_angle_triangle(1L, 2L, 3L)\nfalse\n*/\nbool right_angle_triangle(long a, long b, long c)\n{\n    long[] sides = [a, b, c].sort();\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function that accepts an array of strings.\nThe array contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n>>> find_max([\"name\", \"of\", \"string\"])\n\"string\"\n>>> find_max([\"name\", \"enam\", \"game\"])\n\"enam\"\n>>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\"aaaaaaa\"\n*/\nstring find_max(string[] words)\n{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach (word; words)\n    {\n        int unique_chars = word.toSet().length;\n        if (unique_chars > max_unique || (unique_chars == max_unique && word < max_word))\n        {\n            max_word = word;\n            max_unique = unique_chars;\n        }\n    }\n    return max_word;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n>>> eat(5L, 6L, 10L)\n[11L, 4L]\n>>> eat(4L, 8L, 9L)\n[12L, 1L]\n>>> eat(1L, 10L, 10L)\n[11L, 0L]\n>>> eat(2L, 11L, 5L)\n[7L, 0L]\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\n*/\nlong[] eat(long number, long need, long remaining)\n{\n    long[] result = new long[2];\n    long total = number + need;\n    result[0] = total;\n    result[1] = remaining - need;\n    if (result[1] < 0)\n    {\n        result[1] = 0;\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0L)\n\"0\"\n>>> string_sequence(5L)\n\"0 1 2 3 4 5\"\n*/\nstring string_sequence(long n)\n{\n    string result = \"\";\n    foreach (i; 0L..=n)\n    {\n        result ~= i.string;\n        if (i != n)\n        {\n            result ~= \" \";\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven two arrays operator, and operand. The first array has basic algebra operations, and \nthe second array is an array of integers. Use the two given arrays to build the algebric \nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\n    The length of operator array is equal to the length of operand array minus one.\n    Operand is an array of of non-negative integers.\n    Operator array has at least one operator, and operand array has at least two operands.\n*/\nlong do_algebra(string[] operator, long[] operand)\nnotnull operand\n{\n    long result = operand[0];\n    for (int i = 1; i < operand.length; i++)\n    {\n        switch (operator[i-1])\n        {\n            case \"+\":\n                result += operand[i];\n                break;\n            case \"-\":\n                result -= operand[i];\n                break;\n            case \"*\":\n                result *= operand[i];\n                break;\n            case \"//\":\n                result = result / operand[i];\n                break;\n            case \"**\":\n                result = pow(result, operand[i]);\n                break;\n            default:\n                break;\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\n>>> solve(\"1234\")\n\"4321\"\n>>> solve(\"ab\")\n\"AB\"\n>>> solve(\"#a@C\")\n\"#A@c\"\n*/\nstring solve(string s)\n{\n    string result = \"\";\n    bool hasLetters = false;\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (isalpha(s[i]))\n        {\n            hasLetters = true;\n            if (isupper(s[i]))\n            {\n                result += tolower(s[i]);\n            }\n            else\n            {\n                result += toupper(s[i]);\n            }\n        }\n        else\n        {\n            result += s[i];\n        }\n    }\n    if (!hasLetters)\n    {\n        result = s.reverse();\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return null.\n>>> string_to_md5(\"Hello world\")\n\"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\nNullable!(string) string_to_md5(string text)\n{\n    if (text.empty)\n    {\n        return null;\n    }\n    else\n    {\n        return toHex(md5(text.dup));\n    }\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\nFor example:\n>>> generate_integers(2L, 8L)\n[2L, 4L, 6L, 8L]\n>>> generate_integers(8L, 2L)\n[2L, 4L, 6L, 8L]\n>>> generate_integers(10L, 14L)\n[]\n*/\nlong[] generate_integers(long a, long b)\n{\n    long[] result;\n    long start, end;\n    if (a < b) {\n        start = a;\n        end = b;\n    } else {\n        start = b;\n        end = a;\n    }\n    long[] temp = new long[end - start + 1];\n    long count = 0;\n    for (long i = start; i <= end; i++) {\n        if (i % 2 == 0) {\n            temp[count] = i;\n            count++;\n        }\n    }\n    result = new long[count];\n    for (long i = 0; i < count; i++) {\n        result[i] = temp[i];\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3L\n>>> count_distinct_characters(\"Jerry\")\n4L\n*/\nlong count_distinct_characters(string string)\n{\n    return string.toLower().distinct.length;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return array of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n[4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n*/\nlong[] parse_music(string music_string)\n{\n    long[] beats;\n    int i = 0;\n    foreach (char c; music_string)\n    {\n        if (c == 'o')\n        {\n            beats[i++] = 4;\n        }\n        else if (c == '|')\n        {\n            if (music_string[$-1] == 'o')\n            {\n                beats[i++] = 2;\n            }\n            else if (music_string[$-1] == '.')\n            {\n                beats[i++] = 1;\n            }\n        }\n    }\n    return beats;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0L\n>>> how_many_times(\"aaa\", \"a\")\n3L\n>>> how_many_times(\"aaaa\", \"aa\")\n3L\n*/\nlong how_many_times(string string, string substring)\n{\n    long count = 0;\n    int index = 0;\n    while ((index = string.find(substring, index)) != -1)\n    {\n        count++;\n        index += substring.length();\n    }\n    return count;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers(\"three one five\")\n\"one three five\"\n*/\nstring sort_numbers(string numbers)\n{\n    string[] nums = numbers.split(\" \");\n    int[] numValues = new int[nums.length];\n    string[] numStrings = new string[] { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\" };\n    for (int i = 0; i < nums.length; i++)\n    {\n        numValues[i] = numStrings.indexOf(nums[i]);\n    }\n    numValues.sort();\n    string[] sortedNums = new string[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n        sortedNums[i] = numStrings[numValues[i]];\n    }\n    return sortedNums.join(\" \");\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the array of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n[\"()\", \"(())\", \"(()())\"]\n*/\nstring[] separate_paren_groups(string paren_string)\n{\n    string[] result;\n    int start = 0;\n    int end = 0;\n    int count = 0;\n    int index = 0;"], ["import std.math;\nimport std.typecons;\n/*\n From a supplied array of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\ntuple(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\ntuple(2.0, 2.0)\n*/\nTuple!(float, float) find_closest_elements(float[] numbers)\n{\n    float min_diff = abs(numbers[0] - numbers[1]);\n    float closest1 = numbers[0];\n    float closest2 = numbers[1];"], ["import std.math;\nimport std.typecons;\n/*\n Given array of numbers (of at least two elements), apply a linear transform to that array,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n*/\nfloat[] rescale_to_unit(float[] numbers)\n{\n    float min = numbers[0];\n    float max = numbers[0];\n    foreach (num; numbers)\n    {\n        if (num < min)\n        {\n            min = num;\n        }\n        if (num > max)\n        {\n            max = num;\n        }\n    }\n    float[] rescaled = new float[numbers.length];\n    foreach (i, num; numbers)\n    {\n        rescaled[i] = (num - min) / (max - min);\n    }\n    return rescaled;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Return length of given string\n>>> strlen(\"\")\n0L\n>>> strlen(\"abc\")\n3L\n*/\nlong strlen(string string)\n{\n    return string.length;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15L)\n5L\n*/\nlong largest_divisor(long n)\n{\n    long largest = 1L;\n    for (long i = 2L; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8L)\n[2L, 2L, 2L]\n>>> factorize(25L)\n[5L, 5L]\n>>> factorize(70L)\n[2L, 5L, 7L]\n*/\nlong[] factorize(long n)\n{\n    long[] factors = [];\n    long i = 2;\n    while (i <= n)\n    {\n        if (n % i == 0)\n        {\n            factors ~= i;\n            n /= i;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    return factors;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n From an array of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n[1L, 3L, 4L]\n*/\nlong[] remove_duplicates(long[] numbers)\n{\n    long[] result = new long[0];\n    foreach (long num in numbers)\n    {\n        if (!result.any(n => n == num))\n        {\n            result ~= num;\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\nstring flip_case(string string)\n{\n    string result = \"\";\n    foreach (char c; string)\n    {\n        if (islower(c))\n        {\n            result ~= toUpper(c);\n        }\n        else if (isupper(c))\n        {\n            result ~= toLower(c);\n        }\n        else\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Concatenate array of strings into a single string\n>>> concatenate([])\n\"\"\n>>> concatenate([\"a\", \"b\", \"c\"])\n\"abc\"\n*/\nstring concatenate(string[] strings)\n{\n    string result = \"\";\n    foreach (string s; strings)\n    {\n        result ~= s;\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], \"a\")\n[]\n>>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix(string[] strings, string prefix)\n{\n    string[] filtered = [];\n    foreach (str; strings)\n    {\n        if (str.startsWith(prefix))\n        {\n            filtered ~= str;\n        }\n    }\n    return filtered;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\nfloat truncate_number(float number)\n{\n    return number - floor(number);\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nReturn only positive numbers in the array.\n>>> get_positive([-1L, 2L, -4L, 5L, 6L])\n[2L, 5L, 6L]\n>>> get_positive([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n[5L, 3L, 2L, 3L, 9L, 123L, 1L]\n*/\nlong[] get_positive(long[] l)\n{\n    long[] result = new long[l.length];\n    int count = 0;\n    foreach (num; l)\n    {\n        if (num > 0)\n        {\n            result[count] = num;\n            count++;\n        }\n    }\n    return result[0..count];\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6L)\nfalse\n>>> is_prime(101L)\ntrue\n>>> is_prime(11L)\ntrue\n>>> is_prime(13441L)\ntrue\n>>> is_prime(61L)\ntrue\n>>> is_prime(4L)\nfalse\n>>> is_prime(1L)\nfalse\n*/\nbool is_prime(long n)\n{\n    if (n <= 1)\n        return false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    for (long i = 5; i * i <= n; i += 6)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    }\n    return true;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nThis function takes an array l and returns an array l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1L, 2L, 3L])\n[1L, 2L, 3L]\n>>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n[2L, 6L, 3L, 4L, 8L, 9L, 5L]\n*/\nlong[] sort_third(long[] l)\n{\n    long[] l_prime = new long[l.length];\n    long[] third_values = new long[l.length / 3];\n    int third_index = 0;"], ["import std.math;\nimport std.typecons;\n/*\nReturn sorted unique elements in an array\n>>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n[0L, 2L, 3L, 5L, 9L, 123L]\n*/\nlong[] unique(long[] l)\n{\n    auto sorted = l.sort();\n    auto unique = sorted.filter(i => sorted.count(j => j == i) == 1);\n    return unique.array;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nReturn maximum element in the array.\n>>> max_element([1L, 2L, 3L])\n3L\n>>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n123L\n*/\nlong max_element(long[] l)\n{\n    return l.max;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50L)\n0L\n>>> fizz_buzz(78L)\n2L\n>>> fizz_buzz(79L)\n3L\n*/\nlong fizz_buzz(long n)\n{\n    long count = 0;\n    for (long i = 1; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            string s = i.toString();\n            foreach (char c; s) {\n                if (c == '7') {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nThis function takes an array l and returns an array l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1L, 2L, 3L])\n[1L, 2L, 3L]\n>>> sort_even([5L, 6L, 3L, 4L])\n[3L, 6L, 5L, 4L]\n*/\nlong[] sort_even(long[] l)\n{\n    long[] even_values = l[1::2];\n    even_values.sort();\n    long[] result = new long[l.length];\n    for (int i = 0; i < l.length; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = l[i];\n        }\n        else\n        {\n            result[i] = even_values[i / 2];\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1L)\n2L\n>>> prime_fib(2L)\n3L\n>>> prime_fib(3L)\n5L\n>>> prime_fib(4L)\n13L\n>>> prime_fib(5L)\n89L\n*/\nlong prime_fib(long n)\n{\n    long count = 0;\n    long fib = 0;\n    long i = 0;\n    while (count < n) {\n        fib = fibonacci(i);\n        if (isPrime(fib)) {\n            count++;\n        }\n        i++;\n    }\n    return fib;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n You're given an array of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero([1L, 2L, 3L])\nfalse\n>>> below_zero([1L, 2L, -4L, 5L])\ntrue\n*/\nbool below_zero(long[] operations)\n{\n    long balance = 0;\n    foreach (op; operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\ntriples_sum_to_zero takes an array of integers as an input.\nit returns true if there are three distinct elements in the array that\nsum to zero, and false otherwise.\n>>> triples_sum_to_zero([1L, 3L, 5L, 0L])\nfalse\n>>> triples_sum_to_zero([1L, 3L, -2L, 1L])\ntrue\n>>> triples_sum_to_zero([1L, 2L, 3L, 7L])\nfalse\n>>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\ntrue\n>>> triples_sum_to_zero([1L])\nfalse\n*/\nbool triples_sum_to_zero(long[] l)\nnot null\n{\n    if (l.length < 3)\n        return false;"], ["import std.math;\nimport std.typecons;\n/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\nThis function outputs the number of such collisions.\n*/\nlong car_race_collision(long n)\n{\n    return n * (n - 1) / 2;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nReturn array with elements incremented by 1.\n>>> incr_list([1L, 2L, 3L])\n[2L, 3L, 4L]\n>>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n[6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n*/\nlong[] incr_list(long[] l)\n{\n    long[] result = new long[l.length];\n    foreach (i, e; l)\n    {\n        result[i] = e + 1;\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\npairs_sum_to_zero takes an array of integers as an input.\nit returns true if there are two distinct elements in the array that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\nfalse\n>>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\nfalse\n>>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\nfalse\n>>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\ntrue\n>>> pairs_sum_to_zero([1L])\nfalse\n*/\nbool pairs_sum_to_zero(long[] l)\n{\n    foreach (i, e; l) {\n        foreach (j, f; l[i+1..$]) {\n            if (e + f == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8L, 3L)\n\"22\"\n>>> change_base(8L, 2L)\n\"1000\"\n>>> change_base(7L, 2L)\n\"111\"\n*/\nstring change_base(long x, long base)\n{\n    string result = \"\";\n    while (x > 0)\n    {\n        result = to_string(x % base) + result;\n        x /= base;\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5L, 3L)\n7.5\n*/\nfloat triangle_area(long a, long h)\n{\n    return (a * h) / 2.0;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5L)\n4L\n>>> fib4(6L)\n8L\n>>> fib4(7L)\n14L\n*/\nlong fib4(long n)\nnothrow @safe @nogc {\n    if (n < 4) return n == 2 ? 2 : 0;\n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 4; i <= n; ++i) {\n        long tmp = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n        d = tmp;\n    }\n    return d;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nReturn median of elements in the array l.\n>>> median([3L, 1L, 2L, 4L, 5L])\n3L\n>>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n15.0\n*/\nfloat median(long[] l)\n{\n    l.sort();\n    int n = l.length;\n    if (n % 2 == 0)\n    {\n        return (l[n/2 - 1] + l[n/2]) / 2.0;\n    }\n    else\n    {\n        return l[n/2];\n    }\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\nbool is_palindrome(string text)\n{\n    int length = text.length;\n    for (int i = 0; i < length / 2; i++)\n    {\n        if (text[i] != text[length - i - 1])\n        {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3L, 5L)\n3L\n>>> modp(1101L, 101L)\n2L\n>>> modp(0L, 101L)\n1L\n>>> modp(3L, 11L)\n8L\n>>> modp(100L, 101L)\n1L\n*/\nlong modp(long n, long p)\n{\n    return pow(2, n, p);\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n*/\nfloat mean_absolute_deviation(float[] numbers)\n{\n    float sum = 0.0;\n    float mean;\n    float mad;\n    int n = numbers.length;"], ["import std.math;\nimport std.typecons;\n/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\nstring remove_vowels(string text)\n{\n    string result = \"\";\n    foreach (char c; text)\n    {\n        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' &&\n            c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers in the array l are below threshold t.\n>>> below_threshold([1L, 2L, 4L, 10L], 100L)\ntrue\n>>> below_threshold([1L, 20L, 4L, 10L], 5L)\nfalse\n*/\nbool below_threshold(long[] l, long t)\n{\n    foreach (x; l)\n    {\n        if (x >= t)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n>>> add(2L, 3L)\n5L\n>>> add(5L, 7L)\n12L\n*/\nlong add(long x, long y)\n{\n    return x + y;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\nbool same_chars(string s0, string s1)\n{\n    int[] count0 = new int[26];\n    int[] count1 = new int[26];"], ["import std.math;\nimport std.typecons;\n/*\nReturn n-th Fibonacci number.\n>>> fib(10L)\n55L\n>>> fib(1L)\n1L\n>>> fib(8L)\n21L\n*/\nlong fib(long n)\n{\n    return ((pow(1 + sqrt(5), n) - pow(1 - sqrt(5), n)) / (pow(2, n) * sqrt(5)));\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"<\" and \">\".\nreturn true if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\nbool correct_bracketing(string brackets)\n{\n    int count = 0;\n    foreach (char c; brackets)\n    {\n        if (c == '<')\n        {\n            count++;\n        }\n        else if (c == '>')\n        {\n            count--;\n        }\n        if (count < 0)\n        {\n            return false;\n        }\n    }\n    return count == 0;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nReturn true is array elements are monotonically increasing or decreasing.\n>>> monotonic([1L, 2L, 4L, 20L])\ntrue\n>>> monotonic([1L, 20L, 4L, 10L])\nfalse\n>>> monotonic([4L, 1L, 0L, -10L])\ntrue\n*/\nbool monotonic(long[] l)\n{\n    bool increasing = true;\n    bool decreasing = true;"], ["import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common elements for two arrays.\n>>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n[1L, 5L, 653L]\n>>> common([5L, 3L, 2L, 8L], [3L, 2L])\n[2L, 3L]\n*/\nlong[] common(long[] l1, long[] l2)\n{\n    auto s1 = l1.toSet();\n    auto s2 = l2.toSet();\n    auto commonSet = s1.intersect(s2);\n    auto commonArray = commonSet.array;\n    commonArray.sort();\n    return commonArray;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195L)\n29L\n>>> largest_prime_factor(2048L)\n2L\n*/\nlong largest_prime_factor(long n)\n{\n    long largest_factor = 0;\n    long i = 2;\n    while (i <= n)\n    {\n        if (n % i == 0)\n        {\n            largest_factor = i;\n            n /= i;\n        }\n        else\n        {\n            i++;\n        }\n    }\n    return largest_factor;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n>>> intersperse([], 4L)\n[]\n>>> intersperse([1L, 2L, 3L], 4L)\n[1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter)\n{\n    long[] result = new long[numbers.length * 2 - 1];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i * 2] = numbers[i];\n        if (i != numbers.length - 1) {\n            result[i * 2 + 1] = delimeter;\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30L)\n465L\n>>> sum_to_n(100L)\n5050L\n>>> sum_to_n(5L)\n15L\n>>> sum_to_n(10L)\n55L\n>>> sum_to_n(1L)\n1L\n*/\nlong sum_to_n(long n)\n{\n    return n * (n + 1) / 2;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"(\" and \")\".\nreturn true if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\nbool correct_bracketing(string brackets)\n{\n    int count = 0;\n    foreach (char c; brackets)\n    {\n        if (c == '(')\n        {\n            count++;\n        }\n        else if (c == ')')\n        {\n            count--;\n        }\n        if (count < 0)\n        {\n            return false;\n        }\n    }\n    return count == 0;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3L, 1L, 2L, 4L, 5L])\n[1L, 4L, 12L, 20L]\n>>> derivative([1L, 2L, 3L])\n[2L, 6L]\n*/\nlong[] derivative(long[] xs)\n{\n    long[] result = new long[xs.length - 1];\n    for (int i = 1; i < xs.length; i++) {\n        result[i - 1] = xs[i] * i;\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1L)\n0L\n>>> fibfib(5L)\n4L\n>>> fibfib(8L)\n24L\n*/\nlong fibfib(long n)\nnothrow @safe @nogc {\n    if (n < 3) return n == 2 ? 1 : 0;\n    long a = 0, b = 0, c = 1;\n    for (long i = 3; i <= n; ++i) {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count(\"abcde\")\n2L\n>>> vowels_count(\"ACEDY\")\n3L\n*/\nlong vowels_count(string s)\n{\n    long count = 0;\n    foreach (char c; s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || (c == 'y' && s[$-1] != ' '))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12L, 1L)\n\"21\"\n>>> circular_shift(12L, 2L)\n\"12\"\n*/\nstring circular_shift(long x, long shift)\n{\n    string s = toString(x);\n    long n = s.length;\n    if (shift > n)\n    {\n        s.reverse();\n        return s;\n    }\n    string shifted = s[n-shift..$] ~ s[0..n-shift];\n    return shifted;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n>>> digitSum(\"\")\n0L\n>>> digitSum(\"abAB\")\n131L\n>>> digitSum(\"abcCd\")\n67L\n>>> digitSum(\"helloE\")\n69L\n>>> digitSum(\"woArBld\")\n131L\n>>> digitSum(\"aAaaaXa\")\n153L\n*/\nlong digitSum(string s)\n{\n    long sum = 0;\n    foreach (char c; s)\n    {\n        if (isupper(c))\n        {\n            sum += (long)c;\n        }\n    }\n    return sum;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\n>>> fruit_distribution(\"5 apples and 6 oranges\", 19L)\n8L\n>>> fruit_distribution(\"0 apples and 1 oranges\", 3L)\n2L\n>>> fruit_distribution(\"2 apples and 3 oranges\", 100L)\n95L\n>>> fruit_distribution(\"100 apples and 1 oranges\", 120L)\n19L\n*/\nlong fruit_distribution(string s, long n)\n{\n    long apples = s.split(\" \")[0].toLong();\n    long oranges = s.split(\" \")[4].toLong();\n    long mangoes = n - (apples + oranges);\n    return mangoes;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\nThe plucked node should be returned in an array, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\nExample 1:\n>>> pluck([4L, 2L, 3L])\n[2L, 1L]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 2:\n>>> pluck([1L, 2L, 3L])\n[2L, 1L]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\n>>> pluck([])\n[]\nExample 4:\n>>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n[0L, 1L]\nExplanation: 0 is the smallest value, but  there are two zeros,\n             so we will choose the first zero, which has the smallest index.\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\nlong[] pluck(long[] arr)\n{\n    long[] result = new long[2];\n    long minEven = long.MaxValue;\n    long minIndex = -1;"], ["import std.math;\nimport std.typecons;\n/*\nYou are given a non-empty array of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the array.\nIf no such a value exist, return -1.\nExamples:\n>>> search([4L, 1L, 2L, 2L, 3L, 1L])\n2L\n>>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n3L\n>>> search([5L, 5L, 4L, 4L, 4L])\n-1L\n*/\nlong search(long[] lst)\n{\n    long[] freq = new long[lst.length+1];\n    foreach(long num; lst)\n    {\n        freq[num]++;\n    }\n    for(long i = lst.length; i > 0; i--)\n    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return -1L;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n[2L, 3L, 1L, 3L]\n*/\nlong[] parse_nested_parens(string paren_string)\nnotnull\n{\n    long[] result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach (char c; paren_string)\n    {\n        if (c == '(')\n        {\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n        }\n        else if (c == ')')\n        {\n            current_depth--;\n        }\n    }\n    result = new long[max_depth];\n    current_depth = 0;\n    foreach (char c; paren_string)\n    {\n        if (c == '(')\n        {\n            current_depth++;\n            result[current_depth-1]++;\n        }\n        else if (c == ')')\n        {\n            current_depth--;\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven array of integers, return array in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\nExamples:\n>>> strange_sort_list([1L, 2L, 3L, 4L])\n[1L, 4L, 2L, 3L]\n>>> strange_sort_list([5L, 5L, 5L, 5L])\n[5L, 5L, 5L, 5L]\n>>> strange_sort_list([])\n[]\n*/\nlong[] strange_sort_list(long[] lst)\n{\n    long[] result = new long[lst.length];\n    int i = 0;\n    int j = lst.length - 1;\n    int k = 0;\n    while (i <= j)\n    {\n        result[k++] = lst[i++];\n        if (i <= j)\n        {\n            result[k++] = lst[j--];\n        }\n    }\n    return result;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\n>>> triangle_area(3L, 4L, 5L)\n6.0\n>>> triangle_area(1L, 2L, 10L)\n-1L\n*/\nfloat triangle_area(long a, long b, long c)\nnot pure nothrow @safe @nogc {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1.0;\n    }\n    float s = (a + b + c) / 2.0;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area.round(2);\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\n>>> will_it_fly([1L, 2L], 5L)\nfalse\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n>>> will_it_fly([3L, 2L, 3L], 1L)\nfalse\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n>>> will_it_fly([3L, 2L, 3L], 9L)\ntrue\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n>>> will_it_fly([3L], 5L)\ntrue\n# 3 is less than the maximum possible weight, and it's balanced.\n*/\nbool will_it_fly(long[] q, long w)\n{\n    long sum = 0;\n    long n = q.length;\n    for (long i = 0; i < n; i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    for (long i = 0; i < n / 2; i++) {\n        if (q[i] != q[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\n>>> smallest_change([1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L])\n4L\n>>> smallest_change([1L, 2L, 3L, 4L, 3L, 2L, 2L])\n1L\n>>> smallest_change([1L, 2L, 3L, 2L, 1L])\n0L\n*/\nlong smallest_change(long[] arr)\n{\n    long n = arr.length;\n    long count = 0;\n    for (long i = 0; i < n / 2; i++) {\n        if (arr[i] != arr[n - i - 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function that accepts two arrays of strings and returns the array that has \ntotal number of chars in the all strings of the array less than the other array.\nif the two arrays have the same number of chars, return the first array.\nExamples\n>>> total_match([], [])\n[]\n>>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n[\"hI\", \"Hi\"]\n>>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n[\"hi\", \"admin\"]\n>>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n[\"hI\", \"hi\", \"hi\"]\n>>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n[\"4\"]\n*/\nstring[] total_match(string[] lst1, string[] lst2)\n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach (str; lst1)\n    {\n        total1 += str.length;\n    }\n    foreach (str; lst2)\n    {\n        total2 += str.length;\n    }\n    if (total1 < total2)\n    {\n        return lst1;\n    }\n    else if (total1 > total2)\n    {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n    }\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\n>>> is_multiply_prime(30L)\ntrue\n30 = 2 * 3 * 5\n*/\nbool is_multiply_prime(long a)\n{\n    int count = 0;\n    long[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    foreach (long prime; primes)\n    {\n        if (a % prime == 0)\n        {\n            count++;\n            a /= prime;\n        }\n    }\n    return count == 3 && a == 1;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\n>>> is_simple_power(1L, 4L)\ntrue\n>>> is_simple_power(2L, 2L)\ntrue\n>>> is_simple_power(8L, 2L)\ntrue\n>>> is_simple_power(3L, 2L)\nfalse\n>>> is_simple_power(3L, 1L)\nfalse\n>>> is_simple_power(5L, 3L)\nfalse\n*/\nbool is_simple_power(long x, long n)\n{\n    if(x == 1L && n == 1L)\n        return true;\n    if(n == 1L)\n        return false;\n    long int_part = x.log(n).round;\n    return pow(n, int_part) == x;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\n>>> iscube(1L)\ntrue\n>>> iscube(2L)\nfalse\n>>> iscube(-1L)\ntrue\n>>> iscube(64L)\ntrue\n>>> iscube(0L)\ntrue\n>>> iscube(180L)\nfalse\n*/\nbool iscube(long a)\n{\n    if(a == 0)\n        return true;\n    long cubeRoot = a.cubeRoot().round;\n    return cubeRoot * cubeRoot * cubeRoot == a;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\n>>> hex_key(\"AB\")\n1L\n>>> hex_key(\"1077E\")\n2L\n>>> hex_key(\"ABED1A33\")\n4L\n>>> hex_key(\"123456789ABCDEF0\")\n6L\n>>> hex_key(\"2020\")\n2L\n*/\nlong hex_key(string num)\nnot null\n{\n    long count = 0;\n    foreach (char c; num) {\n        int digit = c.toDigit();\n        if (digit == 2 || digit == 3 || digit == 5 || digit == 7 || digit == 11 || digit == 13) {\n            count++;\n        }\n    }\n    return count;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\n>>> decimal_to_binary(15L)\n\"db1111db\"\n>>> decimal_to_binary(32L)\n\"db100000db\"\n*/\nstring decimal_to_binary(long decimal)\n{\n    string binary = \"\";\n    while (decimal > 0)\n    {\n        binary = (decimal % 2 == 0) ? \"0\" + binary : \"1\" + binary;\n        decimal /= 2;\n    }\n    return \"db\" + binary + \"db\";\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n Filter an input array of strings only for ones that contain given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n*/\nstring[] filter_by_substring(string[] strings, string substring)\n{\n    string[] filtered = new string[0];\n    foreach (string s; strings)\n    {\n        if (s.canFind(substring))\n        {\n            filtered ~= s;\n        }\n    }\n    return filtered;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou are given a string s.\nYour task is to check if the string is hapd or not.\nA string is hapd if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>> is_happy(\"a\")\nfalse\n>>> is_happy(\"aa\")\nfalse\n>>> is_happy(\"abcd\")\ntrue\n>>> is_happy(\"aabb\")\nfalse\n>>> is_happy(\"adb\")\ntrue\n>>> is_happy(\"xyy\")\nfalse\n*/\nbool is_happy(string s)\n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n        {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you an array of GPAs for some students and you have to write \na function that can output an array of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\nExample:\n>>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n*/\nstring[] numerical_letter_grade(float[] grades)\n{\n    string[] letter_grades = new string[grades.length];\n    for(int i = 0; i < grades.length; i++)\n    {\n        if(grades[i] == 4.0)\n        {\n            letter_grades[i] = \"A+\";\n        }\n        else if(grades[i] > 3.7)\n        {\n            letter_grades[i] = \"A\";\n        }\n        else if(grades[i] > 3.3)\n        {\n            letter_grades[i] = \"A-\";\n        }\n        else if(grades[i] > 3.0)\n        {\n            letter_grades[i] = \"B+\";\n        }\n        else if(grades[i] > 2.7)\n        {\n            letter_grades[i] = \"B\";\n        }\n        else if(grades[i] > 2.3)\n        {\n            letter_grades[i] = \"B-\";\n        }\n        else if(grades[i] > 2.0)\n        {\n            letter_grades[i] = \"C+\";\n        }\n        else if(grades[i] > 1.7)\n        {\n            letter_grades[i] = \"C\";\n        }\n        else if(grades[i] > 1.3)\n        {\n            letter_grades[i] = \"C-\";\n        }\n        else if(grades[i] > 1.0)\n        {\n            letter_grades[i] = \"D+\";\n        }\n        else if(grades[i] > 0.7)\n        {\n            letter_grades[i] = \"D\";\n        }\n        else if(grades[i] > 0.0)\n        {\n            letter_grades[i] = \"D-\";\n        }\n        else\n        {\n            letter_grades[i] = \"E\";\n        }\n    }\n    return letter_grades;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\n>>> prime_length(\"Hello\")\ntrue\n>>> prime_length(\"abcdcba\")\ntrue\n>>> prime_length(\"kittens\")\ntrue\n>>> prime_length(\"orange\")\nfalse\n*/\nbool prime_length(string string)\n{\n    int length = string.length;\n    if (length < 2)\n    {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(length); i++)\n    {\n        if (length % i == 0)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\nlong starts_one_ends(long n)\n{\n    if (n == 1) {\n        return 1;\n    }\n    long count = 0;\n    for (long i = 1; i <= n; i++) {\n        if (i == 1 || i == n) {\n            count += pow(2, n - 2);\n        } else {\n            count += pow(2, n - i - 1);\n        }\n    }\n    return count;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\nExample\n>>> solve(1000L)\n\"1\"\n>>> solve(150L)\n\"110\"\n>>> solve(147L)\n\"1100\"\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\nstring solve(long N)\n{\n    long binarySum = 0;\n    while (N > 0)\n    {\n        binarySum += N % 2;\n        N /= 2;\n    }\n    return binarySum.toBinaryString();\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of integers lst. add the even elements that are at odd indices..\nExamples:\n>>> add([4L, 2L, 6L, 7L])\n2L\n*/\nlong add(long[] lst)\n{\n    long sum = 0;\n    for (int i = 1; i < lst.length; i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\")\n\"Hello !!!Wdlor\"\n*/\nstring anti_shuffle(string s)\n{\n    string[] words = s.split(\" \");\n    string result = \"\";\n    foreach (word; words)\n    {\n        char[] chars = word.toCharArray();\n        chars.sort();\n        result ~= chars.data;\n        result ~= \" \";\n    }\n    return result.strip();\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou are given a 2 dimensional data, as a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the array,\nand return array of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\nExamples:\n>>> get_row([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L)\n[tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]\n>>> get_row([], 1L)\n[]\n>>> get_row([[], [1L], [1L, 2L, 3L]], 3L)\n[tuple(2L, 2L)]\n*/\nTuple!(long, long)[] get_row(long[][] lst, long x)\nnotnull lst && lst.length > 0 && lst[0].length > 0:\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    foreach (i, row; lst)\n    {\n        foreach (j, col; row)\n        {\n            if (col == x)\n            {\n                result ~= Tuple(i, j);\n            }\n        }\n    }\n    result.sort().reverse();\n    return result;\nelse:\n    return [];\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven an array of non-negative integers, return a cod of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5L])\n[5L]\n>>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n[0L, 1L, 2L, 3L, 4L, 5L]\n>>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n[6L, 5L, 4L, 3L, 2L, 1L, 0L]\n*/\nlong[] sort_array(long[] array)\n{\n    long[] sortedArray = array.dup;\n    long sum = array[0] + array[$-1];\n    if (sum % 2 == 0) {\n        sortedArray.sort();\n        sortedArray.reverse();\n    } else {\n        sortedArray.sort();\n    }\n    return sortedArray;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\n>>> encrypt(\"hi\")\n\"lm\"\n>>> encrypt(\"asdfghjkl\")\n\"ewhjklnop\"\n>>> encrypt(\"gf\")\n\"kj\"\n>>> encrypt(\"et\")\n\"ix\"\n*/\nstring encrypt(string s)\n{\n    string encrypted = \"\";\n    int shift = 2 * 2; // Shift the alphabet by 2 * 2 places\n    for (int i = 0; i < s.length; i++)\n    {\n        char c = s[i];\n        if (c >= 'a' && c <= 'z')\n        {\n            c = (c - 'a' + shift) % 26 + 'a';\n        }\n        else if (c >= 'A' && c <= 'Z')\n        {\n            c = (c - 'A' + shift) % 26 + 'A';\n        }\n        encrypted += c;\n    }\n    return encrypted;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n For a given array of integers, return a tuple consisting of a sum and a product of all the integers in an array.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\ntuple(0L, 1L)\n>>> sum_product([1L, 2L, 3L, 4L])\ntuple(10L, 24L)\n*/\nTuple!(long, long) sum_product(long[] numbers)\n{\n    long sum = 0L;\n    long product = 1L;\n    foreach (num; numbers)\n    {\n        sum += num;\n        product *= num;\n    }\n    return tuple(sum, product);\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou are given an array of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the array.\nReturn null if there is no such element.\n>>> next_smallest([1L, 2L, 3L, 4L, 5L])\n2L\n>>> next_smallest([5L, 1L, 4L, 3L, 2L])\n2L\n>>> next_smallest([])\nNone\n>>> next_smallest([1L, 1L])\nNone\n*/\nNullable!(long) next_smallest(long[] lst)\n{\n    if (lst.length < 2) return null;\n    long smallest = lst[0];\n    long nextSmallest = lst[1];\n    foreach (long num; lst)\n    {\n        if (num < smallest)\n        {\n            nextSmallest = smallest;\n            smallest = num;\n        }\n        else if (num < nextSmallest && num != smallest)\n        {\n            nextSmallest = num;\n        }\n    }\n    return nextSmallest == smallest ? null : nextSmallest;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0L\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1L\n*/\nlong is_bored(string S)\n{\n    long boredoms = 0;\n    string[] sentences = S.splitBy(\".\", \"?\", \"!\");\n    foreach (sentence; sentences)\n    {\n        if (sentence.startsWith(\"I \"))\n        {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\n>>> any_int(5L, 2L, 7L)\ntrue\n>>> any_int(3L, 2L, 2L)\nfalse\n>>> any_int(3L, -2L, 1L)\ntrue\n>>> any_int(3.6, -2.2, 2L)\nfalse\n*/\nbool any_int(float x, float y, float z)\n{\n    if (x.isWhole && y.isWhole && z.isWhole)\n    {\n        if (x == y + z || y == x + z || z == x + y)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \nExamples:\n>>> encode(\"test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n\"tHKS KS C MGSSCGG\"\n*/\nstring encode(string message)\n{\n    string vowels = \"aeiouAEIOU\";\n    string encodedMessage = \"\";\n    for (int i = 0; i < message.length; i++)\n    {\n        char c = message[i];\n        if (isalpha(c))\n        {\n            if (vowels.find(c) != -1)\n            {\n                int index = vowels.find(c);\n                int newIndex = (index + 2) % vowels.length;\n                c = vowels[newIndex];\n            }\n            c = c ^ 32; // Swap case\n        }\n        encodedMessage ~= c;\n    }\n    return encodedMessage;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nYou are given an array of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\n>>> skjkasdkd([0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L])\n10L\n>>> skjkasdkd([1L, 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L])\n25L\n>>> skjkasdkd([1L, 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L])\n13L\n>>> skjkasdkd([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L, 91L, 83L, 0L, 5L, 6L])\n11L\n>>> skjkasdkd([0L, 81L, 12L, 3L, 1L, 21L])\n3L\n>>> skjkasdkd([0L, 8L, 1L, 2L, 1L, 7L])\n7L\n*/\nlong skjkasdkd(long[] lst)\nnotnull notempty(lst)\n{\n    long maxPrime = 0;\n    foreach (num; lst)\n    {\n        if (isPrime(num) && num > maxPrime)\n        {\n            maxPrime = num;\n        }\n    }\n    long sum = 0;\n    while (maxPrime > 0)\n    {\n        sum += maxPrime % 10;\n        maxPrime /= 10;\n    }\n    return sum;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven an associative array, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given associative array is empty.\nExamples:\n>>> check_dict_case([\"a\": \"apple\", \"b\": \"banana\"].nullable)\ntrue\n>>> check_dict_case([\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\nfalse\n>>> check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\nfalse\n>>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable)\nfalse\n>>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable)\ntrue\n*/\nbool check_dict_case(Nullable!(string[string]) dict)\nnot null and (dict.keys.all(islower) or dict.keys.all(isupper));\n"], ["import std.math;\nimport std.typecons;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\n>>> count_up_to(5L)\n[2L, 3L]\n>>> count_up_to(11L)\n[2L, 3L, 5L, 7L]\n>>> count_up_to(0L)\n[]\n>>> count_up_to(20L)\n[2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]\n>>> count_up_to(1L)\n[]\n>>> count_up_to(18L)\n[2L, 3L, 5L, 7L, 11L, 13L, 17L]\n*/\nlong[] count_up_to(long n)\n{\n    long[] primes;\n    long count = 0;\n    long i = 2;\n    while (i < n)\n    {\n        if (isPrime(i))\n        {\n            primes ~= i;\n            count++;\n        }\n        i++;\n    }\n    return primes;\n}"], ["import std.math;\nimport std.typecons;\n/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\n>>> multiply(148L, 412L)\n16L\n>>> multiply(19L, 28L)\n72L\n>>> multiply(2020L, 1851L)\n0L\n>>> multiply(14L, -15L)\n20L\n*/\nlong multiply(long a, long b)\n{\n    return (a % 10) * (b % 10);\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nGiven a string s, count the number of uppercase vowels in even indices.\nFor example:\n>>> count_upper(\"aBCdEf\")\n1L\n>>> count_upper(\"abcdefg\")\n0L\n>>> count_upper(\"dBBE\")\n0L\n*/\nlong count_upper(string s)\n{\n    long count = 0;\n    foreach (i, c; s)\n    {\n        if (i % 2 == 0 && c.isUpper && \"AEIOU\".index(c) != -1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10L\n>>> closest_integer(\"15.3\")\n15L\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\nlong closest_integer(string value)\n{\n    immutable double num = value.toDouble();\n    immutable long rounded = num.round.toLong;\n    immutable long diff = num - rounded;\n    return diff == 0.5 ? (num > 0 ? rounded + 1 : rounded - 1) : rounded;\n}\n"], ["import std.math;\nimport std.typecons;\n/*\n From a given array of integers, generate an array of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1L, 2L, 3L, 2L, 3L, 4L, 2L])\n[1L, 2L, 3L, 3L, 3L, 4L, 4L]\n*/\nlong[] rolling_max(long[] numbers)\n{\n    long[] result = new long[numbers.length];\n    long max = long.min;\n    for (int i = 0; i < numbers.length; i++)\n    {\n        max = max(max, numbers[i]);\n        result[i] = max;\n    }\n    return result;\n}\n"]]